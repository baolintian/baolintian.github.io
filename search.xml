<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>multi-university contest1</title>
      <link href="/2018/07/23/multi-university-contest1/"/>
      <url>/2018/07/23/multi-university-contest1/</url>
      <content type="html"><![CDATA[<p>多校第一场</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="sscanf的用法"><a href="#sscanf的用法" class="headerlink" title="sscanf的用法"></a>sscanf的用法</h1><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> multi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>newcoder-contest2</title>
      <link href="/2018/07/22/newcoder-contest2/"/>
      <url>/2018/07/22/newcoder-contest2/</url>
      <content type="html"><![CDATA[<p>newcoder contest2 补题<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><a href="https://www.nowcoder.com/acm/contest/140#question" target="_blank" rel="external">比赛的链接</a></p><h1 id="G-transform"><a href="#G-transform" class="headerlink" title="G transform"></a>G transform</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个坐标轴上若干个点，然后上面放了若干个货物。<br>确定一个定点，然后可以将货物移到这个点上面，花费为\( 2 \left| (x_i-x_j) \right| \),总花费不能超过T。<br>问最多能将多少数量的货物集中到一个点上面</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这种最大最小值的问题，往往一开始要想到二分答案。<br>然后先确定固定的点，然后递推的计算代价，若找到符合条件的组合，立刻退出，具体的过程可以看我的注释</p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gs(c) (c <span class="meta-string">&lt; '0' || c &gt; '9')</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc(c) c = getchar()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> getint() (&#123; int w = 0; char gc(c); while (gs(c)) gc(c); while (!gs(c)) w = w*10+c-<span class="meta-string">'0'</span>, gc(c); w; &#125;)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> d(i, j) (int64)(x[j] - x[i])</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500050</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> int64;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, x[N], a[N];</div><div class="line">int64 T, s[N];</div><div class="line"></div><div class="line"><span class="function">int64 <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> lc, <span class="keyword">int</span> r, <span class="keyword">int</span> rc)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> l == r? rc - lc: s[r - <span class="number">1</span>] - s[l] + a[l] - lc + rc;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(int64 need)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> l = <span class="number">1</span>, lc = <span class="number">1</span>, r = n + <span class="number">1</span>, rc = <span class="number">1</span>;</div><div class="line"><span class="comment">//lc, rc分别表示向a[l], a[r]借用了多少的货物</span></div><div class="line">int64 cur = <span class="number">0</span>, sa = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;<span class="comment">//都移到坐标为x[1]的点</span></div><div class="line"><span class="keyword">if</span> (sa + a[i] &lt;= need) sa += a[i], cur += d(<span class="number">1</span>, i) * a[i];</div><div class="line"><span class="keyword">else</span> &#123; r = i, rc = need - sa + <span class="number">1</span>, cur += d(<span class="number">1</span>, i) * (rc - <span class="number">1</span>); <span class="keyword">break</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//这里的rc表示向a[r]借了rc-1个物品</span></div><div class="line"><span class="comment">//cout&lt;&lt;"haha"&lt;&lt;need&lt;&lt;" "&lt;&lt;cur&lt;&lt;endl;</span></div><div class="line"><span class="keyword">if</span> (cur &lt;= T) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;<span class="comment">//i应该是中位点,枚举中位点</span></div><div class="line">cur += d(i - <span class="number">1</span>, i) * (sum(l, lc, i, <span class="number">1</span>) - sum(i, <span class="number">1</span>, r, rc));</div><div class="line"><span class="keyword">while</span> (r &lt;= n &amp;&amp; d(l, i) &gt; d(i, r)) &#123;<span class="comment">//拓展l, r使得i变成中位数</span></div><div class="line"><span class="keyword">int</span> z = min(a[l] - lc + <span class="number">1</span>, a[r] - rc + <span class="number">1</span>);<span class="comment">//最多可以移动的货物的数量</span></div><div class="line">cur += (d(i, r) - d(l, i)) * z;</div><div class="line"><span class="comment">//这个每次必然会更新其中的一个数</span></div><div class="line"><span class="keyword">if</span> (lc += z, lc &gt; a[l]) ++l, lc = <span class="number">1</span>;<span class="comment">//移动了左端</span></div><div class="line"><span class="keyword">if</span> (rc += z, rc &gt; a[r]) ++r, rc = <span class="number">1</span>;<span class="comment">//移动了右端</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (cur &lt;= T) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;T;</div><div class="line">T /= <span class="number">2</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) x[i] = getint();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = getint(), s[i] = s[i - <span class="number">1</span>] + a[i];</div><div class="line"></div><div class="line">int64 ll = <span class="number">0</span>, rr = s[n];</div><div class="line"><span class="keyword">while</span> (ll &lt; rr) &#123;</div><div class="line">int64 mm = (ll + rr + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (check(mm)) ll = mm;</div><div class="line"><span class="keyword">else</span> rr = mm - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;ll&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="重写了一遍的代码"><a href="#重写了一遍的代码" class="headerlink" title="重写了一遍的代码"></a>重写了一遍的代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>+<span class="number">10</span>;</div><div class="line">ll n, T;</div><div class="line"><span class="keyword">int</span> x[maxn], a[maxn];</div><div class="line">ll s[maxn];</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">dis</span><span class="params">(ll i, ll j)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x[i]-x[j]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">cost</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> ul, <span class="keyword">int</span> r, <span class="keyword">int</span> ur)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ur-ul;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> s[r<span class="number">-1</span>]-s[l<span class="number">-1</span>]+ur-ul;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(ll mid)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l=<span class="number">1</span>, r=n+<span class="number">1</span>, ul=<span class="number">0</span>, ur=<span class="number">0</span>;</div><div class="line">    ll cur = <span class="number">0</span>;</div><div class="line">    ll now_cost = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(cur+a[i]&lt;=mid) &#123;</div><div class="line">            cur += a[i];</div><div class="line">            now_cost += dis(<span class="number">1</span>, i)*a[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            ur = mid-cur;</div><div class="line">            now_cost += dis(<span class="number">1</span>, i)*(ur);</div><div class="line">            r = i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(now_cost&lt;=T) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</div><div class="line">        now_cost += dis(i<span class="number">-1</span>, i)*(cost(l, ul, i, <span class="number">0</span>)-cost(i, <span class="number">0</span>, r, ur));</div><div class="line">        <span class="keyword">while</span>(r&lt;=n &amp;&amp; dis(l, i)&gt;dis(i, r))&#123;</div><div class="line">            <span class="keyword">int</span> z = min(a[l]-ul, a[r]-ur);</div><div class="line">            now_cost += z*(<span class="number">-1</span>*dis(l, i)+dis(i, r));</div><div class="line">            ul += z;</div><div class="line">            ur += z;</div><div class="line">            <span class="keyword">if</span>(ul&gt;=a[l]) ul=<span class="number">0</span>, l++;</div><div class="line">            <span class="keyword">else</span> ur=<span class="number">0</span>, r++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(now_cost&lt;=T) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;T;</div><div class="line">    T /= <span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cin</span>&gt;&gt;x[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cin</span>&gt;&gt;a[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) s[i] = s[i<span class="number">-1</span>]+a[i];</div><div class="line">    ll l=<span class="number">0</span>, r=s[n];</div><div class="line">    ll mid;</div><div class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">        mid = <span class="number">1l</span>l*(l+r+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(judge(mid))&#123;</div><div class="line">            l = mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> r = mid<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;l&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="J-farm"><a href="#J-farm" class="headerlink" title="J  farm"></a>J  farm</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>二维的格子上面有一种植物，施不同种类的肥料，如果化肥的种类和植物的种类不同的话，那么植物将死亡。<br>问最后死了多少个植物。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>比赛的时候想到的是怎么维护删除之后的信息，自然时间复杂度非常的高。<br>题解里面根本不需要维护删除，而是将他们的权值进行叠加，然后判断是否为倍数之类的</p><h2 id="随机化的做法"><a href="#随机化的做法" class="headerlink" title="随机化的做法"></a>随机化的做法</h2><p>给每一个化肥一个编号权重，使他们之间尽量不是倍数的关系。<br>统计每一个格子的化肥的权重和，若是原来的倍数，那么说明化肥的种类和植物的种类是一致的，不会导致死亡。否则植物死亡，统计答案<br>随机数大法好orz</p><h2 id="ac-code-1"><a href="#ac-code-1" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="comment">//inline ll rrand()&#123;return (1ll*rand()&lt;&lt;15)+rand();&#125;</span></div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</div><div class="line">    <span class="comment">//srand(233);</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fertilizer(n*m+<span class="number">10</span>);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;ll&gt; &gt; a(n+<span class="number">2</span>, <span class="built_in">vector</span>&lt;ll&gt;(m+<span class="number">2</span>));</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;ll&gt; &gt; b(n+<span class="number">2</span>, <span class="built_in">vector</span>&lt;ll&gt;(m+<span class="number">2</span>));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n*m; i++) fertilizer[i] = rand();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;b[i][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</div><div class="line">        <span class="keyword">int</span> x1, y1, x2, y2, c;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;</div><div class="line">        <span class="comment">//标记的过程还是有一些小技巧的。</span></div><div class="line">        a[x1][y1] += fertilizer[c];</div><div class="line">        a[x2+<span class="number">1</span>][y2+<span class="number">1</span>] += fertilizer[c];</div><div class="line">        a[x2+<span class="number">1</span>][y1] -= fertilizer[c];</div><div class="line">        a[x1][y2+<span class="number">1</span>] -= fertilizer[c];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)&#123;</div><div class="line">            a[i][j] += a[i<span class="number">-1</span>][j]+a[i][j<span class="number">-1</span>]-a[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(a[i][j]%fertilizer[b[i][j]]) ans++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="二维树状数组组"><a href="#二维树状数组组" class="headerlink" title="二维树状数组组"></a>二维树状数组组</h2><p><a href="https://m.nowcoder.com/discuss/87525?type=101" target="_blank" rel="external">题解链接</a></p><p><a href="https://blog.csdn.net/xf_zhen/article/details/52439808" target="_blank" rel="external">二维树状数组解释</a><br>二维树状数组其实就是扫两遍的思想</p><p>先将查询排序，然后检查每一个种类的植物，看他们的值是否为0，若为0表示同种农药的，没有死亡；否则有不同种的农药</p><h2 id="玄学ac"><a href="#玄学ac" class="headerlink" title="玄学ac"></a>玄学ac</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bit[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;pii&gt; plant[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">low_bit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x&amp;(-x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;=n; i+=low_bit(i))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=y; j&lt;=m; j+=low_bit(j))&#123;</div><div class="line">            bit[i][j] += val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&gt;<span class="number">0</span>; i-=low_bit(i))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=y; j&gt;<span class="number">0</span>; j -= low_bit(j))&#123;</div><div class="line">            ans += bit[i][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x1, y1, x2, y2, k;</div><div class="line">&#125;q[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Query a, Query b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.k&lt;b.k;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n+<span class="number">2</span>; i++)&#123;</div><div class="line">        bit[i].resize(m+<span class="number">2</span>);</div><div class="line">        plant[i].resize(m+<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)&#123;</div><div class="line">            <span class="keyword">int</span> kind;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;kind);</div><div class="line">            plant[kind].pb(mp(i, j));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> x1, y1, x2, y2, c;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2, &amp;c);</div><div class="line">        q[i].x1=x1, q[i].y1=y1, q[i].x2=x2, q[i].y2=y2, q[i].k=c;</div><div class="line">        add(x1, y1, <span class="number">1</span>);</div><div class="line">        add(x2+<span class="number">1</span>, y2+<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">        add(x1, y2+<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">        add(x2+<span class="number">1</span>, y1, <span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> i, j, zz;</div><div class="line">    sort(q+<span class="number">1</span>, q+k+<span class="number">1</span>, cmp);</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, j=<span class="number">1</span>; i&lt;=n*m; i++)&#123;<span class="comment">//第i种植物</span></div><div class="line">        <span class="keyword">while</span>(q[j].k&lt;i&amp;&amp;j&lt;=k) j++;<span class="comment">//第j种农药</span></div><div class="line">        <span class="keyword">if</span>(plant[i].size() == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">        zz = j;</div><div class="line">        <span class="keyword">while</span>(q[zz].k==i&amp;&amp;zz&lt;=k) zz++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ii=j; ii&lt;zz; ii++)&#123;</div><div class="line">            add(q[ii].x1, q[ii].y1, <span class="number">-1</span>);</div><div class="line">            add(q[ii].x2+<span class="number">1</span>, q[ii].y2+<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">            add(q[ii].x1, q[ii].y2+<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">            add(q[ii].x2+<span class="number">1</span>, q[ii].y1, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ii=<span class="number">0</span>; ii&lt;plant[i].size(); ii++)&#123;</div><div class="line">            <span class="keyword">if</span>(query(plant[i][ii].fi, plant[i][ii].se))&#123;</div><div class="line">                <span class="comment">//cout&lt;&lt;"ha"&lt;&lt;endl;</span></div><div class="line">                ans++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ii=j; ii&lt;zz; ii++)&#123;</div><div class="line">            add(q[ii].x1, q[ii].y1, <span class="number">1</span>);</div><div class="line">            add(q[ii].x2+<span class="number">1</span>, q[ii].y2+<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">            add(q[ii].x1, q[ii].y2+<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">            add(q[ii].x2+<span class="number">1</span>, q[ii].y1, <span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        j=zz;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> newcoder </tag>
            
            <tag> trainning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>训练实录</title>
      <link href="/2018/07/21/%E8%AE%AD%E7%BB%83%E5%AE%9E%E5%BD%95/"/>
      <url>/2018/07/21/%E8%AE%AD%E7%BB%83%E5%AE%9E%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>记录</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><p><a href="https://www.nowcoder.com/acm/contest/140#question" target="_blank" rel="external">newcoder contest2</a> solve 3<br><a href="https://babydragon.top/2018/07/22/newcoder-contest2/" target="_blank" rel="external">补题链接</a></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 训练实录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>放假了哈哈</title>
      <link href="/2018/07/20/%E6%94%BE%E5%81%87%E4%BA%86%E5%93%88%E5%93%88/"/>
      <url>/2018/07/20/%E6%94%BE%E5%81%87%E4%BA%86%E5%93%88%E5%93%88/</url>
      <content type="html"><![CDATA[<p>打了一下午加一晚上的osu，依旧是菜鸡一个，打到手抽筋。。。<br>终于放假了哈哈哈哈哈哈<br>这学期的考试周真是难熬<br>整理是根据手机相册进行的<br><a id="more"></a></p><script>    if("2333"==prompt("Please input password"))    {        alert("Right");    }    else    {        alert("Wrong");        location="http://babydragon.top";    }</script><h1 id="三月"><a href="#三月" class="headerlink" title="三月"></a>三月</h1><p>入了骚尼的降噪耳机，感觉比我之前用的耳塞强多了。平时出门不随身带，一是不方便，而是有点闷，完全把它当成了有线耳机了啊喂，早知道入1ABT了，不过降噪是真的厉害。</p><p>在同学的推荐下入了ikbc c87茶轴，我发现不适合用来敲代码。。。只适合用来玩osu。。。然后就搬到了实验室。。。</p><p>开学的前一个月，进行了两周的4C的选拔，第三周摸了一周的鱼，第四周参加了比赛。比赛比较的水，但是也算增加了一次经历吧（集体全国银奖，没拖后腿orz。</p><p>一开学课多到爆炸，但还是硬着头皮去上了，上课就基本听听课，要交作业了抄一抄应付。(话说我为什么要选信号啊，我脑子瓦特了吗，大概就是对什么都感兴趣惹的祸吧，有时候感觉这是优点，但让我活的很累却又很开心。</p><p>这学期的课程让我深入学习了计算机的底层的相关原理（数电，计组实验，操作系统，计组相关的课程，虽然偏向于底层，但还是相当的重要的</p><p>退了数模的坑。虽然有点坑队友，但我还是希望他们取得好成绩吧。</p><h1 id="四月"><a href="#四月" class="headerlink" title="四月"></a>四月</h1><p>出了一次校门和同学一起出去踏青，还是很开心的。</p><p>参加了acm校赛，菜鸡二等奖。</p><p>数模美赛出成绩了，M奖，对得起之前的努力。</p><p>此时学习与竞赛已经两边都有力不从心的感觉，深知道路艰难，前路迷茫</p><h1 id="五月"><a href="#五月" class="headerlink" title="五月"></a>五月</h1><p>acm省赛选拔，最后还是侥幸获得省赛的名额，深知自己的不足，感觉拖了队友的后腿</p><p>5.20参加了省赛，有道签到题有锅，然后一道很简单的博弈论没写出来。。。铜滚粗(参赛的T-shit还挺好的</p><h1 id="六月"><a href="#六月" class="headerlink" title="六月"></a>六月</h1><p>应该是这学期相对轻松的一段时间，之前周六周天都在打比赛，做实验，晚上偶尔打cf中度过。之后就只有日常的周六的实验室安排的比赛了，相对舒服一些</p><p>基本上时间就是在学习基础课程和写代码中度过吧</p><p>专业分方向，选择了大数据方向，头发不保了emmmmm</p><h1 id="七月"><a href="#七月" class="headerlink" title="七月"></a>七月</h1><p>大概倒数第三周的时候进入了考试复习月</p><p>我感觉这是我在大学中最难熬的一个考试周，大概是因为前面的坑太多了，上课没有听懂的就敷衍了事了<br>坐了三周的图书馆屁股疼。。。<br>以为自己的模电会凉，结果试卷异常的简单，大概学院是良心发现了吧，计算机学什么模电，就应该专心的敲代码(逃<br>就这样吧，反正也熬过来了，效率有点低，发现越是患得患失，内心就会有些焦躁不安。我还是喜欢大一那个不和任何人比，钻研自己喜欢的事情的自己。有的事情就是水到渠成的吧。</p><p>考完试入了一个显示器和一个垃圾键盘（准备放宿舍用），本来想入移动硬盘，但是以后想搭建一个云盘，事情先放一放吧</p><h1 id="假装有个总结"><a href="#假装有个总结" class="headerlink" title="假装有个总结"></a>假装有个总结</h1><p>这学期课程异常的多(计组计操计网信号模电)，实验也是异常的多(计操计组计网每门都有实验，数电，信号实验)，课程异常的重要，acm比赛和日常训练很多，很难在其中找到一个平衡点啊。</p><p>学习上收获还是颇丰的，依旧想找到一个能与她分享日常的人，但是这大概很难吧。</p><p>有时间就去多读读书多敲敲代码吧。</p><p>明天，就开始了暑假的培训，我也只能在此停歇片刻吧。</p><p>因为，<strong>这不是我一个人的战斗!</strong></p><p>2018年7月21日00:35:44 书毕</p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人小结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计组--手工模拟计算机的计算过程</title>
      <link href="/2018/07/01/%E8%AE%A1%E7%BB%84-%E6%89%8B%E5%B7%A5%E6%A8%A1%E6%8B%9F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/07/01/%E8%AE%A1%E7%BB%84-%E6%89%8B%E5%B7%A5%E6%A8%A1%E6%8B%9F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>模拟计算机的运算过程<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="一位原码的乘法"><a href="#一位原码的乘法" class="headerlink" title="一位原码的乘法"></a>一位原码的乘法</h1><div align="center"><br><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fsuo11d32cj31kw23ve82.jpg" alt=""><br></div><h1 id="两位原码的乘法"><a href="#两位原码的乘法" class="headerlink" title="两位原码的乘法"></a>两位原码的乘法</h1><div align="center"><br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fsuo9o6sfdj31kw23v7wi.jpg" alt=""><br></div><h1 id="一位补码的乘法"><a href="#一位补码的乘法" class="headerlink" title="一位补码的乘法"></a>一位补码的乘法</h1><div align="center"><br><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fsuo0qfqkmj31kw23ve82.jpg" alt=""><br></div><h1 id="两位补码的乘法"><a href="#两位补码的乘法" class="headerlink" title="两位补码的乘法"></a>两位补码的乘法</h1><div align="center"><br><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fsuo07sb7zj31kw23vb2a.jpg" alt=""><br></div><h1 id="加减除法"><a href="#加减除法" class="headerlink" title="加减除法"></a>加减除法</h1><div align="center"><br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fsuo0tk3i4j31kw23ve82.jpg" alt=""><br></div><h1 id="补码的除法"><a href="#补码的除法" class="headerlink" title="补码的除法"></a>补码的除法</h1><div align="center"><br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fsuo0la3psj31kw23vhdu.jpg" alt=""><br></div><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>大素数测试以及分解</title>
      <link href="/2018/06/21/%E5%A4%A7%E7%B4%A0%E6%95%B0%E6%B5%8B%E8%AF%95%E4%BB%A5%E5%8F%8A%E5%88%86%E8%A7%A3/"/>
      <url>/2018/06/21/%E5%A4%A7%E7%B4%A0%E6%95%B0%E6%B5%8B%E8%AF%95%E4%BB%A5%E5%8F%8A%E5%88%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>kuangbin的板子<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="大数测素以及分解"><a href="#大数测素以及分解" class="headerlink" title="大数测素以及分解"></a>大数测素以及分解</h1><p><a href="http://poj.org/problem?id=1811" target="_blank" rel="external">prime test</a><br>最多可以测15个素数的乘积<br>614889782588491410<br>2 3 5 13 11 7 41 17 23 19 31 47 37 29 43</p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//****************************************************************</span></div><div class="line"><span class="comment">// Miller_Rabin 算法进行素数测试</span></div><div class="line"><span class="comment">//速度快，而且可以判断 &lt;2^63的数</span></div><div class="line"><span class="comment">//****************************************************************</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">20</span>;<span class="comment">//随机算法判定次数，S越大，判错概率越小</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//计算 (a*b)%c.   a,b都是long long的数，直接相乘可能溢出的</span></div><div class="line"><span class="comment">//  a,b,c &lt;2^63</span></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mult_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> c)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    a%=c;</div><div class="line">    b%=c;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;ret+=a;ret%=c;&#125;</div><div class="line">        a&lt;&lt;=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(a&gt;=c)a%=c;</div><div class="line">        b&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//计算  x^n %c</span></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> n,<span class="keyword">long</span> <span class="keyword">long</span> mod)</span><span class="comment">//x^n%c</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> x%mod;</div><div class="line">    x%=mod;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=x;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(n)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ret=mult_mod(ret,tmp,mod);</div><div class="line">        tmp=mult_mod(tmp,tmp,mod);</div><div class="line">        n&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//以a为基,n-1=x*2^t      a^(n-1)=1(mod n)  验证n是不是合数</span></div><div class="line"><span class="comment">//一定是合数返回true,不一定返回false</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> n,<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> t)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=pow_mod(a,x,n);</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> last=ret;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</div><div class="line">    &#123;</div><div class="line">        ret=mult_mod(ret,ret,n);</div><div class="line">        <span class="keyword">if</span>(ret==<span class="number">1</span>&amp;&amp;last!=<span class="number">1</span>&amp;&amp;last!=n<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//合数</span></div><div class="line">        last=ret;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(ret!=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Miller_Rabin()算法素数判定</span></div><div class="line"><span class="comment">//是素数返回true.(可能是伪素数，但概率极小)</span></div><div class="line"><span class="comment">//合数返回false;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Miller_Rabin</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>((n&amp;<span class="number">1</span>)==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//偶数</span></div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x=n<span class="number">-1</span>;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>((x&amp;<span class="number">1</span>)==<span class="number">0</span>)&#123;x&gt;&gt;=<span class="number">1</span>;t++;&#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a=rand()%(n<span class="number">-1</span>)+<span class="number">1</span>;<span class="comment">//rand()需要stdlib.h头文件</span></div><div class="line">        <span class="keyword">if</span>(check(a,n,x,t))</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//合数</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//************************************************</span></div><div class="line"><span class="comment">//pollard_rho 算法进行质因数分解</span></div><div class="line"><span class="comment">//************************************************</span></div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> factor[<span class="number">100</span>];<span class="comment">//质因数分解结果（刚返回时是无序的）</span></div><div class="line"><span class="keyword">int</span> tol;<span class="comment">//质因数的个数。数组小标从0开始</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//???????</span></div><div class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>) <span class="keyword">return</span> gcd(-a,b);</div><div class="line">    <span class="keyword">while</span>(b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> t=a%b;</div><div class="line">        a=b;</div><div class="line">        b=t;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Pollard_rho</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> c)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>,k=<span class="number">2</span>;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x0=rand()%x;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> y=x0;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        i++;</div><div class="line">        x0=(mult_mod(x0,x0,x)+c)%x;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> d=gcd(y-x0,x);</div><div class="line">        <span class="keyword">if</span>(d!=<span class="number">1</span>&amp;&amp;d!=x) <span class="keyword">return</span> d;</div><div class="line">        <span class="keyword">if</span>(y==x0) <span class="keyword">return</span> x;</div><div class="line">        <span class="keyword">if</span>(i==k)&#123;y=x0;k+=k;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//对n进行素因子分解</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findfac</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(Miller_Rabin(n))<span class="comment">//素数</span></div><div class="line">    &#123;</div><div class="line">        factor[tol++]=n;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p=n;</div><div class="line">    <span class="keyword">while</span>(p&gt;=n)p=Pollard_rho(p,rand()%(n<span class="number">-1</span>)+<span class="number">1</span>);</div><div class="line">    findfac(p);</div><div class="line">    findfac(n/p);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">   <span class="comment">// srand(time(NULL));//需要time.h头文件  //POJ上G++要去掉这句话</span></div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;n);</div><div class="line">        <span class="keyword">if</span>(Miller_Rabin(n))</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Prime\n"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        tol=<span class="number">0</span>;</div><div class="line">        findfac(n);</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=factor[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tol;i++)</div><div class="line">          <span class="keyword">if</span>(factor[i]&lt;ans)</div><div class="line">             ans=factor[i];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>欧拉路径</title>
      <link href="/2018/06/19/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
      <url>/2018/06/19/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<p>最近POJ挂了，找个时间补一下<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="混合图的欧拉路经"><a href="#混合图的欧拉路经" class="headerlink" title="混合图的欧拉路经"></a>混合图的欧拉路经</h1><p><a href="http://poj.org/problem?id=1637" target="_blank" rel="external">欧拉图的欧拉路经</a></p><h2 id="算法的步骤"><a href="#算法的步骤" class="headerlink" title="算法的步骤"></a>算法的步骤</h2><ol><li>给无向图随意的指一个方向，然后两点间加一条边，表示可以反向。</li><li>0节点给每一个out[i]&gt;in[out]的节点连一条边，容量为(out[i]-in[i])/2;</li><li>每一个out[i]&lt;in[out]的节点向n+1连一条边，容量为(in[i]-out[i])/2;</li><li>跑最大流，然后判断s连出去的点是否是满流。因为必须保证out[i] == in[i]</li></ol><h2 id="未验证的代码"><a href="#未验证的代码" class="headerlink" title="未验证的代码"></a>未验证的代码</h2><p>cout和printf不要混用。。。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> in[maxn], out[maxn];</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> from, to, cap, flow;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; edges;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> cap)</span></span>&#123;</div><div class="line">    edges.push_back(Edge&#123;u, v, cap, <span class="number">0</span>&#125;);</div><div class="line">    edges.push_back(Edge&#123;v, u, <span class="number">0</span>, <span class="number">0</span>&#125;);</div><div class="line">    <span class="keyword">int</span> m = edges.size();</div><div class="line">    G[u].push_back(m<span class="number">-2</span>);<span class="comment">//压入边的序号</span></div><div class="line">    G[v].push_back(m<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">    d[t] = <span class="number">0</span>;</div><div class="line">    vis[t] = <span class="literal">true</span>;</div><div class="line">    q.push(t);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[temp].size(); i++)&#123;</div><div class="line">            Edge &amp;e = edges[G[temp][i]];</div><div class="line">            <span class="keyword">if</span>(!vis[e.to]&amp;&amp;e.cap&gt;e.flow)&#123;</div><div class="line">                vis[e.to] = <span class="literal">true</span>;</div><div class="line">                d[e.to] = d[temp]+<span class="number">1</span>;</div><div class="line">                q.push(e.to);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> vis[s];</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> cur[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Augment</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x = t, a = INF;</div><div class="line">    <span class="keyword">while</span>(x != s) &#123;</div><div class="line">      Edge&amp; e = edges[p[x]];</div><div class="line">      a = min(a, e.cap-e.flow);</div><div class="line">      x = edges[p[x]].from;</div><div class="line">    &#125;</div><div class="line">    x = t;</div><div class="line">    <span class="keyword">while</span>(x != s) &#123;</div><div class="line">      edges[p[x]].flow += a;</div><div class="line">      edges[p[x]^<span class="number">1</span>].flow -= a;</div><div class="line">      x = edges[p[x]].from;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">    BFS(s, t);</div><div class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) num[d[i]]++;</div><div class="line">    <span class="keyword">int</span> x = s;</div><div class="line">    <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="keyword">sizeof</span>(cur));</div><div class="line">    <span class="keyword">while</span>(d[s] &lt; n) &#123;</div><div class="line">      <span class="keyword">if</span>(x == t) &#123;</div><div class="line">        flow += Augment(s, t);</div><div class="line">        x = s;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">int</span> ok = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = cur[x]; i &lt; G[x].size(); i++) &#123;</div><div class="line">        Edge&amp; e = edges[G[x][i]];</div><div class="line">        <span class="keyword">if</span>(e.cap &gt; e.flow &amp;&amp; d[x] == d[e.to] + <span class="number">1</span>) &#123; <span class="comment">// Advance</span></div><div class="line">          ok = <span class="number">1</span>;</div><div class="line">          p[e.to] = G[x][i];</div><div class="line">          cur[x] = i; <span class="comment">// 注意</span></div><div class="line">          x = e.to;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(!ok) &#123; <span class="comment">// Retreat</span></div><div class="line">        <span class="keyword">int</span> m = n<span class="number">-1</span>; <span class="comment">// 初值注意</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[x].size(); i++) &#123;</div><div class="line">          Edge&amp; e = edges[G[x][i]];</div><div class="line">          <span class="keyword">if</span>(e.cap &gt; e.flow) m = min(m, d[e.to]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(--num[d[x]] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        num[d[x] = m+<span class="number">1</span>]++;</div><div class="line">        cur[x] = <span class="number">0</span>; <span class="comment">// 注意</span></div><div class="line">        <span class="keyword">if</span>(x != s) x = edges[p[x]].from;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)G[i].clear();</div><div class="line">    edges.clear();</div><div class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(p));</div><div class="line">    <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="keyword">sizeof</span>(cur));</div><div class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</div><div class="line">    <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span>(in));</div><div class="line">    <span class="built_in">memset</span>(out, <span class="number">0</span>, <span class="keyword">sizeof</span>(out));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> u, v, w;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</div><div class="line">            out[u]++;</div><div class="line">            in[v]++;</div><div class="line">            <span class="keyword">if</span>(w == <span class="number">0</span>)&#123;<span class="comment">//w=0代表是无向边</span></div><div class="line">                AddEdge(u, v, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(out[i]-in[i]&gt;<span class="number">0</span>)&#123;</div><div class="line">                AddEdge(<span class="number">0</span>, i, (out[i]-in[i])&gt;&gt;<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(out[i]-in[i]&lt;<span class="number">0</span>)&#123;</div><div class="line">                AddEdge(i, n+<span class="number">1</span>, (in[i]-out[i])&gt;&gt;<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(out[i]-in[i])%<span class="number">2</span>)&#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!flag)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"impossible"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        n = n+<span class="number">2</span>;</div><div class="line">        Maxflow(<span class="number">0</span>, n<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[<span class="number">0</span>].size(); i++)&#123;</div><div class="line">            <span class="keyword">if</span>(edges[G[<span class="number">0</span>][i]].cap&gt;<span class="number">0</span>&amp;&amp;</div><div class="line">               edges[G[<span class="number">0</span>][i]].cap&gt;edges[G[<span class="number">0</span>][i]].flow)&#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!flag)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"impossible"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"possible"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 欧拉路经 </tag>
            
            <tag> 欧拉回路 </tag>
            
            <tag> 混合图的欧拉路径\回路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>最近点对、最远点对</title>
      <link href="/2018/06/19/%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9%E3%80%81%E6%9C%80%E8%BF%9C%E7%82%B9%E5%AF%B9/"/>
      <url>/2018/06/19/%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9%E3%80%81%E6%9C%80%E8%BF%9C%E7%82%B9%E5%AF%B9/</url>
      <content type="html"><![CDATA[<p>算法收集</p><a id="more"></a><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="最近点对"><a href="#最近点对" class="headerlink" title="最近点对"></a>最近点对</h1><p><a href="https://vjudge.net/problem/UVA-10245" target="_blank" rel="external">最近点对</a><br>使用了分治的算法<br>里面用了一个STL函数<code>inplace_merge</code>归并函数</p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; P;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e9</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">P point[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_y</span><span class="params">(P a, P b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.second&lt;b.second;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">cloest_pair</span><span class="params">(P *point, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> INF;</div><div class="line">    <span class="keyword">int</span> m = n/<span class="number">2</span>;</div><div class="line">    <span class="keyword">double</span> x = point[m].first;</div><div class="line">    <span class="keyword">double</span> d = min(cloest_pair(point, m), cloest_pair(point+m, n-m));</div><div class="line">    <span class="comment">//归并排序</span></div><div class="line">    <span class="comment">//inplace_merge()函数将两个连接在一起的排序序列</span></div><div class="line">    <span class="comment">//[first, middle)和[middle, last)结合成单一序列并保持有序。</span></div><div class="line">    <span class="comment">//inplace_merge()函数是stable操作。</span></div><div class="line">    inplace_merge(point, point+m, point+n, cmp_y);</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;P&gt; b;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(point[i].first-x)&gt;d) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;b.size(); j++)&#123;</div><div class="line">            <span class="keyword">double</span> dx = point[i].first-b[b.size()-j<span class="number">-1</span>].first;</div><div class="line">            <span class="keyword">double</span> dy = point[i].second-b[b.size()-j<span class="number">-1</span>].second;</div><div class="line">            <span class="keyword">if</span>(dy &gt;= d) <span class="keyword">break</span>;</div><div class="line">            d = min(d, <span class="built_in">sqrt</span>(dx*dx+dy*dy));</div><div class="line">        &#125;</div><div class="line">        b.push_back(point[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> d;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    sort(point, point+n);</div><div class="line">    <span class="keyword">double</span> ans = cloest_pair(point, n);</div><div class="line">    <span class="keyword">if</span>(ans&lt;=<span class="number">1e4</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.4f\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"INFINITY\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;point[i].first&gt;&gt;point[i].second;</div><div class="line">        &#125;</div><div class="line">        solve();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="最远点对"><a href="#最远点对" class="headerlink" title="最远点对"></a>最远点对</h1><p><a href="http://poj.org/problem?id=2187" target="_blank" rel="external">poj2187</a><br>用对踵点旋转求解(凸包上旋转)</p><h2 id="ac-code-1"><a href="#ac-code-1" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> x,y;</div><div class="line">    Point(<span class="keyword">int</span> _x = <span class="number">0</span>, <span class="keyword">int</span> _y = <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        x = _x;</div><div class="line">        y = _y;</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span> -(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> Point(x - b.x, y - b.y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> x*b.y - y*b.x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> x*b.x + y*b.y;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dist2</span><span class="params">(Point a,Point b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> (a-b)*(a-b);</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50010</span>;</div><div class="line">Point <span class="built_in">list</span>[MAXN];</div><div class="line"><span class="keyword">int</span> Stack[MAXN],top;</div><div class="line"><span class="keyword">bool</span> _cmp(Point p1,Point p2)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> tmp = (p1-<span class="built_in">list</span>[<span class="number">0</span>])^(p2-<span class="built_in">list</span>[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">if</span>(tmp &gt; <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tmp == <span class="number">0</span> &amp;&amp; dist2(p1,<span class="built_in">list</span>[<span class="number">0</span>]) &lt;= dist2(p2,<span class="built_in">list</span>[<span class="number">0</span>]))</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graham</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Point p0;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">    p0 = <span class="built_in">list</span>[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</div><div class="line">        <span class="keyword">if</span>(p0.y &gt; <span class="built_in">list</span>[i].y || (p0.y == <span class="built_in">list</span>[i].y &amp;&amp; p0.x &gt; <span class="built_in">list</span>[i].x))</div><div class="line">        &#123;</div><div class="line">            p0 = <span class="built_in">list</span>[i];</div><div class="line">            k = i;</div><div class="line">        &#125;</div><div class="line">    swap(<span class="built_in">list</span>[<span class="number">0</span>],<span class="built_in">list</span>[k]);</div><div class="line">    sort(<span class="built_in">list</span>+<span class="number">1</span>,<span class="built_in">list</span>+n,_cmp);</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        top = <span class="number">1</span>;</div><div class="line">        Stack[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        top = <span class="number">2</span>;</div><div class="line">        Stack[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        Stack[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    Stack[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    Stack[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    top = <span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; n;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(top &gt; <span class="number">1</span> &amp;&amp; ((<span class="built_in">list</span>[Stack[top<span class="number">-1</span>]]-<span class="built_in">list</span>[Stack[top<span class="number">-2</span>]])^(<span class="built_in">list</span>[i]-<span class="built_in">list</span>[Stack[top<span class="number">-2</span>]])) &lt;= <span class="number">0</span> )</div><div class="line">            top--;</div><div class="line">        Stack[top++] = i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//旋转卡壳，求两点间距离平方的最大值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">rotating_calipers</span><span class="params">(Point p[],<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    Point v;</div><div class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</div><div class="line">    &#123;</div><div class="line">        v = p[i]-p[(i+<span class="number">1</span>)%n];</div><div class="line">        <span class="keyword">while</span>((v^(p[(cur+<span class="number">1</span>)%n]-p[cur])) &lt; <span class="number">0</span>)</div><div class="line">            cur = (cur+<span class="number">1</span>)%n;</div><div class="line">        <span class="comment">//printf("%d %d\n",i,cur);</span></div><div class="line">        ans = max(ans,max(dist2(p[i],p[cur]),dist2(p[(i+<span class="number">1</span>)%n],p[(cur+<span class="number">1</span>)%n])));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line">Point p[MAXN];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) == <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</div><div class="line">            <span class="built_in">list</span>[i].input();</div><div class="line">        Graham(n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; top;i++)</div><div class="line">            p[i] = <span class="built_in">list</span>[Stack[i]];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rotating_calipers(p,top));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最近点对 </tag>
            
            <tag> 最远点对 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>曼哈顿最小生成树</title>
      <link href="/2018/06/19/%E6%9B%BC%E5%93%88%E9%A1%BF%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2018/06/19/%E6%9B%BC%E5%93%88%E9%A1%BF%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>曼哈顿最小生成树</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="poj-3241"><a href="#poj-3241" class="headerlink" title="poj 3241"></a>poj 3241</h1><p><a href="https://blog.csdn.net/orpinex/article/details/7377959" target="_blank" rel="external">学习博客</a><br>注意\(k&lt;n\), 因此可以可以通过减少计算的边来降低复杂度。</p><p>查找\(y_j-x_j&gt;y_i-x_i\)，且\(y_j+x_j\)最小的j点<br>具体为什么可以这样，可以看上面博客的证明</p><h3 id="关于为什么只要四种坐标变化"><a href="#关于为什么只要四种坐标变化" class="headerlink" title="关于为什么只要四种坐标变化"></a>关于为什么只要四种坐标变化</h3><p>只用看x的正半轴就可以了，因为是对称的。<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fsggbxyf4wj30ie0gltms.jpg" alt=""></p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">&#125;p[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> min_val, pos;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        min_val = INF;</div><div class="line">        pos = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;bit[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> u, v, d;</div><div class="line">&#125;edge[maxn&lt;&lt;<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_edge</span><span class="params">(Edge a,Edge b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.d&lt;b.d;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_fa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = x;</div><div class="line">    <span class="keyword">while</span>(x!=fa[x]) x = fa[x];</div><div class="line">    <span class="keyword">while</span>(a!=fa[a])&#123;</div><div class="line">        <span class="keyword">int</span> z = a;</div><div class="line">        a = fa[a];</div><div class="line">        fa[z] = x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;</div><div class="line">    edge[tot].v = v;</div><div class="line">    edge[tot].u = u;</div><div class="line">    edge[tot++].d = w;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">low_bit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x&amp;(-x);</div><div class="line">&#125;</div><div class="line"><span class="comment">//i表示从[1, i]区间开始的</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> val, <span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(val&lt;bit[i].min_val)&#123;</div><div class="line">            bit[i].min_val = val;</div><div class="line">            bit[i].pos = pos;</div><div class="line">        &#125;</div><div class="line">        i -= low_bit(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> min_val = INF, pos = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(i&lt;=m)&#123;</div><div class="line">        <span class="keyword">if</span>(bit[i].min_val&lt;min_val)&#123;</div><div class="line">            min_val = bit[i].min_val;</div><div class="line">            pos = bit[i].pos;</div><div class="line">        &#125;</div><div class="line">        i += low_bit(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pos;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Point a, Point b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(a.x!=b.x) <span class="keyword">return</span> a.x&lt;b.x;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.y&lt;b.y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpedge</span><span class="params">(Edge a, Edge b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.d&lt;b.d;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(Point a, Point b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a.x-b.x)+<span class="built_in">abs</span>(a.y-b.y);</div><div class="line">&#125;</div><div class="line"><span class="comment">//数组开在里面会爆栈</span></div><div class="line"><span class="keyword">int</span> a[maxn], b[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manha_minimum_spanning_tree</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> dir=<span class="number">0</span>; dir&lt;<span class="number">4</span>; dir++)&#123;</div><div class="line">        <span class="keyword">if</span>(dir == <span class="number">1</span>|| dir == <span class="number">3</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">                swap(p[i].x, p[i].y);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dir == <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">                p[i].x = -p[i].x;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(p, p+n, cmp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            a[i] = b[i] = p[i].y-p[i].x;</div><div class="line">        &#125;</div><div class="line">        sort(b, b+n);</div><div class="line">        <span class="keyword">int</span> m = unique(b, b+n)-b;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</div><div class="line">            bit[i].init();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">            <span class="keyword">int</span> pos = lower_bound(b, b+m, a[i]) - b+<span class="number">1</span>;<span class="comment">//坐标从1开始</span></div><div class="line">            <span class="keyword">int</span> ans = ask(pos, m);</div><div class="line">            <span class="keyword">if</span>(ans != <span class="number">-1</span>)&#123;</div><div class="line">                add_edge(p[i].id, p[ans].id, dis(p[i], p[ans]));</div><div class="line">            &#125;</div><div class="line">            update(pos, p[i].x+p[i].y, i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    Manha_minimum_spanning_tree(n, k);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)fa[i] = i;</div><div class="line">    sort(edge, edge+tot, cmpedge);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tot; i++)&#123;</div><div class="line">        <span class="keyword">int</span> u = edge[i].u;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">int</span> d = edge[i].d;</div><div class="line">        <span class="keyword">int</span> fau = find_fa(u);</div><div class="line">        <span class="keyword">int</span> fav = find_fa(v);</div><div class="line">        <span class="keyword">if</span>(fau!=fav)&#123;</div><div class="line">            fa[fau] = fav;</div><div class="line">            k--;</div><div class="line">            <span class="keyword">if</span>(k ==<span class="number">0</span> ) <span class="keyword">return</span> edge[i].d;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k)&amp;&amp;n)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p[i].x, &amp;p[i].y);</div><div class="line">            p[i].id = i;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve(n-k));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 曼哈顿最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我是江小白</title>
      <link href="/2018/06/19/%E6%88%91%E6%98%AF%E6%B1%9F%E5%B0%8F%E7%99%BD/"/>
      <url>/2018/06/19/%E6%88%91%E6%98%AF%E6%B1%9F%E5%B0%8F%E7%99%BD/</url>
      <content type="html"><![CDATA[<p>这是白酒的广告，我看完好想霍白酒啊~<br>里面的链接全挂了，官方微信里有壁纸可以下载<br>第一首是版权音乐，所以pc端无法自动播放音乐<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br>画面和音乐都很优秀的国漫啊，很久没有看如此优秀的国漫了。</p><p><img src="http://i4.bvimg.com/622054/9c97e7ae69e826ed.jpg" alt=""><br><img src="http://i4.bvimg.com/622054/25aaaf9982fe0eb6.jpg" alt=""><br><img src="http://i4.bvimg.com/622054/0f87fcce00c47204.jpg" alt=""><br><img src="http://i4.bvimg.com/622054/5c5dbc5c5afca6b5.jpg" alt=""><br><img src="http://i4.bvimg.com/622054/8ebc87fe168554a9.jpg" alt=""><br><img src="http://i4.bvimg.com/622054/3415b3fc5b86aa76.jpg" alt=""><br><img src="http://i4.bvimg.com/622054/0026364229915342.jpg" alt=""><br><img src="http://i4.bvimg.com/622054/bcff36b93bed999a.jpg" alt=""><br><img src="http://i4.bvimg.com/622054/838a5ab730878205.jpg" alt=""><br><img src="http://i4.bvimg.com/622054/c88aa094cf74f212.jpg" alt=""></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="530" height="210" src="//music.163.com/outchain/player?type=0&id=2051743390&auto=1&height=430"></iframe><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我是江小白 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客版面更新记录</title>
      <link href="/2018/06/17/%E5%8D%9A%E5%AE%A2%E7%89%88%E9%9D%A2%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/06/17/%E5%8D%9A%E5%AE%A2%E7%89%88%E9%9D%A2%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>记录一些版面的更新，方便日后的搭建<br>由于前面没有记录的想法，随就不再管前面的问题了，嘤<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h3 id="2018年6月17日00-13-19"><a href="#2018年6月17日00-13-19" class="headerlink" title="2018年6月17日00:13:19"></a>2018年6月17日00:13:19</h3><p>将左侧标签增加滑条，方便放置更多的标签<br>\themes\yelee\layout_partial\left_col.ejs中的代码改为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;nav <span class="class"><span class="keyword">class</span></span>=<span class="string">"header-menu"</span> style=<span class="string">"overflow:auto;"</span> &gt;</div></pre></td></tr></table></figure></p><h3 id="怎么增加密文？"><a href="#怎么增加密文？" class="headerlink" title="怎么增加密文？"></a>怎么增加密文？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    if(&quot;123&quot;==prompt(&quot;Please input password&quot;))</div><div class="line">    &#123;</div><div class="line">        alert(&quot;Right&quot;);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        alert(&quot;Wrong&quot;);</div><div class="line">        location=&quot;http://babydragon.top&quot;;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="将博客的版面简化"><a href="#将博客的版面简化" class="headerlink" title="将博客的版面简化"></a>将博客的版面简化</h3><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      
    </entry>
    
    <entry>
      <title>ISAP求网络流</title>
      <link href="/2018/06/16/ISAP%E6%B1%82%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
      <url>/2018/06/16/ISAP%E6%B1%82%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>听说比Dinic效率更高，模板题还测不出来，因为跑的都是0ms<br>后来加测了一组数据：<br>2000 41755<br>isap跑的飞快，dinic跑不出来。。。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="poj"><a href="#poj" class="headerlink" title="poj"></a>poj</h1><p><a href="http://poj.org/problem?id=1273" target="_blank" rel="external">Drainage Ditches</a></p><h2 id="ISAP代码"><a href="#ISAP代码" class="headerlink" title="ISAP代码"></a>ISAP代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> from, to, cap, flow;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; edges;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> cap)</span></span>&#123;</div><div class="line">    edges.push_back(Edge&#123;u, v, cap, <span class="number">0</span>&#125;);</div><div class="line">    edges.push_back(Edge&#123;v, u, <span class="number">0</span>, <span class="number">0</span>&#125;);</div><div class="line">    <span class="keyword">int</span> m = edges.size();</div><div class="line">    G[u].push_back(m<span class="number">-2</span>);</div><div class="line">    G[v].push_back(m<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">    d[t] = <span class="number">0</span>;</div><div class="line">    vis[t] = <span class="literal">true</span>;</div><div class="line">    q.push(t);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[temp].size(); i++)&#123;</div><div class="line">            Edge &amp;e = edges[G[temp][i]];</div><div class="line">            <span class="keyword">if</span>(!vis[e.to]&amp;&amp;e.cap&gt;e.flow)&#123;</div><div class="line">                vis[e.to] = <span class="literal">true</span>;</div><div class="line">                d[e.to] = d[temp]+<span class="number">1</span>;</div><div class="line">                q.push(e.to);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> vis[s];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> cur[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Augment</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x = t, a = INF;</div><div class="line">    <span class="keyword">while</span>(x != s) &#123;</div><div class="line">      Edge&amp; e = edges[p[x]];</div><div class="line">      a = min(a, e.cap-e.flow);</div><div class="line">      x = edges[p[x]].from;</div><div class="line">    &#125;</div><div class="line">    x = t;</div><div class="line">    <span class="keyword">while</span>(x != s) &#123;</div><div class="line">      edges[p[x]].flow += a;</div><div class="line">      edges[p[x]^<span class="number">1</span>].flow -= a;</div><div class="line">      x = edges[p[x]].from;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">    BFS(s, t);</div><div class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) num[d[i]]++;</div><div class="line">    <span class="keyword">int</span> x = s;</div><div class="line">    <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="keyword">sizeof</span>(cur));</div><div class="line">    <span class="keyword">while</span>(d[s] &lt; n) &#123;</div><div class="line">      <span class="keyword">if</span>(x == t) &#123;</div><div class="line">        flow += Augment(s, t);</div><div class="line">        x = s;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">int</span> ok = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = cur[x]; i &lt; G[x].size(); i++) &#123;</div><div class="line">        Edge&amp; e = edges[G[x][i]];</div><div class="line">        <span class="keyword">if</span>(e.cap &gt; e.flow &amp;&amp; d[x] == d[e.to] + <span class="number">1</span>) &#123; <span class="comment">// Advance</span></div><div class="line">          ok = <span class="number">1</span>;</div><div class="line">          p[e.to] = G[x][i];</div><div class="line">          cur[x] = i; <span class="comment">// 注意</span></div><div class="line">          x = e.to;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(!ok) &#123; <span class="comment">// Retreat</span></div><div class="line">        <span class="keyword">int</span> m = n<span class="number">-1</span>; <span class="comment">// 初值注意</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[x].size(); i++) &#123;</div><div class="line">          Edge&amp; e = edges[G[x][i]];</div><div class="line">          <span class="keyword">if</span>(e.cap &gt; e.flow) m = min(m, d[e.to]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(--num[d[x]] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        num[d[x] = m+<span class="number">1</span>]++;</div><div class="line">        cur[x] = <span class="number">0</span>; <span class="comment">// 注意</span></div><div class="line">        <span class="keyword">if</span>(x != s) x = edges[p[x]].from;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)G[i].clear();</div><div class="line">    edges.clear();</div><div class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(p));</div><div class="line">    <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="keyword">sizeof</span>(cur));</div><div class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n)&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> u, v, w;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</div><div class="line">            AddEdge(u, v, w);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = Maxflow(<span class="number">1</span>, n);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="造数据的程序"><a href="#造数据的程序" class="headerlink" title="造数据的程序"></a>造数据的程序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> G[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    freopen(<span class="string">"out.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</div><div class="line">    <span class="keyword">int</span> n = <span class="number">2000</span>;</div><div class="line">    <span class="built_in">memset</span>(G, <span class="number">-1</span>, <span class="keyword">sizeof</span>(G));</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, t = n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> w = rand();</div><div class="line">        G[i][i+<span class="number">1</span>] = w;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n*n/<span class="number">100</span>; i++)&#123;</div><div class="line">        <span class="keyword">int</span> u = rand()%n+<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> v = rand()%n+<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> w = rand()%n+<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(u == v) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(G[u][v] != <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            G[u][v] = w;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(G[i][j] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="comment">//printf("%d %d %d\n", i, j, G[i][j]);</span></div><div class="line">            tot++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tot);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(G[i][j] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, i, j, G[i][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hash-求区间不同子串的个数</title>
      <link href="/2018/06/15/hash-%E6%B1%82%E5%8C%BA%E9%97%B4%E4%B8%8D%E5%90%8C%E5%AD%90%E4%B8%B2%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>/2018/06/15/hash-%E6%B1%82%E5%8C%BA%E9%97%B4%E4%B8%8D%E5%90%8C%E5%AD%90%E4%B8%B2%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>hash积累</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="hdu4622"><a href="#hdu4622" class="headerlink" title="hdu4622"></a>hdu4622</h1><p>求一个区间有多少个不同子串<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4622" target="_blank" rel="external">hdu4622</a></p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> HASH = <span class="number">10007</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2010</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HASHMAP</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> head[HASH], next[maxn], size;</div><div class="line">    ull state[maxn];</div><div class="line">    <span class="keyword">int</span> f[maxn];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(ull val, <span class="keyword">int</span> _id)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> h = val%HASH;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[h]; ~i; i=next[i])&#123;</div><div class="line">            <span class="keyword">if</span>(val == state[i])&#123;</div><div class="line">                <span class="keyword">int</span> temp = f[i];</div><div class="line">                f[i] = _id;</div><div class="line">                <span class="keyword">return</span> temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        f[size] = _id;</div><div class="line">        state[size] = val;</div><div class="line">        next[size] = head[h];</div><div class="line">        head[h] = size++;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;H;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> SEED = <span class="number">1331</span>;</div><div class="line">ull p[maxn];</div><div class="line">ull s[maxn];</div><div class="line"><span class="keyword">char</span> str[maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn][maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;maxn; i++)&#123;</div><div class="line">        p[i] = p[i<span class="number">-1</span>]*SEED;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;str;</div><div class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</div><div class="line">        s[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            s[i] = s[i<span class="number">-1</span>]*SEED+str[i<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(ans));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>; l&lt;=n; l++)&#123;</div><div class="line">            H.init();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+l<span class="number">-1</span>&lt;=n; i++)&#123;</div><div class="line">                <span class="keyword">int</span> temp = H.insert(s[i+l<span class="number">-1</span>]-s[i<span class="number">-1</span>]*p[l], i);</div><div class="line">                <span class="comment">//cout&lt;&lt;"gg"&lt;&lt;endl;</span></div><div class="line">                ans[i][i+l<span class="number">-1</span>]++;<span class="comment">//区间的hash值</span></div><div class="line">                ans[temp][i+l<span class="number">-1</span>]--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;=n; j++)&#123;</div><div class="line">                ans[i][j] += ans[i+<span class="number">1</span>][j]+ans[i][j<span class="number">-1</span>]-ans[i+<span class="number">1</span>][j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> q, u, v;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;q;</div><div class="line">        <span class="keyword">while</span>(q--)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;ans[u][v]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="二维hash"><a href="#二维hash" class="headerlink" title="二维hash"></a>二维hash</h1><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机网络通信小知识积累</title>
      <link href="/2018/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
      <url>/2018/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<p><del>不定期更新</del><br><a id="more"></a></p><div align="center"><br><br><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fsy9vmvyffj31d91isdqk.jpg" alt=""><br></div><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>刚预习了几天计网即将猝死复习狗也想来回答这个问题。<br>我们使用的是这本教材：<br><img src="" alt="图片"><br>上课时内心是崩溃的，老师讲课的速度基本上是一节课一章(大概20~30页吧)emmmmm<br>萌新三连<br>上课完全跟不上老师的节奏啊喂<br>其实计算机网络通信里面有很多琐碎的知识，而弄懂其中的设计原理是一件非常有意思的事情</p><p>下面的是我对网络通信的一些理解，希望大家多批评指正<br>我们想象一下遇到下面这个问题：我现在想要用电脑给皮皮磊发送一些通知，我该怎么设计这个通信系统呢？<br>这不简单吗？直接我们两之间连一条线缆就行了了(暂且不考虑数据的表示)这样我只需要传输层就行了<br>问题升级：我现在要和皮皮磊1，皮皮磊2，皮皮磊3通信，我该怎么办能？我们将我和皮皮磊1~3进行编号0~3(MAC地址)，然后用一个中心控制器件(交换机)，来控制不同人之间的通信。这样就需要增加数据链路层<br>问题升级：现在我想给在外省的小帅发信息。如果我们还是用前面的方法进行编号，这个在较大的区域方位定位是比较困难的。而且小帅由于工作繁忙，经常需要到全国各地出来，这样就更难以定位了。有没有相对固定的的定址方式呢？在他家设置一个相对固定的逻辑地址(ip地址，因为ip属于通信运营商的资源，这个地址相对比较固定，可以较容易确定位置)，这样他出差也可以用别人家的逻辑地址，逻辑地址相对变化较小。这样就需要物理层，数据链路层和网络层<br>问题升级：现在我的通信公司只是起步，没钱买好的缆线，传输信息的正确性不能保证，因此我要增加一种机制来确认我收到的是正确的信息。于是传输层就产生了。<br>问题升级：我的电脑不可能只运行发送消息的功能啊，我还要打osu!和打cf呢，我要在osu里和小鸟roll歌交流啊。怎么辨识不同程序的信息来源呢？给每个应用程序添加一个序号呗(端口号)。这样就能识别不同应用进程了。</p><p>通过上面的问题的不断的升级，我们逐渐的自底向上构建除了网络传输的五层模型。每一层都是那么独特而巧妙，不可或缺，亦不可增添冗余。<br>而计算机通信网络，就会在上面的问题过程中，不断的细化问题，并且不断的解决一个个通信的问题。</p><p>下面我们再来自顶向下的分析网络模型：<br>我们访问<a href="babydragon.top">babydragon.top</a>背后发生了什么？<br>我简单描述一下：<br>首先因为是url，我们必须通过dns服务器解析出目标的ip.<br>然后通过arp协议解析出ip连接的主机的MAC地址<br>然后将我们的请求统一编码成报文(传输层)传到网络层增加ip头部变成数据报，由于数据报可能很长，我们将其切割，变成分组。<br>然后将分组送往数据链路层，封装成帧，加上帧界定，送往物理层<br>物理层就负责传输就行了。<br>接收方的过程是反过来的就行了</p><p>生活中的很多的小例子：<br>比如我们打电话为什么是按分钟收费的呢（我记得07年以前上网也是按时计费的，但是原理应该不一样吧）？而手机是按照流量收费的呢？<br>电话每一次都会建立专用的链路，一旦建立连接，数据将按顺序进行接收。<br>而手机通信则不会占用一条专用的链路，不具有独占性</p><p>其实，网络通信的分析相当的有意思啊，这个过程中有很多的小细节，有时间再更吧~</p><p>本篇文章将以问答的形式展示</p><ol><li><p>为什么TCP是三次握手而不是四次握手？<br>A: 如果是两次的话，若第二次服务器的确认信息没有送达客户端，那么服务器将会一直处于被占用的状态</p></li><li><p>访问一次www.baidu.com需要经过哪些过程？<br><a href="https://www.zhihu.com/question/269576515" target="_blank" rel="external">知乎优秀回答</a><br>一个电脑想要访问一个网站，却只有它的域名，那么先通过DNS服务器找到ip,然后通过ip找到MAC地址，然后进行TCP通信</p></li><li><p>为什么传输层和数据链路层都有流量控制和差错控制，而不是在传输层设置一个控制就行了，数据链路层是冗余的？<br>我个人的理解。<br>数据链路层的检测发生在数据的交换的过程中，如果中间的路由器检测出来了错误(用校验和)，那么直接给抛弃，不继续传递<br>而若数据链路层以上测数据发生了错误，那么这个数据包会一直传输到目的主机，然后目的主机才知道错了。<br>感觉数据链路层在中间的过程发生了错误的话，那么就抛弃了，效率更高。<br>而传输层到达目的主机才能检测到，这要效率比较低，但是为了网络的分层结构，逻辑任务的分离，这样做又是必要的！</p></li></ol><p><font color="#FF3030">前面的全错了！！！</font>老师解释错了<br>实际上原来的通信线路用的是HDLC，比较的注重差错控制。<br>随着线路的稳定性的提高，使用了PPP协议，只是进行了差错的校验，而不需要确认的机制。<br>下面是我摘抄的一段话：</p><blockquote><p>即使链路层能够实现无差错的传输，可能端到端的传输也会出现错误，这样得不偿失，还不如把数据链路层做得简单些，可靠的传输由上层的协议以来完成</p></blockquote><ol><li>计算机的网络历史<br>当时的以太网并没有现在的交换机设备，而是采用共享介质，简单来说就是用一根线把所有的网卡全都连起来（当然还需要共地来形成回路），这个结构类似于总线，谁都可以在上面传输信号，但是如果有两个人同时传输的话，两个信号就会混合起来，产生错误。</li></ol>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>周日gym补题</title>
      <link href="/2018/06/10/%E5%91%A8%E6%97%A5gym%E8%A1%A5%E9%A2%98/"/>
      <url>/2018/06/10/%E5%91%A8%E6%97%A5gym%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>周日补题<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><p>分成若干个组，每个组差值最大为该组的花费，为总的花费最小</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>二分答案+dp判断</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span>+<span class="number">10</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> lli;</div><div class="line"></div><div class="line">lli aa[MAXN];</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(lli x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));  <span class="comment">//dp[i]表示[1,i]能否被完整分成满足条件的几段</span></div><div class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> s=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(aa[i]-aa[s]&gt;x) s++;</div><div class="line">        <span class="keyword">while</span>(i-s+<span class="number">1</span>&gt;=m)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(dp[s<span class="number">-1</span>])</div><div class="line">            &#123;</div><div class="line">                dp[i]=<span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            s++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[n];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;aa[i]);</div><div class="line">    &#125;</div><div class="line">    aa[<span class="number">0</span>]=INF;</div><div class="line">    sort(aa+<span class="number">1</span>,aa+<span class="number">1</span>+n);</div><div class="line">    lli l=<span class="number">0</span>;</div><div class="line">    lli r=aa[n]-aa[<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span>(m==<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(l&lt;r)</div><div class="line">    &#123;</div><div class="line">        lli mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(check(mid)) r=mid;</div><div class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,r);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="K"><a href="#K" class="headerlink" title="K"></a>K</h1><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><ol><li>对于第一段，它的区间应该是[  x[1] = s[1] , y[1] = s[1]+g[1]  ] </li><li>对于第i段，它的区间应该是[ x[i] = max( x[i-1]-1, s[i] ) , y[i] = min( y[i-1]+1, s[i] + g[i] )] </li><li>若存在某点使得x大于y，则说明区间不存在，直接输出-1 </li><li>从尾部重复1，2的步骤，那么最后得到的区间一定是可行区域，y[i]对应的值就是道路能修的最宽值。</li></ol><p>扫描两遍的思想很重要！！！</p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line">ll r[maxn], g[maxn];</div><div class="line">ll mini[maxn], maxi[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;r[i]&gt;&gt;g[i];</div><div class="line">    &#125;</div><div class="line">    mini[<span class="number">0</span>] = r[<span class="number">0</span>], maxi[<span class="number">0</span>] = r[<span class="number">0</span>]+g[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</div><div class="line">        mini[i] = max(mini[i<span class="number">-1</span>]<span class="number">-1</span>, r[i]);<span class="comment">//这里一开始写错了。。。</span></div><div class="line">        maxi[i] = min(maxi[i<span class="number">-1</span>]+<span class="number">1</span>, r[i]+g[i]);</div><div class="line">        <span class="keyword">if</span>(mini[i]&gt;maxi[i])&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-2</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">        mini[i] = max(mini[i+<span class="number">1</span>]<span class="number">-1</span>, mini[i]);</div><div class="line">        maxi[i] = min(maxi[i+<span class="number">1</span>]+<span class="number">1</span>, maxi[i]);</div><div class="line">        <span class="keyword">if</span>(mini[i]&gt;maxi[i])&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ll ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        ans += (maxi[i]-r[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;maxi[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>周五cf补题</title>
      <link href="/2018/06/09/%E5%91%A8%E4%BA%94cf%E8%A1%A5%E9%A2%98/"/>
      <url>/2018/06/09/%E5%91%A8%E4%BA%94cf%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>周五补题</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>求诱导子图，使得诱导子图的点的权重的和比上边权的和最大。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>要么选两个点，要么选一个点。后来感觉这种最大的东西，往往可能会是一种特殊的情形。</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>记住有模运算的时候，若产生负数，一定要加一个mod!!!!!以后不论如何都要加mod!!!!!</p><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><p>删掉不超过两条边，使得s到t点的不连通</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>先找到一条路，若不连通，直接输出0<br>若连通，枚举这条路径上面的每一条边，删掉改边。若删掉边后，图不连通，表明要删掉的边为1，否则取找割。</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">6e4</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v,next,c;</div><div class="line">&#125;edge[maxm];</div><div class="line"><span class="keyword">int</span> head[maxn];</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"><span class="keyword">int</span> s,t;</div><div class="line"><span class="keyword">int</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> dfn[maxn];</div><div class="line"><span class="keyword">int</span> low[maxn];</div><div class="line"><span class="keyword">int</span> bridge[maxm];</div><div class="line"><span class="keyword">int</span> Index;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    tot=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    edge[tot].v = v;</div><div class="line">    edge[tot].next = head[u];</div><div class="line">    edge[tot].c = c;</div><div class="line">    head[u]=tot++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> del, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; path)</span></span>&#123;</div><div class="line">    vis[u]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(u==t) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=edge[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v=edge[i].v;</div><div class="line">        <span class="keyword">if</span>(v==fa||(i&gt;&gt;<span class="number">1</span>)==del) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(!vis[v]&amp;&amp;dfs(v,u,del,path))&#123;</div><div class="line">            path.push_back(i&gt;&gt;<span class="number">1</span>);</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> del)</span></span>&#123;</div><div class="line">    dfn[u]=low[u]=++Index;</div><div class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=edge[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v=edge[i].v;</div><div class="line">        <span class="keyword">if</span>((i&gt;&gt;<span class="number">1</span>)==del) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(v==fa&amp;&amp;!flag)&#123;</div><div class="line">            flag=<span class="number">1</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">            tarjan(v,u,del);</div><div class="line">            low[u]=min(low[v],low[u]);</div><div class="line">            <span class="keyword">if</span>(low[v]&gt;dfn[u]) bridge[i&gt;&gt;<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> low[u]=min(dfn[v],low[u]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;t);</div><div class="line">        init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">            <span class="keyword">int</span> a,b,c;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</div><div class="line">            add_edge(a,b,c);</div><div class="line">            add_edge(b,a,c);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</div><div class="line">        path.clear();</div><div class="line">        <span class="keyword">if</span>(!dfs(s,<span class="number">-1</span>,<span class="number">-1</span>,path))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0\n0\n"</span>);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> ans=<span class="number">2e9</span>+<span class="number">1</span>;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line">            ret.clear();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;path.size();i++)&#123;</div><div class="line">                <span class="built_in">memset</span>(dfn,<span class="number">0</span>, <span class="keyword">sizeof</span>(dfn));</div><div class="line">                <span class="built_in">memset</span>(bridge,<span class="number">0</span>, <span class="keyword">sizeof</span>(bridge));</div><div class="line">                <span class="built_in">memset</span>(vis,<span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">                Index=<span class="number">0</span>;</div><div class="line">                <span class="comment">//cout&lt;&lt;path[i]&lt;&lt;endl;</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(!dfn[j]) tarjan(j,<span class="number">-1</span>,path[i]);</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</div><div class="line">                <span class="comment">//边的编号是从0开始的</span></div><div class="line">                <span class="comment">//删一条边后直接不连通</span></div><div class="line">                <span class="keyword">if</span>(!dfs(s,<span class="number">-1</span>,path[i],tmp))&#123;</div><div class="line">                    <span class="keyword">if</span>(ans&gt;edge[path[i]*<span class="number">2</span>].c)&#123;</div><div class="line">                        ans=edge[path[i]*<span class="number">2</span>].c;</div><div class="line">                        ret.clear();</div><div class="line">                        ret.push_back(path[i]+<span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    <span class="comment">//两条边后不连通</span></div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;tmp.size();j++)&#123;</div><div class="line">                        <span class="keyword">if</span>(bridge[tmp[j]])&#123;</div><div class="line">                            <span class="keyword">if</span>(ans&gt;edge[path[i]*<span class="number">2</span>].c+edge[tmp[j]*<span class="number">2</span>].c)&#123;</div><div class="line">                                ans=edge[path[i]*<span class="number">2</span>].c+edge[tmp[j]*<span class="number">2</span>].c;</div><div class="line">                                ret.clear();</div><div class="line">                                ret.push_back(path[i]+<span class="number">1</span>);</div><div class="line">                                ret.push_back(tmp[j]+<span class="number">1</span>);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(ans&gt;<span class="number">2e9</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>, ans, ret.size());</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ret.size();i++)&#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ret[i]);</div><div class="line">                    <span class="keyword">if</span>(i==ret.size()<span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>亦或最短路</title>
      <link href="/2018/06/08/%E4%BA%A6%E6%88%96%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
      <url>/2018/06/08/%E4%BA%A6%E6%88%96%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      <content type="html"><![CDATA[<p>花费为边权的亦或值</p><a id="more"></a><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="洛谷4366"><a href="#洛谷4366" class="headerlink" title="洛谷4366"></a>洛谷4366</h1><p><a href="https://www.luogu.org/problemnew/show/P4366" target="_blank" rel="external">link</a><br>给出m条边，它们之间的权重。<br>然后任意两点之间可以通过，花费为节点编号的亦或值。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>通过值的拆解，建立新的图来求解<br>3^6 = 5 = (4+1)<br>(3^7)+(7^6) = 4+1<br>那么连边的节点为(3^4)和(6^1),//亦或的结合律<br><a href="https://blog.csdn.net/y752742355/article/details/80500562" target="_blank" rel="external">题解报告</a></p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><p>建立新的图然后跑最短路就可以了</p><h1 id="亦或的最短路、最长路"><a href="#亦或的最短路、最长路" class="headerlink" title="亦或的最短路、最长路"></a>亦或的最短路、最长路</h1><p><a href="https://vjudge.net/problem/HYSBZ-2115" target="_blank" rel="external">亦或求最长路</a><br><a href="http://codeforces.com/problemset/problem/845/G" target="_blank" rel="external">亦或求最短路</a></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100005</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[N],tot;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">aa</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> to,pre;ll dis;</div><div class="line">&#125;edge[N*<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll d)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">edge[++tot].to=v;edge[tot].pre=head[u];edge[tot].dis=d;head[u]=tot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dfn[N],cnt;</div><div class="line">ll f[N],tmp[N*<span class="number">2</span>],num;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">dfn[u]=++cnt;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v,i=head[u];i;i=edge[i].pre)</div><div class="line"><span class="keyword">if</span> ((v=edge[i].to)!=fa)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (dfn[v]==<span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">f[v]=f[u]^edge[i].dis;</div><div class="line">dfs(v,u);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> tmp[++num]=f[u]^f[v]^edge[i].dis;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ll b[<span class="number">65</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line"><span class="keyword">int</span> u,v;ll d;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%I64d"</span>,&amp;u,&amp;v,&amp;d);</div><div class="line">addedge(u,v,d);</div><div class="line">addedge(v,u,d);</div><div class="line">&#125;</div><div class="line"></div><div class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</div><div class="line"><span class="comment">//求出线性基</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">62</span>;j&gt;=<span class="number">0</span>;j--) <span class="keyword">if</span> ((tmp[i]&gt;&gt;j)&amp;<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (b[j]) tmp[i]^=b[j];</div><div class="line"><span class="keyword">else</span> &#123;b[j]=tmp[i];<span class="keyword">break</span>;&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">//用基和一条路径进行亦或，从而求最长路</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">62</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line"><span class="keyword">if</span> ((f[n]^b[i])&lt;f[n]) f[n]=f[n]^b[i];</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%I64d"</span>,f[n]);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python实现自动答题加减大师</title>
      <link href="/2018/06/07/python%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%AD%94%E9%A2%98%E5%8A%A0%E5%87%8F%E5%A4%A7%E5%B8%88/"/>
      <url>/2018/06/07/python%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%AD%94%E9%A2%98%E5%8A%A0%E5%87%8F%E5%A4%A7%E5%B8%88/</url>
      <content type="html"><![CDATA[<p>fork的一个项目，不过复原的过程还是遇到了很多的问题的。</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><p><a href="https://github.com/clouduan/WechatGameAutoPlayer" target="_blank" rel="external">项目的链接</a><br><a href="https://github.com/1033020837/WechatGameScript" target="_blank" rel="external">学长使用了机器学习</a></p><h1 id="主要的过程"><a href="#主要的过程" class="headerlink" title="主要的过程"></a>主要的过程</h1><ol><li>将手机投到电脑屏幕上</li><li>截取特定区域的图片</li><li>识别图片中的数字，然后给定true or flase</li><li>在特定的地方进行点击操作</li></ol><h1 id="我遇到的问题"><a href="#我遇到的问题" class="headerlink" title="我遇到的问题"></a>我遇到的问题</h1><ol><li>安装python依赖包的时候遇到了很多的问题，不过大部分都解决了</li><li>由于我用的投屏软件为Apowermirror,不是推荐的vysor,点击操作会滞留，直达我用右击来消除影响。。。骚操作</li><li>然后就是区域的确定，截取的图片的地方是绝对位置，鼠标点击的位置好像是相对位置，可以通过测试测试出来。</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>希望能拿到than than老师的娃娃</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>周日gym组队赛补题</title>
      <link href="/2018/06/03/%E5%91%A8%E6%97%A5gym%E7%BB%84%E9%98%9F%E8%B5%9B%E8%A1%A5%E9%A2%98/"/>
      <url>/2018/06/03/%E5%91%A8%E6%97%A5gym%E7%BB%84%E9%98%9F%E8%B5%9B%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>周日组队赛补题，雪崩。。。</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><p><a href="http://codeforces.com/group/Us3rfLfgWv/contest/101243/standings/groupmates/true" target="_blank" rel="external">题目链接</a></p><h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><p>模拟取糖的问题<br><a href="https://blog.csdn.net/qq_40482495/article/details/78160020" target="_blank" rel="external">题解连接</a></p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><p>题意不清楚啊，我也很绝望啊。。。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>每一个物品有三种状态，只要脸长大于等于3就可以确定关系<br>注意下面的例子：<br>4 3<br>1&lt;2<br>1&lt;3<br>3&lt;4<br>上面4得状态是可以确定的，。。。我他妈觉得题面有毒。<br>这样枚举每一个点，<code>然后找他的左边和右边是否有点</code>，然后更新就可以了。<br>每次更新的长度为3<br>至于等号的时候用并查集维护就行了。</p><h2 id="ac-code-1"><a href="#ac-code-1" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rG[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">char</span> op;</div><div class="line">    <span class="keyword">int</span> pri;</div><div class="line">&#125;node[maxn*maxn/<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_fa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = x;</div><div class="line">    <span class="keyword">while</span>(x!=fa[x])&#123;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(a!=fa[a])&#123;</div><div class="line">        <span class="keyword">int</span> z = a;</div><div class="line">        a = fa[a];</div><div class="line">        fa[z] = x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) fa[i] = i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) G[i].clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) rG[i].clear();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a, Node b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.pri&gt;b.pri;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">uni</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> fau = find_fa(u);</div><div class="line">    <span class="keyword">int</span> fav = find_fa(v);</div><div class="line">    <span class="keyword">if</span>(fau!=fav)&#123;</div><div class="line">        fa[fau] = fav;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">char</span> ans[maxn];</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    freopen(<span class="string">"Input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"Output.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    init();</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;node[i].l&gt;&gt;node[i].op&gt;&gt;node[i].r;</div><div class="line">        <span class="keyword">if</span>(node[i].op == <span class="string">'='</span>)&#123;</div><div class="line">            node[i].pri = <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            node[i].pri = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sort(node, node+m, cmp);</div><div class="line">    <span class="keyword">int</span> u, v;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(node[i].op == <span class="string">'='</span>)&#123;</div><div class="line">            u = node[i].l;</div><div class="line">            v = node[i].r;</div><div class="line">            uni(u, v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) find_fa(i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(node[i].op == <span class="string">'='</span>) <span class="keyword">continue</span>;</div><div class="line">        u = fa[node[i].l];</div><div class="line">        v = fa[node[i].r];</div><div class="line">        <span class="keyword">if</span>(node[i].op == <span class="string">'&lt;'</span>)&#123;</div><div class="line">            G[u].push_back(v);</div><div class="line">            rG[v].push_back(u);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            G[v].push_back(u);</div><div class="line">            rG[u].push_back(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(ans, <span class="string">'?'</span>, <span class="keyword">sizeof</span>(ans));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(fa[i]!=i) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(G[i].size()&gt;<span class="number">0</span>&amp;&amp;rG[i].size()&gt;<span class="number">0</span>)&#123;</div><div class="line">            ans[i] = <span class="string">'R'</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G[i].size(); j++)&#123;</div><div class="line">                <span class="keyword">int</span> v = G[i][j];</div><div class="line">                ans[v] = <span class="string">'W'</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;rG[i].size(); j++)&#123;</div><div class="line">                <span class="keyword">int</span> v = rG[i][j];</div><div class="line">                ans[v] = <span class="string">'B'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(fa[i]!=i)&#123;</div><div class="line">            ans[i] = ans[fa[i]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="J"><a href="#J" class="headerlink" title="J"></a>J</h1><p>裸的二分图匹配，我他妈一直卡F没有开，，，</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e2</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">bool</span> G[maxn][maxn];</div><div class="line"><span class="built_in">string</span> l[maxn];</div><div class="line"><span class="keyword">int</span> l1[maxn], l2[maxn];</div><div class="line"><span class="built_in">string</span> r[maxn];</div><div class="line"><span class="keyword">int</span> r1[maxn], r2[maxn];</div><div class="line"><span class="keyword">bool</span> link[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> AT[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> TA[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">int</span> linker[maxn];</div><div class="line"><span class="keyword">bool</span> used[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(l1, <span class="number">0</span>, <span class="keyword">sizeof</span>(l1));</div><div class="line">    <span class="built_in">memset</span>(l2, <span class="number">0</span>, <span class="keyword">sizeof</span>(l2));</div><div class="line">    <span class="built_in">memset</span>(r1, <span class="number">0</span>, <span class="keyword">sizeof</span>(r1));</div><div class="line">    <span class="built_in">memset</span>(r2, <span class="number">0</span>, <span class="keyword">sizeof</span>(r2));</div><div class="line">    <span class="built_in">memset</span>(link, <span class="number">0</span>, <span class="keyword">sizeof</span>(link));</div><div class="line">    <span class="built_in">memset</span>(AT, <span class="number">0</span>, <span class="keyword">sizeof</span>(AT));</div><div class="line">    <span class="built_in">memset</span>(TA, <span class="number">0</span>, <span class="keyword">sizeof</span>(TA));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>; v&lt;m; v++)&#123;</div><div class="line">        <span class="keyword">if</span>(link[u][v]&amp;&amp;!used[v])&#123;</div><div class="line">            used[v] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span>(linker[v] == <span class="number">-1</span>||dfs(linker[v]))&#123;</div><div class="line">                linker[v] = u;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungry</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(linker, <span class="number">-1</span>, <span class="keyword">sizeof</span>(linker));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</div><div class="line">        <span class="keyword">if</span>(dfs(i)) res++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_ans</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(linker[i]!=<span class="number">-1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> u = linker[i];</div><div class="line">            <span class="keyword">int</span> v = i;</div><div class="line">            <span class="keyword">if</span>(AT[u][v])&#123;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"AT"</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;l[u]&lt;&lt;<span class="string">" "</span>&lt;&lt;r[v]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"TA"</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;r[v]&lt;&lt;<span class="string">" "</span>&lt;&lt;l[u]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    freopen(<span class="string">"Input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"Output.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    init();</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;l[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)&#123;</div><div class="line">            l1[i] += l[i][j]-<span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">3</span>; j&lt;<span class="number">6</span>; j++)&#123;</div><div class="line">            l2[i] += l[i][j]-<span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;r[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)&#123;</div><div class="line">            r1[i] += r[i][j]-<span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">3</span>; j&lt;<span class="number">6</span>; j++)&#123;</div><div class="line">            r2[i] +=r[i][j]-<span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(l1[i] == r2[j])&#123;</div><div class="line">                AT[i][j] = <span class="literal">true</span>;</div><div class="line">                link[i][j] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(l2[i] == r1[j])&#123;</div><div class="line">                TA[i][j] = <span class="literal">true</span>;</div><div class="line">                link[i][j] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> tot = hungry();</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;tot&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    print_ans();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>周五训练补题</title>
      <link href="/2018/06/01/%E5%91%A8%E4%BA%94%E8%AE%AD%E7%BB%83%E8%A1%A5%E9%A2%98/"/>
      <url>/2018/06/01/%E5%91%A8%E4%BA%94%E8%AE%AD%E7%BB%83%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      
    </entry>
    
    <entry>
      <title>空间自动点赞</title>
      <link href="/2018/06/01/%E7%A9%BA%E9%97%B4%E8%87%AA%E5%8A%A8%E7%82%B9%E8%B5%9E/"/>
      <url>/2018/06/01/%E7%A9%BA%E9%97%B4%E8%87%AA%E5%8A%A8%E7%82%B9%E8%B5%9E/</url>
      <content type="html"><![CDATA[<p>之前一直想要完成的一个小程序，在某种机缘巧合下基本抄了别人的代码，加了一点自己的东西，还是很满意的。</p><a id="more"></a><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br>selenium模拟登陆点赞和刷新，代码比较的简单。<br>但是测试的时候真的什么情况都有<br>注意chromedriver 和 Chrome浏览器版本的对应</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Praise</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,QQ,password,friendQQ)</span>:</span></div><div class="line">        self.QQ=QQ</div><div class="line">        self.password=password</div><div class="line">        self.friendQQ=friendQQ</div><div class="line">        self.n = <span class="number">0</span></div><div class="line">        self.logs=<span class="string">""</span></div><div class="line">        self.praised_list = []</div><div class="line">        <span class="keyword">if</span> self.friendQQ:</div><div class="line">            self.url=<span class="string">"https://user.qzone.qq.com/"</span>+self.friendQQ+<span class="string">"/main"</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.url=<span class="string">"https://user.qzone.qq.com/"</span>+self.QQ</div><div class="line">            <span class="comment">#print(self.url)</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">'Current URL:'</span>, self.browser.current_url)</div><div class="line">        <span class="comment"># see more</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            btn_more = self.browser.find_element_by_css_selector(<span class="string">".b-inline.data_btn_more"</span>)</div><div class="line">            <span class="keyword">if</span> btn_more:</div><div class="line">                btn_more.click()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">if</span> self.friendQQ:</div><div class="line">            self.praise_someone()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.praise_all()</div><div class="line">        self.browser.quit()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_qzone</span><span class="params">(self)</span>:</span></div><div class="line">        self.browser = webdriver.Chrome()</div><div class="line">        <span class="comment">#self.browser.maximize_window()</span></div><div class="line">        self.browser.get(self.url)</div><div class="line">        time.sleep(<span class="number">5</span>)</div><div class="line">        self.browser.switch_to.frame(<span class="number">0</span>)</div><div class="line">        <span class="comment">#self.browser.switch_to.frame("login_frame")</span></div><div class="line">        print(<span class="string">"hahaha"</span>)</div><div class="line">        </div><div class="line">        self.browser.find_element_by_id(<span class="string">"switcher_plogin"</span>).click()</div><div class="line">        print(<span class="string">"in\n"</span>)</div><div class="line">        self.browser.find_element_by_id(<span class="string">"u"</span>).clear()</div><div class="line">        self.browser.find_element_by_id(<span class="string">"u"</span>).send_keys(self.QQ)</div><div class="line">        self.browser.find_element_by_id(<span class="string">"p"</span>).clear()</div><div class="line">        self.browser.find_element_by_id(<span class="string">"p"</span>).send_keys(self.password)</div><div class="line">        self.browser.find_element_by_id(<span class="string">"login_button"</span>).click()</div><div class="line">        time.sleep(<span class="number">10</span>)</div><div class="line">        <span class="keyword">print</span> (<span class="string">"登录成功"</span>)</div><div class="line">        <span class="comment"># 解决FireFox的登录成功后，直接访问新页面出现can't access dead object错误的方法链接：</span></div><div class="line">        <span class="comment"># http://stackoverflow.com/questions/16396767/firefox-bug-with-selenium-cant-access-dead-object</span></div><div class="line">        <span class="comment"># 通过下面这句解决，可能时因为上面switch_to到了login_frame，所以现在它是dead object</span></div><div class="line">        self.browser.switch_to.default_content()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">praise_someone</span><span class="params">(self)</span>:</span></div><div class="line">        self.log_num=<span class="number">0</span></div><div class="line">        pre_num=<span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            self.browser.switch_to.frame(<span class="string">"QM_Feeds_Iframe"</span>)  <span class="comment"># 个人主页才有</span></div><div class="line">            self.log_head = self.browser.find_element_by_id(<span class="string">"host_home_feeds"</span>)</div><div class="line">            self.log_list=self.log_head.find_elements_by_css_selector(<span class="string">".f-single.f-s-s"</span>)</div><div class="line">            self.start_praising()</div><div class="line">            self.browser.switch_to.default_content()</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</div><div class="line">                self.browser.execute_script(<span class="string">"window.scrollBy(0,300);"</span>)</div><div class="line">            time.sleep(<span class="number">2</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">praise_all</span><span class="params">(self)</span>:</span></div><div class="line">        feed_friend_list = self.browser.find_element_by_id(<span class="string">"feed_friend_list"</span>)</div><div class="line">        self.log_list = feed_friend_list.find_elements_by_css_selector(<span class="string">".f-single.f-s-s"</span>)</div><div class="line">        <span class="comment"># 向下翻动一段距离，为了使feed_page_container那个变化的列表出现</span></div><div class="line">        <span class="comment">#time.sleep(60)</span></div><div class="line">        self.start_praising()</div><div class="line">        self.log_num = len(self.log_list)</div><div class="line">        self.log_list=[]</div><div class="line">        print(<span class="number">22</span>)</div><div class="line">        <span class="comment">#container_head = feed_friend_list.find_element_by_class_name("feed_page_container")</span></div><div class="line">        print(<span class="number">33</span>)</div><div class="line">        <span class="comment"># 个人中心页面，说说是在&lt;li class="feed_page_container"&gt;...&lt;/li&gt;下动态出现的</span></div><div class="line">        <span class="comment"># 该标签下最多有3个&lt;ul data-page="0"&gt;...&lt;/ul&gt;，每个ul标签下又包含4个说说</span></div><div class="line">        <span class="comment"># 这里面的数值12只是估算，因为说说的评论数不同，导致一条说说所占的高度不同</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            time.sleep(<span class="number">2</span>)</div><div class="line">            print(<span class="string">"emmmmmmmmmmmmm"</span>)</div><div class="line">            feed_friend_list = self.browser.find_element_by_id(<span class="string">"feed_friend_list"</span>)</div><div class="line">            self.log_list = feed_friend_list.find_elements_by_css_selector(<span class="string">".f-single.f-s-s"</span>)</div><div class="line">            <span class="keyword">print</span> (len(self.log_list))</div><div class="line">            self.start_praising()</div><div class="line">            <span class="comment">#time.sleep(5)</span></div><div class="line">            print(<span class="string">"sleep test"</span>)</div><div class="line">            </div><div class="line">            self.browser.refresh()</div><div class="line">            time.sleep(<span class="number">30</span>)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):  </div><div class="line">                self.browser.execute_script(<span class="string">"window.scrollBy(0,-500);"</span>)  </div><div class="line">            time.sleep(<span class="number">5</span>)</div><div class="line">            print(<span class="number">1</span>)</div><div class="line">            feed_friend_list = self.browser.find_element_by_id(<span class="string">"feed_friend_list"</span>)</div><div class="line">            print(<span class="number">2</span>)</div><div class="line">            <span class="comment">#self.log_list = feed_friend_list.find_elements_by_css_selector(".f-single.f-s-s")</span></div><div class="line">            print(<span class="number">3</span>)</div><div class="line">            <span class="comment">#time.sleep(50)</span></div><div class="line">            <span class="comment">#container_head = feed_friend_list.find_element_by_class_name("feed_page_container")</span></div><div class="line">            print(<span class="number">4</span>)</div><div class="line">           </div><div class="line">            </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_praising</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> log <span class="keyword">in</span> self.log_list:</div><div class="line">            <span class="comment"># 赞过的就不赞了</span></div><div class="line">            <span class="keyword">if</span> log <span class="keyword">in</span> self.praised_list:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                self.n+=<span class="number">1</span></div><div class="line">                <span class="comment"># 名字</span></div><div class="line">                <span class="keyword">print</span> (self.n,<span class="string">"【"</span>,log.find_element_by_xpath(<span class="string">"./div/div[4]/div/a"</span>).text,<span class="string">"】 :"</span>,)</div><div class="line">                <span class="comment"># 说说内容</span></div><div class="line">                <span class="keyword">print</span> (log.find_element_by_xpath(<span class="string">"./div[2]/div/div"</span>).text,)</div><div class="line">                <span class="comment"># 点赞图标</span></div><div class="line">                thumb_up_block=log.find_element_by_xpath(<span class="string">"./div[3]/div[1]/p/a[3]"</span>)</div><div class="line">                <span class="comment"># 若已赞过，则class属性中会增加一个CSS属性值item-on</span></div><div class="line">                <span class="keyword">if</span> <span class="string">"item-on"</span> <span class="keyword">not</span> <span class="keyword">in</span> thumb_up_block.get_attribute(<span class="string">"class"</span>):</div><div class="line">                    thumb_up_icon=thumb_up_block.find_element_by_xpath(<span class="string">"./i"</span>)</div><div class="line">                    thumb_up_icon.click()</div><div class="line">                    <span class="keyword">print</span> (<span class="string">"[点赞成功]\n"</span>)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">print</span> (<span class="string">"[已赞]\n"</span>)</div><div class="line">                self.praised_list.append(log)</div><div class="line">                time.sleep(<span class="number">1</span>)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                traceback.print_exc()</div><div class="line">                <span class="keyword">continue</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    QQ =input(<span class="string">u"输入QQ号："</span>)</div><div class="line">    password =input(<span class="string">u"输入QQ密码："</span>)</div><div class="line">    friendQQ =input(<span class="string">u"输入被点赞的好友QQ号(不输入则给空间所有发出来的动态点赞)："</span>)</div><div class="line">    </div><div class="line">    friendQQ = []</div><div class="line">    praise_spider = Praise(QQ,password,friendQQ)</div><div class="line">    praise_spider.login_qzone()</div><div class="line">    praise_spider.run()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用latex写ppt</title>
      <link href="/2018/05/30/%E7%94%A8latex%E5%86%99ppt/"/>
      <url>/2018/05/30/%E7%94%A8latex%E5%86%99ppt/</url>
      <content type="html"><![CDATA[<p>队友下周就要演讲了，想把ppt做的高端一些<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><a href="http://blog.sciencenet.cn/home.php?mod=space&amp;uid=3199&amp;do=blog&amp;id=7390" target="_blank" rel="external">学习博客</a><br>发现写完编译出来的就是pdf格式，并且去用adobe的应用去播放pdf,并不会生成.ppt格式的文件</p><p><a href="http://deic.uab.es/~iblanes/beamer_gallery/index_by_theme.html" target="_blank" rel="external">beamer主题预览</a><br><a href="https://www.sharelatex.com/templates/conferences/conference-presentation" target="_blank" rel="external">各种latex的模板</a><br><a href="https://www.zhihu.com/search?type=content&amp;q=beamer+%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81" target="_blank" rel="external">知乎教程</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line">\documentclass&#123;beamer&#125;</div><div class="line"></div><div class="line">% There are many different themes available for Beamer. A comprehensive</div><div class="line">% list with examples is given here:</div><div class="line">% http://deic.uab.es/~iblanes/beamer_gallery/index_by_theme.html</div><div class="line">% You can uncomment the themes below if you would like to use a different</div><div class="line">% one:</div><div class="line">%\usetheme&#123;AnnArbor&#125;</div><div class="line">%\usetheme&#123;Antibes&#125;</div><div class="line">%\usetheme&#123;Bergen&#125;</div><div class="line">%\usetheme&#123;Berkeley&#125;</div><div class="line">%\usetheme&#123;Berlin&#125;</div><div class="line">%\usetheme&#123;Boadilla&#125;</div><div class="line">%\usetheme&#123;boxes&#125;</div><div class="line">%\usetheme&#123;CambridgeUS&#125;</div><div class="line">%\usetheme&#123;Copenhagen&#125;</div><div class="line">\usetheme&#123;Darmstadt&#125;</div><div class="line">%\usetheme&#123;default&#125;</div><div class="line">%\usetheme&#123;Frankfurt&#125;</div><div class="line">%\usetheme&#123;Goettingen&#125;</div><div class="line">%\usetheme&#123;Hannover&#125;</div><div class="line">%\usetheme&#123;Ilmenau&#125;</div><div class="line">%\usetheme&#123;JuanLesPins&#125;</div><div class="line">%\usetheme&#123;Luebeck&#125;</div><div class="line">%\usetheme&#123;Madrid&#125;</div><div class="line">%\usetheme&#123;Malmoe&#125;</div><div class="line">%\usetheme&#123;Marburg&#125;</div><div class="line">%\usetheme&#123;Montpellier&#125;</div><div class="line">%\usetheme&#123;PaloAlto&#125;</div><div class="line">%\usetheme&#123;Pittsburgh&#125;</div><div class="line">%\usetheme&#123;Rochester&#125;</div><div class="line">%\usetheme&#123;Singapore&#125;</div><div class="line">%\usetheme&#123;Szeged&#125;</div><div class="line">%\usetheme&#123;Warsaw&#125;</div><div class="line">\usepackage&#123;ctex&#125;</div><div class="line"></div><div class="line">\title&#123;基础动态规划&#125;</div><div class="line"></div><div class="line">% A subtitle is optional and this may be deleted</div><div class="line">\subtitle&#123;&#125;</div><div class="line"></div><div class="line">\author&#123;滕尧&#125;</div><div class="line">% - Give the names in the same order as the appear in the paper.</div><div class="line">% - Use the \inst&#123;?&#125; command only if the authors have different</div><div class="line">%   affiliation.</div><div class="line"></div><div class="line">\institute[] % (optional, but mostly needed)</div><div class="line">&#123;</div><div class="line">  西安电子科技大学</div><div class="line">  \and</div><div class="line">  %\inst&#123;2&#125;%</div><div class="line">  ACM基地&#125;</div><div class="line">% - Use the \inst command only if there are several affiliations.</div><div class="line">% - Keep it simple, no one is interested in your street address.</div><div class="line"></div><div class="line">\date&#123;\today&#125;</div><div class="line">% - Either use conference name or its abbreviation.</div><div class="line">% - Not really informative to the audience, more for people (including</div><div class="line">%   yourself) who are reading the slides online</div><div class="line"></div><div class="line">\subject&#123;Theoretical Computer Science&#125;</div><div class="line">% This is only inserted into the PDF information catalog. Can be left</div><div class="line">% out. </div><div class="line"></div><div class="line">% If you have a file called &quot;university-logo-filename.xxx&quot;, where xxx</div><div class="line">% is a graphic format that can be processed by latex or pdflatex,</div><div class="line">% resp., then you can add a logo as follows:</div><div class="line"></div><div class="line">% \pgfdeclareimage[height=0.5cm]&#123;university-logo&#125;&#123;university-logo-filename&#125;</div><div class="line">% \logo&#123;\pgfuseimage&#123;university-logo&#125;&#125;</div><div class="line"></div><div class="line">% Delete this, if you do not want the table of contents to pop up at</div><div class="line">% the beginning of each subsection:</div><div class="line">\AtBeginSubsection[]</div><div class="line">&#123;</div><div class="line">  \begin&#123;frame&#125;&lt;beamer&gt;&#123;Outline&#125;</div><div class="line">    \tableofcontents[currentsection,currentsubsection]</div><div class="line">  \end&#123;frame&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">% Let&apos;s get started</div><div class="line">\begin&#123;document&#125;</div><div class="line"></div><div class="line">\begin&#123;frame&#125;</div><div class="line">  \titlepage</div><div class="line">\end&#123;frame&#125;</div><div class="line"></div><div class="line">\begin&#123;frame&#125;&#123;Outline&#125;</div><div class="line">  \tableofcontents</div><div class="line">  % You might wish to add the option [pausesections]</div><div class="line">\end&#123;frame&#125;</div><div class="line"></div><div class="line">% Section and subsections will appear in the presentation overview</div><div class="line">% and table of contents.</div><div class="line">\section&#123;First Main Section&#125;</div><div class="line"></div><div class="line">\subsection&#123;First Subsection&#125;</div><div class="line"></div><div class="line">\begin&#123;frame&#125;&#123;First Slide Title&#125;&#123;Optional Subtitle&#125;</div><div class="line">  \begin&#123;itemize&#125;</div><div class="line">  \item &#123;</div><div class="line">    My first point.</div><div class="line">  &#125;</div><div class="line">  \item &#123;</div><div class="line">    My second point.</div><div class="line">  &#125;</div><div class="line">  \end&#123;itemize&#125;</div><div class="line">\end&#123;frame&#125;</div><div class="line"></div><div class="line">\subsection&#123;Second Subsection&#125;</div><div class="line"></div><div class="line">% You can reveal the parts of a slide one at a time</div><div class="line">% with the \pause command:</div><div class="line">\begin&#123;frame&#125;&#123;Second Slide Title&#125;</div><div class="line">  \begin&#123;itemize&#125;</div><div class="line">  \item &#123;</div><div class="line">    First item.</div><div class="line">    \pause % The slide will pause after showing the first item</div><div class="line">  &#125;</div><div class="line">  \item &#123;   </div><div class="line">    Second item.</div><div class="line">  &#125;</div><div class="line">  % You can also specify when the content should appear</div><div class="line">  % by using &lt;n-&gt;:</div><div class="line">  \item&lt;3-&gt; &#123;</div><div class="line">    Third item.</div><div class="line">  &#125;</div><div class="line">  \item&lt;4-&gt; &#123;</div><div class="line">    Fourth item.</div><div class="line">  &#125;</div><div class="line">  % or you can use the \uncover command to reveal general</div><div class="line">  % content (not just \items):</div><div class="line">  \item&lt;5-&gt; &#123;</div><div class="line">    Fifth item. \uncover&lt;6-&gt;&#123;Extra text in the fifth item.&#125;</div><div class="line">  &#125;</div><div class="line">  \end&#123;itemize&#125;</div><div class="line">\end&#123;frame&#125;</div><div class="line"></div><div class="line">\section&#123;Second Main Section&#125;</div><div class="line"></div><div class="line">\subsection&#123;Another Subsection&#125;</div><div class="line"></div><div class="line">\begin&#123;frame&#125;&#123;Blocks&#125;</div><div class="line">\begin&#123;block&#125;&#123;Block Title&#125;</div><div class="line">You can also highlight sections of your presentation in a block, with it&apos;s own title</div><div class="line">\end&#123;block&#125;</div><div class="line">\begin&#123;theorem&#125;</div><div class="line">There are separate environments for theorems, examples, definitions and proofs.</div><div class="line">\end&#123;theorem&#125;</div><div class="line">\begin&#123;example&#125;</div><div class="line">Here is an example of an example block.</div><div class="line">\end&#123;example&#125;</div><div class="line">\end&#123;frame&#125;</div><div class="line"></div><div class="line">% Placing a * after \section means it will not show in the</div><div class="line">% outline or table of contents.</div><div class="line">\section*&#123;Summary&#125;</div><div class="line"></div><div class="line">\begin&#123;frame&#125;&#123;Summary&#125;</div><div class="line">  \begin&#123;itemize&#125;</div><div class="line">  \item</div><div class="line">    The \alert&#123;first main message&#125; of your talk in one or two lines.</div><div class="line">  \item</div><div class="line">    The \alert&#123;second main message&#125; of your talk in one or two lines.</div><div class="line">  \item</div><div class="line">    Perhaps a \alert&#123;third message&#125;, but not more than that.</div><div class="line">  \end&#123;itemize&#125;</div><div class="line">  </div><div class="line">  \begin&#123;itemize&#125;</div><div class="line">  \item</div><div class="line">    Outlook</div><div class="line">    \begin&#123;itemize&#125;</div><div class="line">    \item</div><div class="line">      Something you haven&apos;t solved.</div><div class="line">    \item</div><div class="line">      Something else you haven&apos;t solved.</div><div class="line">    \end&#123;itemize&#125;</div><div class="line">  \end&#123;itemize&#125;</div><div class="line">\end&#123;frame&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">% All of the following is optional and typically not needed. </div><div class="line">\appendix</div><div class="line">\section&lt;presentation&gt;*&#123;\appendixname&#125;</div><div class="line">\subsection&lt;presentation&gt;*&#123;For Further Reading&#125;</div><div class="line"></div><div class="line">\begin&#123;frame&#125;[allowframebreaks]</div><div class="line">  \frametitle&lt;presentation&gt;&#123;For Further Reading&#125;</div><div class="line">    </div><div class="line">  \begin&#123;thebibliography&#125;&#123;10&#125;</div><div class="line">    </div><div class="line">  \beamertemplatebookbibitems</div><div class="line">  % Start with overview books.</div><div class="line"></div><div class="line">  \bibitem&#123;Author1990&#125;</div><div class="line">    A.~Author.</div><div class="line">    \newblock &#123;\em Handbook of Everything&#125;.</div><div class="line">    \newblock Some Press, 1990.</div><div class="line"> </div><div class="line">    </div><div class="line">  \beamertemplatearticlebibitems</div><div class="line">  % Followed by interesting articles. Keep the list short. </div><div class="line"></div><div class="line">  \bibitem&#123;Someone2000&#125;</div><div class="line">    S.~Someone.</div><div class="line">    \newblock On this and that.</div><div class="line">    \newblock &#123;\em Journal of This and That&#125;, 2(1):50--100,</div><div class="line">    2000.</div><div class="line">  \end&#123;thebibliography&#125;</div><div class="line">\end&#123;frame&#125;</div><div class="line"></div><div class="line">\end&#123;document&#125;</div></pre></td></tr></table></figure><h1 id="一行放多张图片"><a href="#一行放多张图片" class="headerlink" title="一行放多张图片"></a>一行放多张图片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">%一定要加上这个定义</div><div class="line">\makeatletter\def\@captype&#123;figure&#125;\makeatother</div><div class="line">\begin&#123;frame&#125;&#123;Outline&#125;</div><div class="line">  %\tableofcontents</div><div class="line"></div><div class="line"> \begin&#123;columns&#125;  </div><div class="line"> \column&#123;0.5\textwidth&#125;  </div><div class="line"> \begin&#123;minipage&#125;[c][0.4\textheight][c]&#123;\linewidth&#125;  </div><div class="line"> \centering  </div><div class="line"> \includegraphics[width=4cm,height = 2cm]&#123;pic/pic1.png&#125;  </div><div class="line"> \caption&#123;pic1.png&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"> \end&#123;minipage&#125;  </div><div class="line"> \begin&#123;minipage&#125;[c][0.4\textheight][c]&#123;\linewidth&#125;  </div><div class="line"> \centering  </div><div class="line"> \includegraphics[width=0.8\linewidth]&#123;pic/pic2.png&#125;  </div><div class="line"> \end&#123;minipage&#125;  </div><div class="line"> </div><div class="line"> \column&#123;0.5\textwidth&#125; % remember add this to the other clumn  </div><div class="line"> \begin&#123;minipage&#125;[c][0.4\textheight][c]&#123;\linewidth&#125;  </div><div class="line"> \begin&#123;itemize&#125;  </div><div class="line"> \item 原理：blabla。  </div><div class="line"> \item 优点：blabla。  </div><div class="line"> \item 缺点：blabla。  </div><div class="line"> \end&#123;itemize&#125;  </div><div class="line"> \end&#123;minipage&#125;  </div><div class="line"> </div><div class="line"> \begin&#123;minipage&#125;[c][0.4\textheight][c]&#123;\linewidth&#125;  </div><div class="line"> \centering  </div><div class="line"> \includegraphics[width=0.8\linewidth]&#123;pic/pic3.png&#125;  </div><div class="line"> \end&#123;minipage&#125;</div><div class="line"> \column&#123;0.5\textwidth&#125; % remember add this to the other clumn </div><div class="line"> </div><div class="line"> \begin&#123;minipage&#125;[c][0.4\textheight][c]&#123;\linewidth&#125;  </div><div class="line"> \centering  </div><div class="line"> \includegraphics[width=0.8\linewidth]&#123;pic/pic4.png&#125;  </div><div class="line"> \end&#123;minipage&#125;</div><div class="line"> </div><div class="line"> \begin&#123;minipage&#125;[c][0.4\textheight][c]&#123;\linewidth&#125;  </div><div class="line"> \centering  </div><div class="line"> \includegraphics[width=0.8\linewidth]&#123;pic/pic1.png&#125;  </div><div class="line"> \end&#123;minipage&#125;</div><div class="line"> </div><div class="line"> \end&#123;columns&#125;  </div><div class="line"> </div><div class="line">\end&#123;frame&#125;</div></pre></td></tr></table></figure><h1 id="插入核心代码"><a href="#插入核心代码" class="headerlink" title="插入核心代码"></a>插入核心代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">\definecolor&#123;mygreen&#125;&#123;rgb&#125;&#123;0,0.6,0&#125;</div><div class="line">\definecolor&#123;mygray&#125;&#123;rgb&#125;&#123;0.5,0.5,0.5&#125;</div><div class="line">\definecolor&#123;mymauve&#125;&#123;rgb&#125;&#123;0.58,0,0.82&#125;</div><div class="line">\newcommand&#123;\Console&#125;&#123;Console&#125;</div><div class="line">\lstset&#123; %</div><div class="line">backgroundcolor=\color&#123;white&#125;,   % choose the background color</div><div class="line">basicstyle=\footnotesize\rmfamily,     % size of fonts used for the code</div><div class="line">columns=fullflexible,</div><div class="line">breaklines=true,                 % automatic line breaking only at whitespace</div><div class="line">captionpos=b,                    % sets the caption-position to bottom</div><div class="line">tabsize=4,</div><div class="line">commentstyle=\color&#123;mygreen&#125;,    % comment style</div><div class="line">escapeinside=&#123;\%*&#125;&#123;*)&#125;,          % if you want to add LaTeX within your code</div><div class="line">keywordstyle=\color&#123;blue&#125;,       % keyword style</div><div class="line">stringstyle=\color&#123;mymauve&#125;\ttfamily,     % string literal style</div><div class="line">numbers=left, </div><div class="line">%frame=single,</div><div class="line">rulesepcolor=\color&#123;red!20!green!20!blue!20&#125;,</div><div class="line">% identifierstyle=\color&#123;red&#125;,</div><div class="line">language=c</div><div class="line">&#125;</div><div class="line"></div><div class="line">\begin&#123;frame&#125;</div><div class="line">最近兴趣使然写了几个Python库，也发布到了Pypi上，虽然没什么人下载，但自己在其他机器上用着也会很方便。这里我向大家介绍一下如何在Pypi上发表自己的Python库。</div><div class="line">\lstinputlisting[lastline=20,</div><div class="line">language=c,</div><div class="line">frame=single,</div><div class="line">caption=First ten lines of some Python code,</div><div class="line">label=c]</div><div class="line">&#123;test.c&#125;</div><div class="line">\end&#123;frame&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rope初步</title>
      <link href="/2018/05/29/rope%E5%88%9D%E6%AD%A5/"/>
      <url>/2018/05/29/rope%E5%88%9D%E6%AD%A5/</url>
      <content type="html"><![CDATA[<p>rope可以持久化操作，平衡树的结构，每一次都复制的是根节点,\(O(1)\)的复制历史版本</p><a id="more"></a><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><a href="https://github.com/williamchenwl/ACMLibrary/blob/master/DataStructure%26Statistics/%E7%BB%B3Rope.cpp" target="_blank" rel="external">rope模板</a><br><a href="https://blog.csdn.net/iamzky/article/details/38348653" target="_blank" rel="external">rope维护历史版本</a><br><a href="https://www.cnblogs.com/scx2015noip-as-php/p/rope.html" target="_blank" rel="external">rope的各种操作</a></p><h1 id="可持久化模板"><a href="#可持久化模板" class="headerlink" title="可持久化模板"></a>可持久化模板</h1><p><a href="https://www.luogu.org/problemnew/show/P3919" target="_blank" rel="external">可持久化数组</a></p><h2 id="MLE的代码"><a href="#MLE的代码" class="headerlink" title="MLE的代码"></a>MLE的代码</h2><p>一直在最后一个点MLE，即使改成指针也不行。但是可以看到这个数据结构的好处，代码十分的简短<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/rope&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line">rope&lt;<span class="keyword">int</span>&gt; *his[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        his[<span class="number">0</span>]=<span class="keyword">new</span> rope&lt;<span class="keyword">int</span>&gt;();</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</div><div class="line">            his[<span class="number">0</span>]-&gt;append(temp);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//cout&lt;&lt;"haha"&lt;&lt;endl;</span></div><div class="line">        <span class="keyword">int</span> ver, ty, loc, val;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;ver, &amp;ty);</div><div class="line">            his[i+<span class="number">1</span>] = <span class="keyword">new</span> rope&lt;<span class="keyword">int</span>&gt;(*his[ver]);</div><div class="line">            <span class="keyword">if</span>(ty == <span class="number">1</span>)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;loc, &amp;val);</div><div class="line">                his[i+<span class="number">1</span>]-&gt;replace(loc<span class="number">-1</span>, val);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;loc);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, his[i+<span class="number">1</span>]-&gt;at(loc<span class="number">-1</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>母函数初步</title>
      <link href="/2018/05/29/%E6%AF%8D%E5%87%BD%E6%95%B0%E5%88%9D%E6%AD%A5/"/>
      <url>/2018/05/29/%E6%AF%8D%E5%87%BD%E6%95%B0%E5%88%9D%E6%AD%A5/</url>
      <content type="html"><![CDATA[<p>母函数初步<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br>推荐看《具体数学》和数一的课件</p><h1 id="HDOJ-1398-Square-Coins"><a href="#HDOJ-1398-Square-Coins" class="headerlink" title="HDOJ-1398 Square Coins"></a>HDOJ-1398 Square Coins</h1><p>构造母函数：<br>\(G(x) = (1+x+x^2+x^3+\dots)(1+x^4+x^8+x^12+\dots) \dots (1+x^289+x^(578)+\dots)\).<br>该函数是无限的，但是我们要求解的结果是有限的，只用模拟乘法就行了<br>x的系数表示<code>方案的数量</code>，x的幂次表示<code>所凑的钱数</code></p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">305</span>;</div><div class="line"><span class="keyword">int</span> c1[maxn], c2[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) c1[i] = <span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(c2, <span class="number">0</span>, <span class="keyword">sizeof</span>(c2));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=<span class="number">17</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; j++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k+j&lt;=n; k+=(i*i))&#123;</div><div class="line">                    c2[k+j] += <span class="number">1</span>*c1[j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; j++)&#123;</div><div class="line">                c1[j] = c2[j];</div><div class="line">                c2[j] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;c1[n]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gym101572补题</title>
      <link href="/2018/05/27/gym101572%E8%A1%A5%E9%A2%98/"/>
      <url>/2018/05/27/gym101572%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>组队赛补题<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="水坑问题"><a href="#水坑问题" class="headerlink" title="水坑问题"></a>水坑问题</h1><p>从起始点出发进行BFS，不断的维护最深的水坑。<br>问最多能流多少的水</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, x, y;</div><div class="line"><span class="keyword">int</span> a[<span class="number">505</span>][<span class="number">505</span>];</div><div class="line"><span class="keyword">int</span> vis[<span class="number">505</span>][<span class="number">505</span>],h[<span class="number">505</span>][<span class="number">505</span>];</div><div class="line"><span class="keyword">int</span> dir[<span class="number">8</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125; &#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> x, y, h;</div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;a)<span class="keyword">const</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> h &gt; a.h;</div><div class="line">&#125;</div><div class="line">&#125;pre, nt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</div><div class="line">&#123;</div><div class="line">priority_queue&lt;node&gt;q;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">pre = &#123; x,y,a[x][y] &#125;;</div><div class="line">q.push(pre);</div><div class="line">vis[x][y] = <span class="number">1</span>;</div><div class="line">h[x][y] = a[x][y];</div><div class="line"></div><div class="line"><span class="keyword">while</span> (!q.empty())</div><div class="line">&#123;</div><div class="line">pre = q.top();</div><div class="line">q.pop();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> xx = pre.x + dir[i][<span class="number">0</span>];</div><div class="line"><span class="keyword">int</span> yy = pre.y + dir[i][<span class="number">1</span>];</div><div class="line"><span class="keyword">if</span> (xx&lt;<span class="number">1</span> || yy&lt;<span class="number">1</span> || xx&gt;n || yy&gt;m|| a[xx][yy] &gt;= <span class="number">0</span>||vis[xx][yy]) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">int</span> tmp = max(pre.h, a[xx][yy]);</div><div class="line">h[xx][yy] = tmp;</div><div class="line">vis[xx][yy] = <span class="number">1</span>;</div><div class="line">nt = &#123; xx,yy,tmp &#125;;</div><div class="line">q.push(nt);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)&#123;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;h[i][j]&lt;&lt;<span class="string">" "</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</div><div class="line">ans += <span class="number">-1L</span>L * h[i][j];</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">3 3</span></div><div class="line"><span class="comment">1 1 1</span></div><div class="line"><span class="comment">1 -1 1</span></div><div class="line"><span class="comment">1 1 1</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h1 id="水坑问题2"><a href="#水坑问题2" class="headerlink" title="水坑问题2"></a>水坑问题2</h1><p><a href="https://blog.csdn.net/know_heng/article/details/70175740" target="_blank" rel="external">问题博客</a><br>可以看到相似的处理方法，但是一开始维护的高度为最外面的高低</p><h1 id="01串的相似度的最大值最小"><a href="#01串的相似度的最大值最小" class="headerlink" title="01串的相似度的最大值最小"></a>01串的相似度的最大值最小</h1><p><a href="https://blog.csdn.net/ACTerminate/article/details/78242948" target="_blank" rel="external">题解博客</a><br>先所有的串压入队列，求最远的串的距离就行了</p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> a[<span class="number">25</span>];</div><div class="line"><span class="keyword">int</span> dist[(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)+<span class="number">10</span>];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;que;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">memset</span>(dist,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dist));</div><div class="line"><span class="keyword">int</span> n,k;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</div><div class="line"><span class="keyword">int</span> now=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)</div><div class="line"><span class="keyword">if</span>(a[j]==<span class="string">'1'</span>)</div><div class="line">now|=(<span class="number">1</span>&lt;&lt;j);</div><div class="line">que.push(now);</div><div class="line">dist[now]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans,ma=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(!que.empty())</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> K=que.front();</div><div class="line">que.pop();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> to=K^(<span class="number">1</span>&lt;&lt;i);</div><div class="line"><span class="keyword">if</span>(dist[to]!=<span class="number">-1</span>)<span class="keyword">continue</span>;</div><div class="line">dist[to]=dist[K]+<span class="number">1</span>;</div><div class="line">que.push(to);</div><div class="line"><span class="keyword">if</span>(ma&gt;dist[to]) <span class="keyword">continue</span>;</div><div class="line">&#123;</div><div class="line">ma=dist[to];</div><div class="line">ans=to;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans%<span class="number">2</span>),ans/=<span class="number">2</span>;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="ICPC排名计算"><a href="#ICPC排名计算" class="headerlink" title="ICPC排名计算"></a>ICPC排名计算</h1><p>维护序号为1前面的序列就行了，注意set怎么访问struct</p><h2 id="ac-code-1"><a href="#ac-code-1" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> u;</div><div class="line">    <span class="keyword">int</span> number;</div><div class="line">    <span class="keyword">int</span> fa;</div><div class="line">    Node(<span class="keyword">int</span> _u=<span class="number">0</span>, <span class="keyword">int</span> _number = <span class="number">0</span>, <span class="keyword">int</span> _fa = <span class="number">0</span>):u(_u), number(_number), fa(_fa)&#123;&#125;</div><div class="line">    Node()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp; a) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">if</span>(number != a.number) <span class="keyword">return</span> number&gt;a.number;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> fa &lt; a.fa;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    Node node1 = Node(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>);</div><div class="line">    Node node2 = Node(<span class="number">2</span>, <span class="number">2</span>, <span class="number">101</span>);</div><div class="line">    Node node3  = Node(<span class="number">3</span>, <span class="number">1</span>, <span class="number">90</span>);</div><div class="line">    <span class="built_in">set</span>&lt;Node&gt; s;</div><div class="line">    s.clear();</div><div class="line">    s.insert(node1);</div><div class="line">    s.insert(node2);</div><div class="line">    s.insert(node3);</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">set</span>&lt;Node&gt;::iterator it = s.begin(); it!=s.end(); it++)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;(it)-&gt;u&lt;&lt;<span class="string">" "</span>&lt;&lt;(it)-&gt;number&lt;&lt;<span class="string">" "</span>&lt;&lt;(it)-&gt;fa&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CDQ分治解决一类偏序问题</title>
      <link href="/2018/05/27/CDQ%E5%88%86%E6%B2%BB%E8%A7%A3%E5%86%B3%E4%B8%80%E7%B1%BB%E5%81%8F%E5%BA%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2018/05/27/CDQ%E5%88%86%E6%B2%BB%E8%A7%A3%E5%86%B3%E4%B8%80%E7%B1%BB%E5%81%8F%E5%BA%8F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>CDQ解决一类偏序问题<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br>偏序问题的时间复杂度的理论上限为\(O(n^2)\)的，因此，我们追求的解决方案要在这个时间复杂度之下。<br>时间上限复杂度的做法就是对每一维用bitset维护小于它的值，一共有n维，时间复杂度为\(O^2\)，最后求并得出个数。</p><h1 id="三维偏序统计"><a href="#三维偏序统计" class="headerlink" title="三维偏序统计"></a>三维偏序统计</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5126" target="_blank" rel="external">counting star</a></p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_Q = <span class="number">50004</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_Z = <span class="number">100005</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ope</span> &#123;</span></div><div class="line"><span class="keyword">int</span> x, y, z;</div><div class="line"><span class="keyword">int</span> ty, id;</div><div class="line">Ope (<span class="keyword">int</span> xx, <span class="keyword">int</span> yy, <span class="keyword">int</span> zz, <span class="keyword">int</span> tt, <span class="keyword">int</span> ii) : x(xx), y(yy), z(zz), ty(tt), id(ii) &#123;&#125;</div><div class="line">Ope () &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Ope a, Ope b)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (a.x == b.x) <span class="keyword">return</span> a.id &lt; b.id;</div><div class="line"><span class="keyword">return</span> a.x &lt; b.x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(Ope a, Ope b)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (a.y == b.y) <span class="keyword">return</span> a.id &lt; b.id;</div><div class="line"><span class="keyword">return</span> a.y &lt; b.y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;Ope&gt; ope, ope2, ope3;</div><div class="line"></div><div class="line"><span class="keyword">int</span> tree[MAX_Z];</div><div class="line"><span class="keyword">int</span> ans[MAX_Q];</div><div class="line"><span class="keyword">bool</span> isQuery[MAX_Q];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a)</span> </span>&#123;</div><div class="line"><span class="keyword">while</span> (x &lt; MAX_Z) &#123;</div><div class="line">tree[x] += a;</div><div class="line">x += (x &amp; (-x));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (x) &#123;</div><div class="line">res += tree[x];</div><div class="line">x -= (x &amp; (-x));</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">countStar</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ope3.size(); i++) &#123;</div><div class="line"><span class="keyword">if</span> (ope3[i].ty == <span class="number">0</span>) update(ope3[i].z, <span class="number">1</span>);</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">int</span> t = query(ope3[i].z);</div><div class="line">ans[ope3[i].id] += t * ope3[i].ty;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ope3.size(); i++)</div><div class="line"><span class="keyword">if</span> (ope3[i].ty == <span class="number">0</span>) update(ope3[i].z, <span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ2</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (L &gt;= R) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</div><div class="line">CDQ2(L, mid);</div><div class="line">ope3.clear();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= mid; i++)</div><div class="line"><span class="keyword">if</span> (ope2[i].ty == <span class="number">0</span>) ope3.push_back(ope2[i]);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= R; i++)</div><div class="line"><span class="keyword">if</span> (ope2[i].ty != <span class="number">0</span>) ope3.push_back(ope2[i]);</div><div class="line">sort(ope3.begin(), ope3.end(), cmp2);</div><div class="line">countStar();</div><div class="line">CDQ2(mid + <span class="number">1</span>, R);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (L &gt;= R) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</div><div class="line">CDQ(L, mid);</div><div class="line">ope2.clear();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= mid; i++)</div><div class="line"><span class="keyword">if</span> (ope[i].ty == <span class="number">0</span>) ope2.push_back(ope[i]);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= R; i++)</div><div class="line"><span class="keyword">if</span> (ope[i].ty != <span class="number">0</span>) ope2.push_back(ope[i]);</div><div class="line">sort(ope2.begin(), ope2.end(), cmp);</div><div class="line">CDQ2(<span class="number">0</span>, ope2.size() - <span class="number">1</span>);</div><div class="line">CDQ(mid + <span class="number">1</span>, R);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, Q;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; allZ;<span class="comment">//离散化</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line"><span class="keyword">while</span> (T--) &#123;</div><div class="line"><span class="built_in">memset</span>(isQuery, <span class="number">0</span>, <span class="keyword">sizeof</span>(isQuery));</div><div class="line"><span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(ans));</div><div class="line">ope.clear();</div><div class="line">allZ.clear();</div><div class="line"><span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="keyword">sizeof</span>(tree));</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Q; i++) &#123;</div><div class="line"><span class="keyword">int</span> a;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</div><div class="line"><span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">int</span> x, y, z;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">ope.push_back(Ope(x, y, z, <span class="number">0</span>, i));</div><div class="line">allZ.push_back(z);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">isQuery[i] = <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> xa, ya, za, xb, yb, zb;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>, &amp;xa, &amp;ya, &amp;za, &amp;xb, &amp;yb, &amp;zb);</div><div class="line">ope.push_back(Ope(xa - <span class="number">1</span>, ya - <span class="number">1</span>, za - <span class="number">1</span>, <span class="number">-1</span>, i));</div><div class="line">ope.push_back(Ope(xa - <span class="number">1</span>, ya - <span class="number">1</span>, zb, <span class="number">1</span>, i));</div><div class="line">ope.push_back(Ope(xa - <span class="number">1</span>, yb, za - <span class="number">1</span>, <span class="number">1</span>, i));</div><div class="line">ope.push_back(Ope(xa - <span class="number">1</span>, yb, zb, <span class="number">-1</span>, i));</div><div class="line">ope.push_back(Ope(xb, ya - <span class="number">1</span>, za - <span class="number">1</span>, <span class="number">1</span>, i));</div><div class="line">ope.push_back(Ope(xb, ya - <span class="number">1</span>, zb, <span class="number">-1</span>, i));</div><div class="line">ope.push_back(Ope(xb, yb, za - <span class="number">1</span>, <span class="number">-1</span>, i));</div><div class="line">ope.push_back(Ope(xb, yb, zb, <span class="number">1</span>, i));</div><div class="line">allZ.push_back(za - <span class="number">1</span>);</div><div class="line">allZ.push_back(zb);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">sort(allZ.begin(), allZ.end());</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = unique(allZ.begin(), allZ.end());</div><div class="line">allZ.resize(distance(allZ.begin(), it));</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ope.size(); i++)</div><div class="line">ope[i].z = lower_bound(allZ.begin(), allZ.end(), ope[i].z) - allZ.begin() + <span class="number">1</span>;</div><div class="line">CDQ(<span class="number">0</span>, ope.size() - <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Q; i++)</div><div class="line"><span class="keyword">if</span> (isQuery[i]) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hash--BKDRHASH算法</title>
      <link href="/2018/05/27/hash-BKDRHASH%E7%AE%97%E6%B3%95/"/>
      <url>/2018/05/27/hash-BKDRHASH%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>一种非常优秀的hash算法<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="学习的来源"><a href="#学习的来源" class="headerlink" title="学习的来源"></a>学习的来源</h1><p><a href="http://www.it165.net/pro/html/201410/24949.html" target="_blank" rel="external">初步的解释hash</a><br><a href="">BKDR-hash性能测试</a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</div><div class="line"></div><div class="line">ull seed = <span class="number">137</span>;</div><div class="line"></div><div class="line"><span class="function">ull <span class="title">bkdr_hash</span><span class="params">()</span></span>&#123; </div><div class="line"><span class="keyword">int</span> len = s.length();</div><div class="line">ull ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++)</div><div class="line">ans = ans * seed + s[i];</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="冲突测试代码"><a href="#冲突测试代码" class="headerlink" title="冲突测试代码"></a>冲突测试代码</h1><p>感觉冲突的可能还是非常大的，并不知道为什么这个算法很优秀，待解答<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</div><div class="line"></div><div class="line">ull seed = <span class="number">137</span>;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="function">ull <span class="title">bkdr_hash</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> len = s.length();</div><div class="line">ull ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++)</div><div class="line">ans = ans * seed + s[i];</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">1e5</span>;</div><div class="line">    <span class="built_in">set</span>&lt;ull&gt; ss;</div><div class="line">    ss.clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tot; i++)&#123;</div><div class="line">        s.clear();</div><div class="line">        <span class="keyword">int</span> len = rand()%<span class="number">100</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;len; j++)&#123;</div><div class="line">            s += (rand()%<span class="number">26</span>+<span class="string">'a'</span>);</div><div class="line">        &#125;</div><div class="line">        ull hash_value = bkdr_hash();</div><div class="line">        <span class="keyword">if</span>(ss.count(hash_value)==<span class="number">0</span>)&#123;</div><div class="line">            ss.insert(hash_value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"the insert number"</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"hash collision\n"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rush-b补题</title>
      <link href="/2018/05/24/rush-b%E8%A1%A5%E9%A2%98/"/>
      <url>/2018/05/24/rush-b%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>gym补题<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><p>首先将有关系的图缩成一个点，然后有k个块，每一个块之间要么是爱，要么是恨，所以答案是\(2^{k-1}\)<br>如果搜索的时候有不存在的情形，直接记录下来，答案输出为0.</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; G[maxn];</div><div class="line"><span class="keyword">int</span> color[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">bool</span> not_exist = <span class="literal">false</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b)</span></span>&#123;</div><div class="line">    ll ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)&#123;</div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans = ans*a%mod;</div><div class="line">        a = a*a%mod;</div><div class="line">        b&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    vis[x] = <span class="literal">true</span>;</div><div class="line">    color[x] = c;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[x].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> u = G[x][i].first;</div><div class="line">        <span class="keyword">int</span> r = G[x][i].second;</div><div class="line">        <span class="keyword">int</span> next_color = <span class="number">3</span>-c;</div><div class="line">        <span class="keyword">if</span>(r == <span class="number">1</span>) next_color = c;</div><div class="line">        <span class="keyword">if</span>(!vis[u])&#123;</div><div class="line">            dfs(u, next_color);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(color[u]!=next_color)&#123;</div><div class="line">            not_exist = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">int</span> u, v, r;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) G[i].clear();</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;r;</div><div class="line">        G[u].push_back(make_pair(v, r));</div><div class="line">        G[v].push_back(make_pair(u, r));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[i])&#123;</div><div class="line">            dfs(i, <span class="number">1</span>);</div><div class="line">            tot++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//cout&lt;&lt;tot&lt;&lt;endl;</span></div><div class="line">    <span class="keyword">if</span>(not_exist)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">//cout&lt;&lt;tot&lt;&lt;endl;</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, pow_mod(<span class="number">2</span>, tot<span class="number">-1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Edu44补题</title>
      <link href="/2018/05/24/Edu44%E8%A1%A5%E9%A2%98/"/>
      <url>/2018/05/24/Edu44%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      
    </entry>
    
    <entry>
      <title>模拟题</title>
      <link href="/2018/05/22/%E6%A8%A1%E6%8B%9F%E9%A2%98/"/>
      <url>/2018/05/22/%E6%A8%A1%E6%8B%9F%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>练习代码和手速<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博弈论二</title>
      <link href="/2018/05/22/%E5%8D%9A%E5%BC%88%E8%AE%BA%E4%BA%8C/"/>
      <url>/2018/05/22/%E5%8D%9A%E5%BC%88%E8%AE%BA%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>复杂博弈论<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><a href="https://wenku.baidu.com/view/25540742a8956bec0975e3a8.html" target="_blank" rel="external">推荐的论文</a><br><a href="https://www.cnblogs.com/kuangbin/p/3218060.html" target="_blank" rel="external">硬币翻转博弈</a></p><h1 id="SG函数"><a href="#SG函数" class="headerlink" title="SG函数"></a>SG函数</h1><p><a href="https://blog.csdn.net/strangedbly/article/details/51137432" target="_blank" rel="external">推荐的学习博客</a><br>谈谈我的理解：<br>SG函数非常的像多堆的Nim博弈，唯一的区别就是SG函数还可以向后面的状态跳，但是这是没有什么意义的，因为对手不论怎样都可以返回原来的亦或为0的状态。<br>求SG的两种姿势：</p><h2 id="以递推的形式进行打表"><a href="#以递推的形式进行打表" class="headerlink" title="以递推的形式进行打表"></a>以递推的形式进行打表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> sg[maxn];</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; f[j]&lt;=i&amp;&amp;j&lt;<span class="number">3</span>; j++)&#123;</div><div class="line">            vis[sg[i-f[j]]] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[j])&#123;</div><div class="line">                sg[i] = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;sg[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    f[<span class="number">0</span>] = <span class="number">1</span>, f[<span class="number">1</span>] = <span class="number">2</span>, f[<span class="number">2</span>] = <span class="number">4</span>;</div><div class="line">    solve(<span class="number">15</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="以dfs来进行打表"><a href="#以dfs来进行打表" class="headerlink" title="以dfs来进行打表"></a>以dfs来进行打表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意 S数组要按从小到大排序 SG函数要初始化为-1 对于每个集合只需初始化1遍</span></div><div class="line"><span class="comment">//n是集合s的大小 S[i]是定义的特殊取法规则的数组</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> sg[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> s[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(sg[x]!=<span class="number">-1</span>) <span class="keyword">return</span> sg[x];</div><div class="line">    <span class="keyword">bool</span> vis[maxn];</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(x&gt;=s[i])&#123;</div><div class="line">            dfs(x-s[i]);</div><div class="line">            vis[sg[x-s[i]]] = <span class="literal">true</span>;<span class="comment">//记住一定要使sg[y]的状态</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=x; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[i])&#123;</div><div class="line">            ans = i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sg[x] = ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    s[<span class="number">0</span>] = <span class="number">1</span>, s[<span class="number">1</span>] = <span class="number">2</span>, s[<span class="number">2</span>] = <span class="number">4</span>;</div><div class="line">    <span class="built_in">memset</span>(sg, <span class="number">-1</span>, <span class="keyword">sizeof</span>(sg));</div><div class="line">    m = <span class="number">3</span>;</div><div class="line">    n = <span class="number">10</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        dfs(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;sg[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="dfs打表"><a href="#dfs打表" class="headerlink" title="dfs打表"></a>dfs打表</h1><p>骑士有6种移动的方式，注意状态空间的转移</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</div><div class="line"><span class="keyword">int</span> sg[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n, t;</div><div class="line"><span class="keyword">int</span> dx[<span class="number">6</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-3</span>&#125;;</div><div class="line"><span class="keyword">int</span> dy[<span class="number">6</span>] = &#123;<span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span>(y&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(sg[x][y]!=<span class="number">-1</span>) <span class="keyword">return</span> sg[x][y];</div><div class="line">    <span class="keyword">bool</span> vis[maxn];</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</div><div class="line">        <span class="keyword">int</span> nx = x+dx[i];</div><div class="line">        <span class="keyword">int</span> ny = y+dy[i];</div><div class="line">        <span class="keyword">if</span>(judge(nx, ny))&#123;</div><div class="line">            vis[dfs(nx, ny)] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[i])&#123;</div><div class="line">            <span class="keyword">return</span> sg[x][y] = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">int</span> kase = <span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(sg, <span class="number">-1</span>, <span class="keyword">sizeof</span>(sg));</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            ans^=dfs(x, y);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ans)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: Alice\n"</span>, kase++);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: Bob\n"</span>, kase++);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="取石子游戏"><a href="#取石子游戏" class="headerlink" title="取石子游戏"></a>取石子游戏</h1><p>游戏的规则是每一次只能取一堆石子个数的一半，向下取整。<br>不能取的人失败<br>先对单堆的石子求SG函数，发现以下的规律：</p><ol><li>当n是偶数的时候， SG(n) = n/2;</li><li>当n是奇数的时候， SG(n) = SG(n/2);这里的是向下取整</li></ol><p>递归的计算奇数堆的SG值就可以了</p><h2 id="AC-code-1"><a href="#AC-code-1" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></div><div class="line"><span class="comment">//using namespace std;</span></div><div class="line"><span class="comment">//const int mod = 1e9+7;</span></div><div class="line"><span class="comment">//const int maxn = 1e3;</span></div><div class="line"><span class="comment">//typedef long long ll;</span></div><div class="line"><span class="comment">//int vis[maxn];</span></div><div class="line"><span class="comment">//int sg[maxn];</span></div><div class="line"><span class="comment">//ll dfs(int x)&#123;</span></div><div class="line"><span class="comment">//    if(x%2 == 0) return x/2;</span></div><div class="line"><span class="comment">//    else return dfs(x/2);</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//int main()&#123;</span></div><div class="line"><span class="comment">//    memset(vis, 0, sizeof(vis));</span></div><div class="line"><span class="comment">//    memset(sg, -1, sizeof(sg));</span></div><div class="line"><span class="comment">//    sg[1] = 0;</span></div><div class="line"><span class="comment">//    sg[0] = 0;</span></div><div class="line"><span class="comment">//    for(int i=1; i&lt;=100; i++)&#123;</span></div><div class="line"><span class="comment">//        memset(vis, 0, sizeof(vis));</span></div><div class="line"><span class="comment">//        for(int j=1; 2*j&lt;=i; j++)&#123;//注意不能取0个石子</span></div><div class="line"><span class="comment">//            vis[sg[i-j]] = 1;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//        for(int j=0; j&lt;=i; j++)&#123;</span></div><div class="line"><span class="comment">//            if(!vis[j])&#123;</span></div><div class="line"><span class="comment">//                sg[i] = j;</span></div><div class="line"><span class="comment">//                break;</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    for(int i=1; i&lt;=100; i++)&#123;</span></div><div class="line"><span class="comment">//        if(i%2 == 1)cout&lt;&lt;i&lt;&lt;" "&lt;&lt;sg[i]&lt;&lt;endl;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    return 0;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> x/<span class="number">2</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> dfs(x/<span class="number">2</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">int</span> kase = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</div><div class="line">            ans ^= dfs(temp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ans)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: Alice\n"</span>, kase++);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: Bob\n"</span>, kase++);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="E-取石子游戏2"><a href="#E-取石子游戏2" class="headerlink" title="E 取石子游戏2"></a>E 取石子游戏2</h1><p><a href="https://blog.csdn.net/xuanandting/article/details/52047038" target="_blank" rel="external">知识的参考博客</a><br>有若干堆石子，但是最后取走石子的人为负，问先手必胜还是先手必败。<br>这是Nimm game的第二种形式<br>这里有关于充裕堆的定义：</p><blockquote><p>定义：若一堆中仅有1根火柴，则被称为孤单堆。若大于1根，则称为充裕堆。</p></blockquote><p>下面定义几种状态：</p><ol><li>T:石子的各堆的个数亦或和为0。(利他态)</li><li>S:各堆的石子的个数亦或和不为0.(利己态)</li></ol><p>1.1: \(T_2\): 充裕堆的个数大于等于2.<br>1.2: \(T_0\): 充裕堆的个数为0.<br>ps:这里不存在\(T_1\):充裕堆的个数为1，是因为，各堆的石子的个数亦或和为0.不可能存在</p><p>2.1: \(S_0\): <code>仅有</code>奇数个孤单堆<br>2.2: \(S_1\): <code>仅有</code>一个充裕堆， 若干个孤单堆<br>2.3: \(S_2\): 大于等于两个充裕堆，若干个孤单堆，总之亦或和不为0</p><p>下面给出若干个性质：</p><ol><li>\(S_2\)无法转移到\(T_0\), 结论很显然</li><li>\(S_0\)为必败态，也是很显而易见的。</li><li>\(T_0\)为必胜态，相当于有偶数个1.</li><li>\(S_1\)为必胜态，因为先手可以调节充裕堆的个数：当有奇数个1时，将充裕堆中的石子全部取走，变成了\(S_0\),先手胜；或者当有偶数个1时，充裕堆只剩下一个石子。</li><li>\(T_2\)为必败态：\(T_2\)只能转移到\(S_2 or S_1\), \(S_2只能转移到T_2\)<br><img src="http://i1.bvimg.com/622054/f55bbe6ee995606b.png" alt=""></li><li>\(S_2\)为必胜态： \(S_2\)只能转移到\(T_2\),\(T_2\)是必败态</li></ol><p>综上：\(T_2, S_0是必败态，S_2, S_1, T_0是必胜态\)</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">int</span> kase = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> Xor = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> single = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;num[i];</div><div class="line">            <span class="keyword">if</span>(num[i] == <span class="number">1</span>) single++;</div><div class="line">            Xor ^= num[i];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//T2或者是S0态是必败态，其他的状态是必胜态</span></div><div class="line">        <span class="keyword">if</span>((single&lt;=n<span class="number">-2</span>&amp;&amp;Xor==<span class="number">0</span>)||(Xor!=<span class="number">0</span>&amp;&amp;(single == n)&amp;&amp;single%<span class="number">2</span>))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: Bob\n"</span>, kase++);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: Alice\n"</span>, kase++);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="拆分石子游戏"><a href="#拆分石子游戏" class="headerlink" title="拆分石子游戏"></a>拆分石子游戏</h1><p>有n堆石子，每一次只能将一堆石子分成数量不等的两堆。<br>注意用set来存状态，用vis[]数组会爆空间</p><h2 id="AC-code-2"><a href="#AC-code-2" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> sg[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(sg[x]!=<span class="number">-1</span>) <span class="keyword">return</span> sg[x];</div><div class="line">    <span class="keyword">int</span> mid;</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;<span class="comment">//用set来计算mex， 用vis数组记录的开销太大了！！</span></div><div class="line">    s.clear();</div><div class="line"><span class="comment">//    memset(vis, 0, sizeof(vis));</span></div><div class="line">    <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)&#123;</div><div class="line">        mid = x/<span class="number">2</span><span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        mid = x/<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=mid; i++)&#123;</div><div class="line">        s.insert(dfs(x-i)^dfs(i));<span class="comment">//注意是两个子游戏的亦或！</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=x; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(s.count(i) == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> sg[x] = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">int</span> kase = <span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(sg, <span class="number">-1</span>, <span class="keyword">sizeof</span>(sg));</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;temp;</div><div class="line">            ans^=dfs(temp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ans)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: Alice\n"</span>, kase++);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: Bob\n"</span>, kase++);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="树上博弈"><a href="#树上博弈" class="headerlink" title="树上博弈"></a>树上博弈</h1><p><img src="http://i2.bvimg.com/622054/58a543b1b85ac526.png" alt=""><br>我们可以得到下面的结论，一棵子树的根节点的SG值为各子子树根节点的SG值加1的亦或和<br>注意：<br>当对树的边权进行赋值的时候，前面的树形结构相当于边权为1。后面我们将会看到树带有边权的树上博弈</p><p>无向图上面的博弈要先进行相应的缩点，然后再进行树上博弈</p><h2 id="有边权的树上博弈"><a href="#有边权的树上博弈" class="headerlink" title="有边权的树上博弈"></a>有边权的树上博弈</h2><p>每一次一个人将树上面的边权-1，当边权为0的时候，整棵子树都会被删除</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>下面的解释我还不太会证明。先记住结论吧<br>SG定理，对于当前节点u，每次考虑字节点v，u-v边的长度为l</p><p>当l为1时：sg(u) ^= (sg(v) + 1)</p><p>当l为奇数时： 需要判断sg(v)奇偶性，奇数-1，偶数+1；</p><p>当l为偶数时：sg(u) ^= sg(v)</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><h1 id="棋盘上面的移动石子"><a href="#棋盘上面的移动石子" class="headerlink" title="棋盘上面的移动石子"></a>棋盘上面的移动石子</h1><p>通过相应的转换，然后转化为Nim博弈<br>假设(i, j)坐标上面有石子，如果(i+j)的奇偶性和(n+m)的奇偶性相同，那么后手可以仿照先手的步骤，那么剩下的棋盘的石子就是Nim博弈了</p><h2 id="AC-code-3"><a href="#AC-code-3" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">int</span> kase = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="keyword">int</span> r, c;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;r, &amp;c);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=r; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=c; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</div><div class="line">                <span class="keyword">if</span>((r+c-i-j)%<span class="number">2</span> == <span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    ans ^= temp;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ans==<span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: lose\n"</span>, kase++);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: win\n"</span>, kase++);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="需要补充的题目"><a href="#需要补充的题目" class="headerlink" title="需要补充的题目"></a>需要补充的题目</h1><p><a href="https://vjudge.net/problem/POJ-3710" target="_blank" rel="external">christmas game</a></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博弈论一</title>
      <link href="/2018/05/21/%E5%8D%9A%E5%BC%88%E8%AE%BA%E4%B8%80/"/>
      <url>/2018/05/21/%E5%8D%9A%E5%BC%88%E8%AE%BA%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>简单博弈论</p><a id="more"></a><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="B-Euclid’s-game"><a href="#B-Euclid’s-game" class="headerlink" title="B Euclid’s game"></a>B Euclid’s game</h1><p>这道题目的表我好像打错了emmmm<br>怪不得一直在wa,<br><code>注意对称状态的记录，以及打表的时候输出前面的状态是否是未定义的！</code><br>附上正确的打表姿势：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> num[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x&gt;y) swap(x, y);</div><div class="line">    <span class="keyword">if</span>(y%x==<span class="number">0</span>)&#123;</div><div class="line">        num[y][x] = num[x][y] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</div><div class="line">        num[y][x] = num[x][y] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="keyword">int</span>(y/x); i++)&#123;</div><div class="line">        <span class="keyword">if</span>(num[x][y-i*x]==<span class="number">-1</span>)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"haha "</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>&lt;&lt;y-i*x&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(num[x][y-i*x]==<span class="number">0</span>)&#123;</div><div class="line">            num[y][x] = num[x][y] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    num[y][x] = num[x][y] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(num, <span class="number">-1</span>, <span class="keyword">sizeof</span>(num));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)num[i][<span class="number">1</span>] = num[<span class="number">1</span>][i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=<span class="number">100</span>; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;=<span class="number">100</span>; j++)&#123;</div><div class="line">            dfs(i ,j);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=<span class="number">100</span>; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(num[i][j] == <span class="number">0</span>)&#123;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//通过观察表的数据，（i, j）当i+1&lt;=j&lt;=2*i-1时是必败态</span></div></pre></td></tr></table></figure></p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line">ll n, m;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&amp;&amp;n+m)&#123;</div><div class="line">         <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">         <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(n&gt;m) swap(n, m);</div><div class="line">            <span class="keyword">if</span>(m%n==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span>(m/n&gt;=<span class="number">2</span>) <span class="keyword">break</span>;</div><div class="line">            m -= n;</div><div class="line">            flag = !flag;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">if</span>(flag)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Stan wins"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Ollie wins"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">         &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="cutting-paper"><a href="#cutting-paper" class="headerlink" title="cutting paper"></a>cutting paper</h1><p>当一个玩家可以切出1*1的格子的时候，那么这个玩家赢<br>使用sg函数</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</div><div class="line"><span class="keyword">int</span> win[maxn][maxn];</div><div class="line"><span class="keyword">int</span> w, h;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(win[w][h] != <span class="number">-1</span>) <span class="keyword">return</span> win[w][h];</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">    s.clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; w-i&gt;=<span class="number">2</span>; i++)&#123;</div><div class="line">        s.insert(dfs(i, h)^dfs(w-i, h));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; h-i&gt;=<span class="number">2</span>; i++)&#123;</div><div class="line">        s.insert(dfs(w, i)^dfs(w, h-i));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mex = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(s.count(mex)!=<span class="number">0</span>) mex++;</div><div class="line">    <span class="keyword">return</span> win[w][h] = mex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!dfs(w, h)) <span class="built_in">cout</span>&lt;&lt;<span class="string">"LOSE"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"WIN"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(win ,<span class="number">-1</span>, <span class="keyword">sizeof</span>(win));</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;w&gt;&gt;h)&#123;</div><div class="line">        solve(w, h);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>n·n的棋盘上面的博弈，可以横着或者是竖着的移动到之前没有访问过的格子；<br>看了题解，要有超强的找规律的感觉<br>看能否用1·2的格子覆盖就行了<br>将n分奇偶讨论就行了<br><a href="https://www.cnblogs.com/kuangbin/archive/2013/07/22/3204654.html" target="_blank" rel="external">题解</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span> &amp;&amp;n)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"8600\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"ailyanlu\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="m堆石子的博弈"><a href="#m堆石子的博弈" class="headerlink" title="m堆石子的博弈"></a>m堆石子的博弈</h1><p>每一堆石子可以取至少一个石子，或者全部全部取走<br>注意卡空间<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> tot[maxn];</div><div class="line"><span class="keyword">bool</span> bin[maxn][<span class="number">64</span>];</div><div class="line"><span class="keyword">int</span> number[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(bin, <span class="number">0</span>, <span class="keyword">sizeof</span>(bin));</div><div class="line">        <span class="built_in">memset</span>(tot, <span class="number">0</span>, <span class="keyword">sizeof</span>(tot));</div><div class="line">        <span class="built_in">memset</span>(number, <span class="number">0</span>, <span class="keyword">sizeof</span>(number));</div><div class="line">        <span class="keyword">int</span> max_wei = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;num[i];</div><div class="line">            <span class="keyword">int</span> temp = num[i];</div><div class="line">            <span class="keyword">int</span> wei = <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(temp)&#123;</div><div class="line">                bin[i][wei] = (temp%<span class="number">2</span>);</div><div class="line">                <span class="keyword">if</span>(temp%<span class="number">2</span>==<span class="number">1</span>)&#123;</div><div class="line">                    tot[wei]++;</div><div class="line">                &#125;</div><div class="line">                wei++;</div><div class="line">                temp/=<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">            max_wei = max(max_wei, wei<span class="number">-1</span>);</div><div class="line">            number[i] = wei<span class="number">-1</span>;</div><div class="line">            ans ^= num[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ans == <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">                <span class="keyword">int</span> change = <span class="number">0</span>;</div><div class="line">                <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=max_wei; j&gt;number[i]; j--)&#123;</div><div class="line">                    <span class="keyword">if</span>(tot[j]%<span class="number">2</span>) &#123;</div><div class="line">                        flag = <span class="literal">false</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(!flag) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(bin[i][number[i]] == <span class="number">0</span>&amp;&amp;tot[max_wei]%<span class="number">2</span> == <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=max_wei; j&gt;=<span class="number">1</span>; j--)&#123;</div><div class="line">                        <span class="keyword">if</span>(tot[j]%<span class="number">2</span>&amp;&amp;bin[i][j] == <span class="number">0</span>)&#123;</div><div class="line">                            ans -= (<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>));</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(tot[j]%<span class="number">2</span>&amp;&amp;bin[i][j] == <span class="number">1</span>)&#123;</div><div class="line">                            ans += (<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="built_in">cout</span>&lt;&lt;num[i]&lt;&lt;<span class="string">" "</span>&lt;&lt;num[i]-ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="E找规律"><a href="#E找规律" class="headerlink" title="E找规律"></a>E找规律</h1><p>先打表就行了</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></div><div class="line"><span class="comment">//using namespace std;</span></div><div class="line"><span class="comment">//const int maxn = 1e3+10;</span></div><div class="line"><span class="comment">//int num[maxn];</span></div><div class="line"><span class="comment">//void dfs(int x)&#123;</span></div><div class="line"><span class="comment">//    for(int i=0; (1&lt;&lt;i)&lt;=x; i++)&#123;</span></div><div class="line"><span class="comment">//        if(num[x-(1&lt;&lt;i)] == 0)&#123;</span></div><div class="line"><span class="comment">//            num[x] = 1;</span></div><div class="line"><span class="comment">//            return;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    num[x] = 0;</span></div><div class="line"><span class="comment">//    return ;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//int main()&#123;</span></div><div class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></div><div class="line"><span class="comment">//    memset(num, -1, sizeof(num));</span></div><div class="line"><span class="comment">//    num[0] = 0;</span></div><div class="line"><span class="comment">//    num[1] = num[2] = 1;</span></div><div class="line"><span class="comment">//    for(int i=3; i&lt;=100; i++)&#123;</span></div><div class="line"><span class="comment">//        dfs(i);</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    for(int i=1; i&lt;=100; i++)&#123;</span></div><div class="line"><span class="comment">//        cout&lt;&lt;i&lt;&lt;" "&lt;&lt;num[i]&lt;&lt;endl;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//    return 0;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</div><div class="line">        <span class="keyword">if</span>(n%<span class="number">3</span>)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Kiki"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Cici"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="M"><a href="#M" class="headerlink" title="M"></a>M</h1><p>利用环形博弈的对称性，注意讨论的充分性</p><h2 id="AC-code-1"><a href="#AC-code-1" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, k;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">int</span> kase = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</div><div class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>&amp;&amp;n%<span class="number">2</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: first\n"</span>, kase++);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(n&lt;=k)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: first\n"</span>, kase++);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: second\n"</span>, kase++);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="一道相似的原型的题目"><a href="#一道相似的原型的题目" class="headerlink" title="一道相似的原型的题目"></a>一道相似的原型的题目</h2><p><a href="https://vjudge.net/problem/POJ-2484" target="_blank" rel="external">A funny Game</a></p><h2 id="AC-code-2"><a href="#AC-code-2" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</div><div class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Alice\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Bob\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="威佐夫博弈"><a href="#威佐夫博弈" class="headerlink" title="威佐夫博弈"></a>威佐夫博弈</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">//#include &lt;cstdio&gt;</span></div><div class="line"><span class="comment">//#include &lt;cstring&gt;</span></div><div class="line"><span class="comment">//#include &lt;cmath&gt;</span></div><div class="line"><span class="comment">//#include &lt;algorithm&gt;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//using namespace std;</span></div><div class="line"><span class="comment">//const int maxn = 1e3+10;</span></div><div class="line"><span class="comment">//int mp[maxn][maxn];</span></div><div class="line"><span class="comment">//void dfs(int x, int y)&#123;</span></div><div class="line"><span class="comment">//    for(int i=1; i&lt;=x; i++)&#123;</span></div><div class="line"><span class="comment">//        if(mp[x-i][y] == 0)&#123;</span></div><div class="line"><span class="comment">//            mp[x][y] = 1;</span></div><div class="line"><span class="comment">//            return ;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    for(int i=1; i&lt;=y; i++)&#123;</span></div><div class="line"><span class="comment">//        if(mp[x][y-i] == 0)&#123;</span></div><div class="line"><span class="comment">//            mp[x][y] = 1;</span></div><div class="line"><span class="comment">//            return ;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    for(int i=1; i&lt;=min(x, y); i++)&#123;</span></div><div class="line"><span class="comment">//        if(mp[x-i][y-i] == 0)&#123;</span></div><div class="line"><span class="comment">//            mp[x][y] = 1;</span></div><div class="line"><span class="comment">//            return ;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    mp[x][y] = 0;</span></div><div class="line"><span class="comment">//    return ;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//int main()&#123;</span></div><div class="line"><span class="comment">//    int a, b;</span></div><div class="line"><span class="comment">//    while(cin&gt;&gt;a&gt;&gt;b)&#123;</span></div><div class="line"><span class="comment">//        mp[0][0] = 0;</span></div><div class="line"><span class="comment">//        for(int i=1; i&lt;=100; i++) mp[i][0] = mp[0][i] = 1;</span></div><div class="line"><span class="comment">//        for(int i=1; i&lt;=100; i++)&#123;</span></div><div class="line"><span class="comment">//            for(int j=1; j&lt;=100; j++)&#123;</span></div><div class="line"><span class="comment">//                dfs(i, j);</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//        for(int i=1; i&lt;=30; i++)&#123;</span></div><div class="line"><span class="comment">//            for(int j=1; j&lt;=30; j++)&#123;</span></div><div class="line"><span class="comment">//                printf("(%d, %d): %d\n", i, j, mp[i][j]);</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    return 0;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)&#123;</div><div class="line">        <span class="keyword">if</span>(a&gt;b) swap(a, b);</div><div class="line">        <span class="keyword">int</span> k = b-a;</div><div class="line">        <span class="keyword">int</span> l = <span class="keyword">int</span>(((<span class="built_in">sqrt</span>(<span class="number">5.0</span>)+<span class="number">1</span>)/<span class="number">2.0</span>)*k);</div><div class="line">        <span class="keyword">if</span>(l == a&amp;&amp;l+k == b)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="F取石子游戏"><a href="#F取石子游戏" class="headerlink" title="F取石子游戏"></a>F取石子游戏</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></div><div class="line"><span class="comment">//using namespace std;</span></div><div class="line"><span class="comment">//const int maxn = 1e3+10;</span></div><div class="line"><span class="comment">//int mp[maxn][maxn];</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//void dfs(int x, int y)&#123;</span></div><div class="line"><span class="comment">//    if(mp[x][y]!=-1) return;</span></div><div class="line"><span class="comment">//    for(int i=1; i&lt;=y; i++)&#123;</span></div><div class="line"><span class="comment">//        for(int j=i*2; j&gt;=1; j--)&#123;</span></div><div class="line"><span class="comment">//            if(mp[x-i][i*2] == 0)&#123;</span></div><div class="line"><span class="comment">//                //cout&lt;&lt;x-i&lt;&lt;" "&lt;&lt;j&lt;&lt;endl;</span></div><div class="line"><span class="comment">//                //cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl&lt;&lt;endl;</span></div><div class="line"><span class="comment">//                mp[x][y] = 1;</span></div><div class="line"><span class="comment">//                return;</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    mp[x][y] = 0;</span></div><div class="line"><span class="comment">//    return;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//int main()</span></div><div class="line"><span class="comment">//&#123;</span></div><div class="line"><span class="comment">//    memset(mp, -1, sizeof(mp));</span></div><div class="line"><span class="comment">//    mp[1][1] = 1;</span></div><div class="line"><span class="comment">//    mp[2][1] = 0;</span></div><div class="line"><span class="comment">//    mp[3][2] = 0;</span></div><div class="line"><span class="comment">//    mp[4][3] = 1;</span></div><div class="line"><span class="comment">//    for(int i=1; i&lt;=20; i++)&#123;</span></div><div class="line"><span class="comment">//        for(int j=i-1; j&gt;=1; j--)&#123;</span></div><div class="line"><span class="comment">//            dfs(i, j);</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    for(int i=1; i&lt;=20; i++)&#123;</span></div><div class="line"><span class="comment">//        cout&lt;&lt;i&lt;&lt;" "&lt;&lt;mp[i][i-1]&lt;&lt;endl;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    return 0;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> biao[<span class="number">100</span>];</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    biao[<span class="number">0</span>] = <span class="number">2</span>;</div><div class="line">    biao[<span class="number">1</span>] = <span class="number">3</span>;</div><div class="line">    s.clear();</div><div class="line">    s.insert(<span class="number">2</span>);</div><div class="line">    s.insert(<span class="number">3</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=<span class="number">45</span>; i++)&#123;</div><div class="line">        biao[i] = biao[i<span class="number">-1</span>]+biao[i<span class="number">-2</span>];</div><div class="line">        s.insert(biao[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    init();</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</div><div class="line">        <span class="keyword">if</span>(s.count(n) != <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Second win"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"First win"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>蓝书图论集合</title>
      <link href="/2018/05/16/%E8%93%9D%E4%B9%A6%E5%9B%BE%E8%AE%BA%E9%9B%86%E5%90%88/"/>
      <url>/2018/05/16/%E8%93%9D%E4%B9%A6%E5%9B%BE%E8%AE%BA%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<p>蓝书里面的图论的题目</p><a id="more"></a><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="telephone-line"><a href="#telephone-line" class="headerlink" title="telephone line"></a>telephone line</h1><p>二分加最短路<br>蓝书上面的二分总结的实在太好了<br>记住两种套路就可以了。</p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> G[maxn][maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v, weight;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v;</div><div class="line">    <span class="keyword">int</span> w;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> qnode &amp;a)<span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> w&gt;a.w;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; edge[maxn];</div><div class="line"><span class="keyword">int</span> n, p, k;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dij</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) dis[i] = INF;</div><div class="line">    priority_queue&lt;qnode&gt; pq;</div><div class="line">    <span class="keyword">while</span>(!pq.empty()) pq.pop();</div><div class="line">    pq.push(qnode&#123;<span class="number">1</span>, <span class="number">0</span>&#125;);</div><div class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!pq.empty())&#123;</div><div class="line">        qnode temp = pq.top();</div><div class="line">        pq.pop();</div><div class="line">        <span class="keyword">int</span> u = temp.v;</div><div class="line">        <span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</div><div class="line">        vis[u] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;edge[u].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = edge[u][i].v;</div><div class="line">            <span class="keyword">int</span> weight = edge[u][i].weight;</div><div class="line">            <span class="keyword">if</span>(!vis[v]&amp;&amp;dis[v]&gt;dis[u]+weight)&#123;</div><div class="line">                dis[v] = dis[u]+weight;</div><div class="line">                pq.push(qnode&#123;v, dis[v]&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//cout&lt;&lt;"test:"&lt;&lt;dis[n]&lt;&lt;endl;</span></div><div class="line">    <span class="keyword">return</span> dis[n];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) edge[i].clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(G[i][j]!=<span class="number">-1</span>&amp;&amp;G[i][j]&gt;mid)&#123;</div><div class="line">                edge[i].push_back(Edge&#123;j, <span class="number">1</span>&#125;);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(G[i][j]!=<span class="number">-1</span>)&#123;</div><div class="line">                edge[i].push_back(Edge&#123;j, <span class="number">0</span>&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = dij();</div><div class="line">    <span class="keyword">return</span> ans&lt;=k?<span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p&gt;&gt;k)&#123;</div><div class="line">        <span class="keyword">int</span> u, v, w;</div><div class="line">        <span class="built_in">memset</span>(G, <span class="number">-1</span>, <span class="keyword">sizeof</span>(G));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;p; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</div><div class="line">            G[u][v] = w;</div><div class="line">            G[v][u] = w;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> r = <span class="number">1e6</span>;</div><div class="line">        <span class="keyword">int</span> mid;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) edge[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(G[i][j]!=<span class="number">-1</span>)&#123;</div><div class="line">                    edge[i].push_back(Edge&#123;j, G[i][j]&#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> temp = dij();</div><div class="line">        <span class="keyword">if</span>(temp == INF)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(k == n<span class="number">-1</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">            mid = (l+r)/<span class="number">2</span>;</div><div class="line">            <span class="comment">//cout&lt;&lt;l&lt;&lt;" "&lt;&lt;mid&lt;&lt;" "&lt;&lt;r&lt;&lt;endl;</span></div><div class="line">            <span class="keyword">if</span>(judge(mid)) &#123;</div><div class="line">                <span class="comment">//ans = mid;</span></div><div class="line">                r = mid;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> l = mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;l&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="闭包问题"><a href="#闭包问题" class="headerlink" title="闭包问题"></a>闭包问题</h1><p>死活调不对。。。<br>先mark<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">30</span>;</div><div class="line"><span class="keyword">int</span> ll[maxn], rr[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn][maxn];</div><div class="line"><span class="keyword">int</span> d1[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&gt;b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> bb[maxn][maxn];</div><div class="line">    <span class="built_in">memset</span>(bb, <span class="number">0</span>, <span class="keyword">sizeof</span>(bb));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mid; i++)&#123;</div><div class="line">        bb[ll[i]][rr[i]] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">                bb[i][j] |= bb[i][k]&amp;bb[k][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(bb[i][j] == <span class="number">1</span>&amp;&amp;bb[j][i] == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge1</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> bb[maxn][maxn];</div><div class="line">    <span class="built_in">memset</span>(bb, <span class="number">0</span>, <span class="keyword">sizeof</span>(bb));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mid; i++)&#123;</div><div class="line">        bb[ll[i]][rr[i]] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">                bb[i][j] |= bb[i][k]&amp;bb[k][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(bb[i][j] == <span class="number">1</span>&amp;&amp;bb[j][i] == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(bb[i][j] == <span class="number">0</span>&amp;&amp;bb[j][i] == <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//ios::sync_with_stdio(false);</span></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&amp;&amp;n+m)&#123;</div><div class="line">        <span class="keyword">char</span> a, b;</div><div class="line">        getchar();</div><div class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%c&lt;%c"</span>, &amp;a, &amp;b);</div><div class="line">            getchar();</div><div class="line">            d[a-<span class="string">'A'</span>][b-<span class="string">'A'</span>] = <span class="number">1</span>;</div><div class="line">            ll[i] = a-<span class="string">'A'</span>;</div><div class="line">            rr[i] = b-<span class="string">'A'</span>;</div><div class="line">            <span class="comment">//cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;endl;</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n ;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                d1[i][j] = d[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                    d[i][j] |= d[i][k]&amp;d[k][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> type = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n ;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(d[i][j] == <span class="number">1</span>&amp;&amp;d[j][i] == <span class="number">1</span>)&#123;</div><div class="line">                    type = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(type == <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(type == <span class="number">-1</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n ;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(d[i][j] == <span class="number">0</span>&amp;&amp;d[j][i] == <span class="number">0</span>)&#123;</div><div class="line">                    type = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(type == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(type == <span class="number">-1</span>)&#123;</div><div class="line">            type = <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> tot[maxn];</div><div class="line">        <span class="built_in">memset</span>(tot, <span class="number">0</span>, <span class="keyword">sizeof</span>(tot));</div><div class="line">        <span class="keyword">if</span>(type == <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Sorted sequence cannot be determined.\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">int</span> l=<span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> r = <span class="number">26</span>;</div><div class="line">            <span class="keyword">int</span> mid;</div><div class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">                mid = (l+r)/<span class="number">2</span>;</div><div class="line">                <span class="keyword">if</span>(judge1(mid)) r = mid;</div><div class="line">                <span class="keyword">else</span> l = mid+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">if</span>(d[i][j] == <span class="number">1</span>)&#123;</div><div class="line">                        tot[i]++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Sorted sequence determined after %d relations: "</span>, l);</div><div class="line">            <span class="keyword">int</span> mx = <span class="number">-1</span>;</div><div class="line">            <span class="keyword">bool</span> vis[<span class="number">27</span>];</div><div class="line">            <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">                mx = <span class="number">-1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(!vis[j])&#123;</div><div class="line">                        mx = max(tot[j], mx);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(!vis[j]&amp;&amp;mx == tot[j])&#123;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"%c"</span>, j+<span class="string">'A'</span>);</div><div class="line">                        vis[j] = <span class="literal">true</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">".\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> l=<span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> r = <span class="number">26</span>;</div><div class="line">            <span class="keyword">int</span> mid=<span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">                mid = (l+r)/<span class="number">2</span>;</div><div class="line">                <span class="keyword">if</span>(judge(mid)) r = mid;</div><div class="line">                <span class="keyword">else</span> l = mid+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Inconsistency found after %d relations.\n"</span>, l);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="最优比率树"><a href="#最优比率树" class="headerlink" title="最优比率树"></a>最优比率树</h1><p>注意哪里需要优化，能先算出来的东西尽量提到外面，二分的时候里面尽量的不要有循环<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, h;</div><div class="line">&#125;node[maxn];</div><div class="line"><span class="keyword">double</span> G[maxn][maxn];</div><div class="line"><span class="keyword">double</span> chang[maxn][maxn];</div><div class="line"><span class="keyword">int</span> cost[maxn][maxn];</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">double</span> lowc[maxn];</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">prim</span><span class="params">(<span class="keyword">double</span> mid)</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    vis[<span class="number">0</span>] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++) lowc[i] = (cost[<span class="number">0</span>][i])-mid*chang[<span class="number">0</span>][i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">double</span> minc = INF;</div><div class="line">        <span class="keyword">int</span> p  = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;minc&gt;lowc[j])&#123;</div><div class="line">                minc = lowc[j];</div><div class="line">                p = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(p == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        ans += minc;</div><div class="line">        vis[p] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">            <span class="keyword">double</span> temp = cost[p][j]-mid*chang[p][j];</div><div class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;lowc[j]&gt;temp)&#123;</div><div class="line">                lowc[j] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//cout&lt;&lt;ans&lt;&lt;endl;</span></div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">double</span> mid)</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> ans = prim(mid);</div><div class="line">    <span class="keyword">return</span> ans&lt;<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)!=EOF&amp;&amp;n)&#123;</div><div class="line">        <span class="keyword">int</span> x, y, h;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;node[i].x, &amp;node[i].y, &amp;node[i].h);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> r = <span class="number">1e2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</div><div class="line">                chang[i][j] = chang[j][i] = <span class="built_in">sqrt</span>(<span class="number">1.0</span>*(node[i].x-node[j].x)*(node[i].x-node[j].x)+</div><div class="line">                            <span class="number">1.0</span>*(node[i].y-node[j].y)*(node[i].y-node[j].y));</div><div class="line">                cost[i][j] = cost[j][i] = <span class="built_in">abs</span>(node[i].h-node[j].h);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> l = <span class="number">0</span>;</div><div class="line">        <span class="keyword">double</span> mid;</div><div class="line">        <span class="keyword">while</span>(r-l&gt;<span class="number">1e-5</span>)&#123;</div><div class="line">            mid = (l+r)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(judge(mid)) r = mid;</div><div class="line">            <span class="keyword">else</span> l = mid;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.3f\n"</span>, mid);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="patrol"><a href="#patrol" class="headerlink" title="patrol"></a>patrol</h1><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>当k=1时，求树的直径然后减掉\(l-1\).<br>当k=2时，很简单，我们在做k=1之后把最长链上的边权全部修改为-1，再跑一遍最长链就可以了。可能有人会疑问，那-1的边又被选了那不是相当于还是选进去两次了吗？但是考虑第一次算这条边的时候加了一，第二次的时候加的是-1，相当于是这条边没有产生任何贡献。</p><p>还是好好学学别人的AC代码吧，自己果然是太弱了。</p><h2 id="还是怎么都调不对的code"><a href="#还是怎么都调不对的code" class="headerlink" title="还是怎么都调不对的code"></a>还是怎么都调不对的code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v;</div><div class="line">    <span class="keyword">int</span> weight;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; edge[maxn];</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) edge[i].clear();</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) dis[i] = -maxn<span class="number">-10</span>;</div><div class="line">    dis[s] = <span class="number">0</span>;</div><div class="line">    vis[s] = <span class="literal">true</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</div><div class="line">    <span class="keyword">int</span> p = <span class="number">-1</span>;</div><div class="line">    q.push(s);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;edge[u].size(); i++)&#123;</div><div class="line">            Edge e = edge[u][i];</div><div class="line">            <span class="keyword">int</span> v = e.v;</div><div class="line">            <span class="keyword">int</span> weight = e.weight;</div><div class="line">            <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(dis[v]&lt;dis[u]+weight)&#123;</div><div class="line">                    dis[v] = dis[u]+weight;</div><div class="line">                    vis[v] = <span class="literal">true</span>;</div><div class="line">                    q.push(v);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(ans&lt;dis[i])&#123;</div><div class="line">            p = i;</div><div class="line">            ans = dis[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(s == t)&#123;</div><div class="line">        ans.push(t);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;edge[s].size(); i++)&#123;</div><div class="line">        Edge e = edge[s][i];</div><div class="line">        <span class="keyword">int</span> v = e.v;</div><div class="line">        <span class="keyword">if</span>(v == p) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(dfs(v, t, s))&#123;</div><div class="line">            ans.push(s);</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> order[maxn];</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">int</span> u, v;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        edge[u].push_back(Edge&#123;v, <span class="number">1</span>&#125;);</div><div class="line">        edge[v].push_back(Edge&#123;u, <span class="number">1</span>&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> p = bfs(<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> q = bfs(p);</div><div class="line">    <span class="keyword">int</span> ans1 = dis[q];</div><div class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">2</span>*(n<span class="number">-1</span>)-(dis[q]<span class="number">-1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">while</span>(!ans.empty()) ans.pop();</div><div class="line">        dfs(q, p, <span class="number">-1</span>);</div><div class="line">        tot = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(!ans.empty())&#123;</div><div class="line">            order[tot++] = ans.top();</div><div class="line">            ans.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tot<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;edge[order[i]].size(); j++)&#123;</div><div class="line">                Edge &amp;temp = edge[order[i]][j];</div><div class="line">                <span class="keyword">if</span>(temp.v == order[i+<span class="number">1</span>])&#123;</div><div class="line">                    temp.weight = <span class="number">-1</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;edge[order[i+<span class="number">1</span>]].size(); k++)&#123;</div><div class="line">                        Edge &amp;temp1 = edge[order[i+<span class="number">1</span>]][k];</div><div class="line">                        <span class="keyword">if</span>(temp1.v == order[i])&#123;</div><div class="line">                            temp1.weight = <span class="number">-1</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> p1 = bfs(<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> q1 = bfs(p1);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">2</span>*(n<span class="number">-1</span>)-(ans1<span class="number">-1</span>)-(dis[q1]<span class="number">-1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cf483-div2</title>
      <link href="/2018/05/16/cf483-div2/"/>
      <url>/2018/05/16/cf483-div2/</url>
      <content type="html"><![CDATA[<p>cf补题</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>数学题<br>一开始是模拟进制转换，发现c++的精度不够，然后就用python写了一发，T。<br>最后列出来一个式子：\(\frac{b^x·p}{q}\)，若能整除，则为可以有限表示的数字。<br>然而，还是没有想到特例，gcd在除的时候会发生变化。</p><p>最后记得一定要关同步</p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">    ll p, q;</div><div class="line">    ll b;</div><div class="line">    <span class="keyword">while</span>(n--)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;p&gt;&gt;q&gt;&gt;b;</div><div class="line">        ll num = p/q;</div><div class="line">        p -= num*q;</div><div class="line">        ll com = __gcd(p, q);</div><div class="line">        p /= com;</div><div class="line">        q /= com;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line">        ll gc = __gcd(q, b);</div><div class="line">        <span class="keyword">if</span>(p == <span class="number">0</span>)&#123;</div><div class="line">            flag = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">while</span>(q%gc == <span class="number">0</span>&amp;&amp;gc!=<span class="number">1</span>)&#123;</div><div class="line">                q /= gc;</div><div class="line">                gc = __gcd(q, gc);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(q!=<span class="number">1</span>)&#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> flag = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!flag)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Infinite\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Finite\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>dp, 有点st表的感觉。<br>注意答案数组和记录数组的区别</p><h2 id="ac-code-1"><a href="#ac-code-1" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e3</span>+<span class="number">10</span>;</div><div class="line">ll num[maxn];</div><div class="line">ll dp[maxn][maxn];<span class="comment">//答案</span></div><div class="line">ll mem[maxn][maxn];<span class="comment">//记录合并区间的值</span></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;num[i];</div><div class="line">        dp[i][i] = num[i];</div><div class="line">        mem[i][i] = num[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">2</span>; l&lt;=n; l++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+l<span class="number">-1</span>&lt;=n; i++)&#123;</div><div class="line">            dp[i][i+l<span class="number">-1</span>] = max(mem[i][i+l<span class="number">-2</span>]^mem[i+<span class="number">1</span>][i+l<span class="number">-1</span>],</div><div class="line">                               max(dp[i][i+l<span class="number">-2</span>], dp[i+<span class="number">1</span>][i+l<span class="number">-1</span>]));</div><div class="line">            mem[i][i+l<span class="number">-1</span>] = mem[i][i+l<span class="number">-2</span>]^mem[i+<span class="number">1</span>][i+l<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> q;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;q;</div><div class="line">    <span class="keyword">int</span> ll, rr;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;q; i++)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;ll&gt;&gt;rr;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;dp[ll][rr]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cf-482 div2</title>
      <link href="/2018/05/15/cf-482-div2/"/>
      <url>/2018/05/15/cf-482-div2/</url>
      <content type="html"><![CDATA[<p>cf补题<br>我好想对一些特殊的条件的判断非常的不敏感，差点爆零。<br>特殊情况的判断一定要敏感！！！<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>找规律，偶数块除2，奇数块直接输出答案。<br>注意n=0时候的特判。。。hack场</p><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>还是没有注意到特殊边界的判断。。。<br>当n=1时，且美丽值已经达到最大的时候，最大的美丽值为len-1…<br>我真的没有想到这种特殊情况的判断啊。</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>x, y两端的点数相乘即可，用dfs来统计点的个数。<br>用了补的思想</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line">ll n, x, y;</div><div class="line"><span class="keyword">int</span> depth[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> temp = G[u][i];</div><div class="line">        <span class="keyword">if</span>(temp == v) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp == p) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            ans += dfs(temp, v, u);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(depth, <span class="number">0</span>, <span class="keyword">sizeof</span>(depth));</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    q.push(u);</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[temp].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[temp][i];</div><div class="line">            <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                depth[v] = depth[temp]+<span class="number">1</span>;</div><div class="line">                q.push(v);</div><div class="line">                vis[v] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;x&gt;&gt;y;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    ll num1 = dfs(x, y, <span class="number">-1</span>);</div><div class="line">    ll num2 = dfs(y, x, <span class="number">-1</span>);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;n*(n<span class="number">-1</span>)-(n-num1)*(n-num2)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kuangbin专题十---并查集</title>
      <link href="/2018/05/14/kuangbin%E4%B8%93%E9%A2%98%E5%8D%81-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2018/05/14/kuangbin%E4%B8%93%E9%A2%98%E5%8D%81-%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      <content type="html"><![CDATA[<p>并查集专题</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>模板题，我他妈的wa了一万发，后来发现有东西变化了。。。</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_fa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = x;</div><div class="line">    <span class="keyword">while</span>(x!=fa[x])&#123;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(a!=fa[a])&#123;</div><div class="line">        <span class="keyword">int</span> z = a;</div><div class="line">        a = fa[a];</div><div class="line">        fa[z] = x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">uni</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> fau = find_fa(u);</div><div class="line">    <span class="keyword">int</span> fav = find_fa(v);</div><div class="line">    <span class="keyword">if</span>(fau!=fav)fa[fau] = fav;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) fa[i] = i;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)!=EOF&amp;&amp;(n||m))&#123;</div><div class="line">        <span class="keyword">int</span> k;</div><div class="line">        init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;k; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[j]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;k; j++)&#123;</div><div class="line">                uni(num[<span class="number">0</span>], num[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            find_fa(i);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//这个一开始写在了前面，可能会被修改。。。所以一直错</span></div><div class="line">        <span class="keyword">int</span> father = fa[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(fa[i] == father) ans++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="E食物链"><a href="#E食物链" class="headerlink" title="E食物链"></a>E食物链</h1><p>有两个教训：</p><ol><li>只有一组数据的时候，不要用eof来判断</li><li>老老实实用scanf来读取数据，关同步照样会超时的。</li></ol><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>划分为三个集合，若有关系，那么就在集合之间连一条边。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> fa[maxn*<span class="number">3</span>+<span class="number">10</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_fa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = x;</div><div class="line">    <span class="keyword">while</span>(x!=fa[x])&#123;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(a!=fa[a])&#123;</div><div class="line">        <span class="keyword">int</span> z = a;</div><div class="line">        a = fa[a];</div><div class="line">        fa[z] = x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">uni</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> fau = find_fa(u);</div><div class="line">    <span class="keyword">int</span> fav = find_fa(v);</div><div class="line">    fa[fau] = fav;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn*<span class="number">3</span>; i++) fa[i] = i;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> fau = find_fa(u);</div><div class="line">    <span class="keyword">int</span> fav = find_fa(v);</div><div class="line">    <span class="keyword">return</span> fau==fav?<span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</div><div class="line">    &#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> op, a, b;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;op&gt;&gt;a&gt;&gt;b;</div><div class="line">            <span class="keyword">if</span>(a&gt;n||b&gt;n)&#123;</div><div class="line">                ans++;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>&amp;&amp;a == b)&#123;</div><div class="line">                ans++;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(same(a, b+n)||same(a, b+<span class="number">2</span>*n))&#123;</div><div class="line">                    ans++;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                uni(a, b);</div><div class="line">                uni(a+n, b+n);</div><div class="line">                uni(a+<span class="number">2</span>*n, b+<span class="number">2</span>*n);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(same(a, b)||same(a, b+<span class="number">2</span>*n))&#123;</div><div class="line">                    ans++;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                uni(a, b+n);</div><div class="line">                uni(a+n, b+<span class="number">2</span>*n);</div><div class="line">                uni(a+<span class="number">2</span>*n, b);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java大数计算</title>
      <link href="/2018/05/14/java%E5%A4%A7%E6%95%B0%E8%AE%A1%E7%AE%97/"/>
      <url>/2018/05/14/java%E5%A4%A7%E6%95%B0%E8%AE%A1%E7%AE%97/</url>
      <content type="html"><![CDATA[<p>java大数计算<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><a href="https://blog.csdn.net/morejarphone/article/details/51884888" target="_blank" rel="external">学习的博客</a></p><h1 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h1><p>有几点需要注意的：</p><ol><li>程序的主类必须命名为<code>Main</code></li><li>println自动会有回车，prinf没有回车，要加<code>\r\n</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package new_start;</span></div><div class="line"><span class="keyword">import</span> java.math.BigInteger;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">import</span> java.math.BigDecimal;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">Scanner <span class="built_in">cin</span> = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">BigInteger f1, f2, f3, f4, ans;</div><div class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>.hasNext()) &#123;</div><div class="line">n = <span class="built_in">cin</span>.nextInt();</div><div class="line">f1 = BigInteger.valueOf(<span class="number">1</span>);</div><div class="line">f2 = f1;</div><div class="line">f3 = f1;</div><div class="line">f4 = f1;</div><div class="line">ans = f1;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>; i&lt;=n; i++) &#123;</div><div class="line">ans = f1.add(f2.add(f3).add(f4));</div><div class="line">f1 = f2;</div><div class="line">f2 = f3;</div><div class="line">f3 = f4;</div><div class="line">f4 = ans;</div><div class="line">&#125;</div><div class="line">System.out.println(ans);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h1><p>类似的操作</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java大数计算 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5.13训练补题</title>
      <link href="/2018/05/13/5-13%E8%AE%AD%E7%BB%83%E8%A1%A5%E9%A2%98/"/>
      <url>/2018/05/13/5-13%E8%AE%AD%E7%BB%83%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>心情不好<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><a href="https://vjudge.net/contest/228884" target="_blank" rel="external">区域赛</a></p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>暴力，用set维护T了，迭代的速度确实很慢。<br>遍历3e7个数字，数组和迭代器所用的时间相差的常数还是非常大的：<br>0.215s<br>1.045s</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e7</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">clock_t</span> start, finish;</div><div class="line">    start = clock();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)&#123;</div><div class="line">        num[i] = i;</div><div class="line">    &#125;</div><div class="line">    finish = clock();</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">1.0</span>*(finish-start)/CLOCKS_PER_SEC&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">    s.clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)&#123;</div><div class="line">        s.insert(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> temp;</div><div class="line">    start = clock();</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = s.begin(); it!=s.end(); it++)&#123;</div><div class="line">        temp = *it;</div><div class="line">    &#125;</div><div class="line">    finish = clock();</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">1.0</span>*(finish-start)/CLOCKS_PER_SEC&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mx = <span class="number">5e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> ll maxn = <span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    ll x, y;</div><div class="line">    <span class="keyword">bool</span> tag;</div><div class="line">&#125;node[Mx];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</div><div class="line">        ll a, b, c;</div><div class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</div><div class="line">            <span class="keyword">if</span>(a == <span class="number">1</span>)&#123;</div><div class="line">                node[tot].x = b;</div><div class="line">                node[tot].y = c;</div><div class="line">                node[tot++].tag = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">-1</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tot; i++)&#123;</div><div class="line">                    <span class="keyword">if</span>(node[i].x == b&amp;&amp;node[i].y == c&amp;&amp;node[i].tag)&#123;</div><div class="line">                        node[i].tag = <span class="literal">false</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                ll ans = -maxn*maxn*<span class="number">2</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tot; i++)&#123;</div><div class="line">                    <span class="keyword">if</span>(node[i].tag == <span class="literal">false</span>) <span class="keyword">continue</span>;</div><div class="line">                    ll temp = node[i].x*b+node[i].y*c;</div><div class="line">                    ans = max(ans, temp);</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>用一条对角线表示一个矩形<br>注意会有回字形的情况！<br>注意两个矩形的边不能重叠</p><h2 id="AC-code-1"><a href="#AC-code-1" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">35</span>;</div><div class="line"><span class="keyword">int</span> x[maxn];</div><div class="line"><span class="keyword">int</span> y[maxn];</div><div class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> b[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">exist</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">    <span class="keyword">bool</span> vis[<span class="number">10</span>];</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> x1 = x[i];</div><div class="line">        <span class="keyword">int</span> y1 = y[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">8</span>; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(x1 == a[j]&amp;&amp;y1 == b[j])&#123;</div><div class="line">                vis[j] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">8</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[i]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cross</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x_mi = min(a[<span class="number">5</span>], a[<span class="number">7</span>]);</div><div class="line">    <span class="keyword">int</span> x_mx = max(a[<span class="number">5</span>], a[<span class="number">7</span>]);</div><div class="line">    <span class="keyword">int</span> y_mi = min(b[<span class="number">5</span>], b[<span class="number">7</span>]);</div><div class="line">    <span class="keyword">int</span> y_mx = max(b[<span class="number">5</span>], b[<span class="number">7</span>]);</div><div class="line">    <span class="keyword">bool</span> flag1 = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">4</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i]&gt;x_mi&amp;&amp;a[i]&lt;x_mx&amp;&amp;b[i]&gt;y_mi&amp;&amp;b[i]&lt;y_mx)&#123;</div><div class="line">            flag1 = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> flag2 = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">4</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i]&lt;x_mi||a[i]&gt;x_mx||b[i]&lt;y_mi||b[i]&gt;y_mx)&#123;</div><div class="line">            flag2 = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(flag1&amp;&amp;flag2) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">touch</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x_mi = min(a[<span class="number">5</span>], a[<span class="number">7</span>]);</div><div class="line">    <span class="keyword">int</span> x_mx = max(a[<span class="number">5</span>], a[<span class="number">7</span>]);</div><div class="line">    <span class="keyword">int</span> y_mi = min(b[<span class="number">5</span>], b[<span class="number">7</span>]);</div><div class="line">    <span class="keyword">int</span> y_mx = max(b[<span class="number">5</span>], b[<span class="number">7</span>]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">4</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(b[i] == y_mi||b[i] == y_mx)&#123;</div><div class="line">            <span class="keyword">if</span>(a[i]&gt;=x_mi&amp;&amp;a[i]&lt;=x_mx) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a[i] == x_mi||a[i] == x_mx)&#123;</div><div class="line">            <span class="keyword">if</span>(b[i]&gt;=y_mi&amp;&amp;b[i]&lt;=y_mx) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x_mi = min(a[<span class="number">5</span>], a[<span class="number">7</span>]);</div><div class="line">    <span class="keyword">int</span> x_mx = max(a[<span class="number">5</span>], a[<span class="number">7</span>]);</div><div class="line">    <span class="keyword">int</span> y_mi = min(b[<span class="number">5</span>], b[<span class="number">7</span>]);</div><div class="line">    <span class="keyword">int</span> y_mx = max(b[<span class="number">5</span>], b[<span class="number">7</span>]);</div><div class="line">    <span class="keyword">int</span> x_mi1 = min(a[<span class="number">1</span>], a[<span class="number">3</span>]);</div><div class="line">    <span class="keyword">int</span> x_mx1 = max(a[<span class="number">1</span>], a[<span class="number">3</span>]);</div><div class="line">    <span class="keyword">int</span> y_mi1 = min(b[<span class="number">1</span>], b[<span class="number">3</span>]);</div><div class="line">    <span class="keyword">int</span> y_mx1 = max(b[<span class="number">1</span>], b[<span class="number">3</span>]);</div><div class="line">    <span class="keyword">if</span>(x_mi&lt;x_mi1&amp;&amp;x_mx&gt;x_mx1)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">4</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(a[i]&lt;=x_mi||a[i]&gt;=x_mx||b[i]&lt;=y_mi||b[i]&gt;=y_mx)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x_mi&gt;x_mi1&amp;&amp;x_mx&lt;x_mx1)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>; i&lt;=<span class="number">8</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(a[i]&lt;=x_mi1||a[i]&gt;=x_mx1||b[i]&lt;=y_mi1||b[i]&gt;=y_mx1)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(a[<span class="number">1</span>] == a[<span class="number">3</span>]||b[<span class="number">1</span>] == b[<span class="number">3</span>]||a[<span class="number">5</span>] == a[<span class="number">7</span>]||b[<span class="number">5</span>] == b[<span class="number">7</span>])</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>; k&lt;=n; k++)&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> m = k+<span class="number">1</span>; m&lt;=n; m++)&#123;</div><div class="line">                        a[<span class="number">1</span>] = x[i], b[<span class="number">1</span>] = y[i];</div><div class="line">                        a[<span class="number">2</span>] = x[i], b[<span class="number">2</span>] = y[j];</div><div class="line">                        a[<span class="number">3</span>] = x[j], b[<span class="number">3</span>] = y[j];</div><div class="line">                        a[<span class="number">4</span>] = x[j], b[<span class="number">4</span>] = y[i];</div><div class="line">                        a[<span class="number">5</span>] = x[k], b[<span class="number">5</span>] = y[k];</div><div class="line">                        a[<span class="number">6</span>] = x[k], b[<span class="number">6</span>] = y[m];</div><div class="line">                        a[<span class="number">7</span>] = x[m], b[<span class="number">7</span>] = y[m];</div><div class="line">                        a[<span class="number">8</span>] = x[m], b[<span class="number">8</span>] = y[k];</div><div class="line">                        <span class="keyword">if</span>(!judge()) <span class="keyword">continue</span>;</div><div class="line">                        <span class="keyword">if</span>(!exist()) <span class="keyword">continue</span>;</div><div class="line">                        <span class="keyword">if</span>(cross()) <span class="keyword">continue</span>;</div><div class="line">                        <span class="keyword">if</span>(touch()) <span class="keyword">continue</span>;</div><div class="line">                        <span class="keyword">if</span>(in())&#123;</div><div class="line">                            <span class="keyword">int</span> area1 = <span class="built_in">abs</span>(a[<span class="number">1</span>]-a[<span class="number">3</span>])*<span class="built_in">abs</span>(b[<span class="number">1</span>]-b[<span class="number">3</span>]);</div><div class="line">                            <span class="keyword">int</span> area2 = <span class="built_in">abs</span>(a[<span class="number">5</span>]-a[<span class="number">7</span>])*<span class="built_in">abs</span>(b[<span class="number">5</span>]-b[<span class="number">7</span>]);</div><div class="line">                            area1 = max(area1, area2);</div><div class="line">                            ans = max(ans, area1);</div><div class="line">                            <span class="comment">//cout&lt;&lt;"haha"&lt;&lt;endl;</span></div><div class="line">                            <span class="keyword">continue</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">int</span> area1 = <span class="built_in">abs</span>(a[<span class="number">1</span>]-a[<span class="number">3</span>])*<span class="built_in">abs</span>(b[<span class="number">1</span>]-b[<span class="number">3</span>]);</div><div class="line">                        <span class="keyword">int</span> area2 = <span class="built_in">abs</span>(a[<span class="number">5</span>]-a[<span class="number">7</span>])*<span class="built_in">abs</span>(b[<span class="number">5</span>]-b[<span class="number">7</span>]);</div><div class="line">                        <span class="comment">//cout&lt;&lt;ans&lt;&lt;"---"&lt;&lt;endl;</span></div><div class="line">                        ans = max(ans, area1+area2);</div><div class="line">                        <span class="comment">//cout&lt;&lt;ans&lt;&lt;"---"&lt;&lt;endl;</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ans == <span class="number">-1</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"imp\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>计算几何，求<code>一个圆和一个多边形面积的交</code><br>并不会<br>模板题</p><h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><p>大霸用了状压dp,我看题解直接先对边进行排序，然后从小边向后面不断的组成三角就行了。虽然并不懂原理</p><h1 id="K"><a href="#K" class="headerlink" title="K"></a>K</h1><p>最短路的模板题，我第三个小时才签出来。。。<br>面壁思过</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">35</span>;</div><div class="line"><span class="keyword">int</span> G[maxn][maxn];</div><div class="line"><span class="keyword">int</span> G1[maxn][maxn];</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;maxn; j++)&#123;</div><div class="line">            G[i][j] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dij</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) dis[i] = INF;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> Min_dis = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp;Min_dis&gt;dis[j])&#123;</div><div class="line">                u = j;</div><div class="line">                Min_dis = dis[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span>(u == n) <span class="keyword">return</span> dis[n];</div><div class="line">        vis[u] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;G1[u][j]!=<span class="number">-1</span>)&#123;</div><div class="line">                dis[j] = min(dis[j], dis[u]+G1[u][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dis[n] == INF) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> dis[n];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&amp;&amp;n+m!=<span class="number">0</span>)&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> u, v,weight;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;weight;</div><div class="line">            G[u][v] = weight;</div><div class="line">            G[v][u] = weight;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)&#123;</div><div class="line">                    G1[j][k] = G[j][k];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">                G1[i][j] = <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">                G1[j][i] = <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> temp = dij();</div><div class="line">            <span class="keyword">if</span>(temp == <span class="number">-1</span>)&#123;</div><div class="line">                flag = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                ans = max(ans, temp);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flag)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Inf"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ans == <span class="number">-1</span>)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Inf"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 补题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ex-kmp</title>
      <link href="/2018/05/04/ex-kmp/"/>
      <url>/2018/05/04/ex-kmp/</url>
      <content type="html"><![CDATA[<p>ex-kmp<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br>一个简单的教程<br><a href="https://61mon.com/articles/2018/04/extended-kmp-algorithm.html" target="_blank" rel="external">ex-kmp</a><br>只要求解的问题是：<br>两个串S，T;<br>问S的后缀集合和T的前缀相等的最长值</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      
    </entry>
    
    <entry>
      <title>STL一些容器的使用</title>
      <link href="/2018/05/04/STL%E4%B8%80%E4%BA%9B%E5%AE%B9%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/05/04/STL%E4%B8%80%E4%BA%9B%E5%AE%B9%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>一些高级的STL使用</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><p><a href="http://en.cppreference.com/w/cpp/container" target="_blank" rel="external">STL容器的官方文档</a></p><h1 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h1><p>插入的元素可以重复，注意在循环的时候，如果有移除元素的操作（erase）,那么it迭代的长度会改变。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; ms;</div><div class="line">ms.insert(<span class="number">3</span>);</div><div class="line">ms.insert(<span class="number">3</span>);</div><div class="line">ms.insert(<span class="number">1</span>);</div><div class="line">ms.insert(<span class="number">4</span>);</div><div class="line"><span class="comment">//erase(i)会返回移除的数字的个数，并且multiset的长度会发生改变</span></div><div class="line"><span class="keyword">for</span>(<span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;::iterator it = ms.begin(); it!=ms.end(); it++)&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ms.erase(<span class="number">3</span>)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ms.count(<span class="number">3</span>)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h1><p>直接看后面的代码，申请的大小为位。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">bitset</span>&lt;33&gt; var;</div><div class="line">var[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;var&lt;&lt;<span class="built_in">endl</span>;</div></pre></td></tr></table></figure></p><h1 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h1><p>应用的举例：ip对用多个url<br>mp.count(var), 是键var有多少个不同的值，若要打印出键var所有的值，要用lower_bound()和upper_bound()相结合。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line">mp.insert(make_pair(<span class="number">1</span>, <span class="number">2</span>));</div><div class="line"><span class="comment">//cout&lt;&lt;mp.count(1)&lt;&lt;endl;</span></div><div class="line">mp.insert(make_pair(<span class="number">1</span>, <span class="number">3</span>));</div><div class="line"><span class="comment">//cout&lt;&lt;mp.count(1)&lt;&lt;endl;</span></div><div class="line"><span class="comment">//mp.insert(make_pair(2, 4));</span></div><div class="line"><span class="comment">//查询一个区间的有相同的键的所有的值</span></div><div class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = mp.lower_bound(<span class="number">1</span>);</div><div class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it1 = mp.lower_bound(<span class="number">2</span>);</div><div class="line"><span class="keyword">while</span>(it!=it1)&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;it-&gt;second&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    it++;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>c++中进制的显示</title>
      <link href="/2018/05/03/c-%E4%B8%AD%E8%BF%9B%E5%88%B6%E7%9A%84%E6%98%BE%E7%A4%BA/"/>
      <url>/2018/05/03/c-%E4%B8%AD%E8%BF%9B%E5%88%B6%E7%9A%84%E6%98%BE%E7%A4%BA/</url>
      <content type="html"><![CDATA[<p>进制数的便捷的显示，而不是自己手动的模拟输出。</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">bitset</span>&lt;<span class="keyword">sizeof</span>(<span class="keyword">int</span>)&gt; (<span class="number">15</span>)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;hex&lt;&lt;<span class="number">15</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;dec&lt;&lt;<span class="number">15</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;oct&lt;&lt;<span class="number">15</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">char</span> str[<span class="number">255</span>];</div><div class="line">    <span class="keyword">int</span> num = <span class="number">15</span>;</div><div class="line">    <span class="comment">//这个函数是任意进制的转换orz, 只要改变第三个参数就可以了</span></div><div class="line">    itoa(num, str, <span class="number">16</span>);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;str;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>FFT</title>
      <link href="/2018/05/03/FFT/"/>
      <url>/2018/05/03/FFT/</url>
      <content type="html"><![CDATA[<p>快速计算多项式的乘法<br>个人感觉算法导论上面的知识的体系比较的详细，当然本文也会推荐几个学习的连接，感觉还是会板子就好了，不要太注重细节。<br><a id="more"></a><br><a href="https://blog.csdn.net/acdreamers/article/details/39005227" target="_blank" rel="external">acdreamer</a><br><a href="https://blog.csdn.net/acdreamers/article/details/39026505" target="_blank" rel="external">多项式乘法的终极版</a><br><a href="https://blog.csdn.net/ggn_2015/article/details/68922404" target="_blank" rel="external">FFT详解</a></p><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>多项式的乘法其实就是卷积的计算：<br>example:<br>\((x^3+3x^2+2x+4)(x^2+3x+3) = \).<br>我们可以手动的计算。<br>但是我们还可以卷积进行计算。<br>将系数表示出来:<br>\((1 3 2 4)*(1 3 3)\), 按照普通的卷积的计算的方式，先翻转，然后就行移动求和就行了。<br>然而可以参考知乎大佬的文章，就会发现一个特别简单的计算离散卷积的方法。<br>（此处有公式）<br>最后算出来的结果，和模拟手算算出来的结果一致。(1 6 14 19 18 12).</p><h2 id="使用Python进行验证"><a href="#使用Python进行验证" class="headerlink" title="使用Python进行验证"></a>使用Python进行验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">x = np.array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>])</div><div class="line">y = np.array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>])</div><div class="line"><span class="keyword">import</span> scipy.signal</div><div class="line">scipy.signal.convolve(x, y)</div><div class="line"></div><div class="line"><span class="comment">#输出</span></div><div class="line">Out[<span class="number">7</span>]: array([ <span class="number">1</span>,  <span class="number">6</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">18</span>, <span class="number">12</span>])</div></pre></td></tr></table></figure><h1 id="多项式的乘法"><a href="#多项式的乘法" class="headerlink" title="多项式的乘法"></a>多项式的乘法</h1><p>比如上面的例子：<br>输入：<br>4 3<br>1 3 2 4<br>1 3 3<br>输出：<br>1 6 14 19 18 12<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;complex&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; cd;<span class="comment">//复数类的定义</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxl=<span class="number">2094153</span>;<span class="comment">//nlogn的最大长度(来自leo学长的博客)</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="number">3.14159265358979</span>;<span class="comment">//圆周率,不解释</span></div><div class="line"></div><div class="line">cd a[maxl],b[maxl];<span class="comment">//用于储存变换的中间结果</span></div><div class="line"><span class="keyword">int</span> rev[maxl];<span class="comment">//用于储存二进制反转的结果</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrev</span><span class="params">(<span class="keyword">int</span> bit)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;bit);i++)&#123;<span class="comment">//高位决定二进制数的大小</span></div><div class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</div><div class="line">    &#125;<span class="comment">//能保证(x&gt;&gt;1)&lt;x,满足递推性质</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(cd* a,<span class="keyword">int</span> n,<span class="keyword">int</span> dft)</span></span>&#123;<span class="comment">//变换主要过程</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//按照二进制反转</span></div><div class="line">        <span class="keyword">if</span>(i&lt;rev[i])<span class="comment">//保证只把前面的数和后面的数交换,(否则数组会被翻回来)</span></div><div class="line">            swap(a[i],a[rev[i]]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> step=<span class="number">1</span>;step&lt;n;step&lt;&lt;=<span class="number">1</span>)&#123;<span class="comment">//枚举步长的一半</span></div><div class="line">        cd wn=<span class="built_in">exp</span>(cd(<span class="number">0</span>,dft*PI/step));<span class="comment">//计算单位复根</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j+=step&lt;&lt;<span class="number">1</span>)&#123;<span class="comment">//对于每一块</span></div><div class="line">            <span class="function">cd <span class="title">wnk</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;<span class="comment">//!!每一块都是一个独立序列,都是以零次方位为起始的</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;j+step;k++)&#123;<span class="comment">//蝴蝶操作处理这一块</span></div><div class="line">                cd x=a[k];</div><div class="line">                cd y=wnk*a[k+step];</div><div class="line">                a[k]=x+y;</div><div class="line">                a[k+step]=x-y;</div><div class="line">                wnk*=wn;<span class="comment">//计算下一次的复根</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dft==<span class="number">-1</span>)&#123;<span class="comment">//如果是反变换,则要将序列除以n</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">            a[i]/=n;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> output[maxl];</div><div class="line"><span class="keyword">char</span> s1[maxl],s2[maxl];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n1, n2;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n1, &amp;n2);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n1<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;a[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n2<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;b[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">2</span>;<span class="comment">//2的幂次</span></div><div class="line">    <span class="keyword">int</span> bit = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(bit=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;bit)&lt;n1+n2<span class="number">-1</span>;bit++)&#123;</div><div class="line">        s&lt;&lt;=<span class="number">1</span>;<span class="comment">//找到第一个二的整数次幂使得其可以容纳这两个数的乘积</span></div><div class="line">    &#125;</div><div class="line">    getrev(bit);fft(a,s,<span class="number">1</span>);fft(b,s,<span class="number">1</span>);<span class="comment">//dft</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s;i++)a[i]*=b[i];<span class="comment">//对应相乘</span></div><div class="line">    fft(a,s,<span class="number">-1</span>);<span class="comment">//idft</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s;i++)&#123;<span class="comment">//还原成十进制数</span></div><div class="line">        output[i]+=(<span class="keyword">int</span>)(a[i].real()+<span class="number">0.5</span>);<span class="comment">//注意精度误差</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i=n1+n2;!output[i]&amp;&amp;i&gt;=<span class="number">0</span>;i--);<span class="comment">//去掉前导零</span></div><div class="line">    <span class="keyword">if</span>(i==<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"0"</span>);<span class="comment">//特判长度为0的情况</span></div><div class="line">    <span class="keyword">for</span>(;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//输出这个十进制数</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,output[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="大数的乘法"><a href="#大数的乘法" class="headerlink" title="大数的乘法"></a>大数的乘法</h1><p>输入两个大数，然后输出乘法的结果<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;complex&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; cd;<span class="comment">//复数类的定义</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxl=<span class="number">2094153</span>;<span class="comment">//nlogn的最大长度(来自leo学长的博客)</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="number">3.14159265358979</span>;<span class="comment">//圆周率,不解释</span></div><div class="line"></div><div class="line">cd a[maxl],b[maxl];<span class="comment">//用于储存变换的中间结果</span></div><div class="line"><span class="keyword">int</span> rev[maxl];<span class="comment">//用于储存二进制反转的结果</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrev</span><span class="params">(<span class="keyword">int</span> bit)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;bit);i++)&#123;<span class="comment">//高位决定二进制数的大小</span></div><div class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</div><div class="line">    &#125;<span class="comment">//能保证(x&gt;&gt;1)&lt;x,满足递推性质</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(cd* a,<span class="keyword">int</span> n,<span class="keyword">int</span> dft)</span></span>&#123;<span class="comment">//变换主要过程</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//按照二进制反转</span></div><div class="line">        <span class="keyword">if</span>(i&lt;rev[i])<span class="comment">//保证只把前面的数和后面的数交换,(否则数组会被翻回来)</span></div><div class="line">            swap(a[i],a[rev[i]]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> step=<span class="number">1</span>;step&lt;n;step&lt;&lt;=<span class="number">1</span>)&#123;<span class="comment">//枚举步长的一半</span></div><div class="line">        cd wn=<span class="built_in">exp</span>(cd(<span class="number">0</span>,dft*PI/step));<span class="comment">//计算单位复根</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j+=step&lt;&lt;<span class="number">1</span>)&#123;<span class="comment">//对于每一块</span></div><div class="line">            <span class="function">cd <span class="title">wnk</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;<span class="comment">//!!每一块都是一个独立序列,都是以零次方位为起始的</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;j+step;k++)&#123;<span class="comment">//蝴蝶操作处理这一块</span></div><div class="line">                cd x=a[k];</div><div class="line">                cd y=wnk*a[k+step];</div><div class="line">                a[k]=x+y;</div><div class="line">                a[k+step]=x-y;</div><div class="line">                wnk*=wn;<span class="comment">//计算下一次的复根</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dft==<span class="number">-1</span>)&#123;<span class="comment">//如果是反变换,则要将序列除以n</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">            a[i]/=n;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> output[maxl];</div><div class="line"><span class="keyword">char</span> s1[maxl],s2[maxl];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1,s2);<span class="comment">//读入两个数</span></div><div class="line">    <span class="keyword">int</span> l1=<span class="built_in">strlen</span>(s1),l2=<span class="built_in">strlen</span>(s2);<span class="comment">//就算"次数界"</span></div><div class="line">    <span class="keyword">int</span> bit=<span class="number">1</span>,s=<span class="number">2</span>;<span class="comment">//s表示分割之前整块的长度</span></div><div class="line">    <span class="keyword">for</span>(bit=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;bit)&lt;l1+l2<span class="number">-1</span>;bit++)&#123;</div><div class="line">        s&lt;&lt;=<span class="number">1</span>;<span class="comment">//找到第一个二的整数次幂使得其可以容纳这两个数的乘积</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l1;i++)&#123;<span class="comment">//第一个数装入a</span></div><div class="line">        a[i]=(<span class="keyword">double</span>)(s1[l1-i<span class="number">-1</span>]-<span class="string">'0'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l2;i++)&#123;<span class="comment">//第二个数装入b</span></div><div class="line">        b[i]=(<span class="keyword">double</span>)(s2[l2-i<span class="number">-1</span>]-<span class="string">'0'</span>);</div><div class="line">    &#125;</div><div class="line">    getrev(bit);fft(a,s,<span class="number">1</span>);fft(b,s,<span class="number">1</span>);<span class="comment">//dft</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s;i++)a[i]*=b[i];<span class="comment">//对应相乘</span></div><div class="line">    fft(a,s,<span class="number">-1</span>);<span class="comment">//idft</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s;i++)&#123;<span class="comment">//还原成十进制数</span></div><div class="line">        output[i]+=(<span class="keyword">int</span>)(a[i].real()+<span class="number">0.5</span>);<span class="comment">//注意精度误差</span></div><div class="line">        output[i+<span class="number">1</span>]+=output[i]/<span class="number">10</span>;</div><div class="line">        output[i]%=<span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i=l1+l2;!output[i]&amp;&amp;i&gt;=<span class="number">0</span>;i--);<span class="comment">//去掉前导零</span></div><div class="line">    <span class="keyword">if</span>(i==<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"0"</span>);<span class="comment">//特判长度为0的情况</span></div><div class="line">    <span class="keyword">for</span>(;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//输出这个十进制数</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,output[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> FFT-&gt;DFT\IDFT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树链剖分</title>
      <link href="/2018/05/02/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2018/05/02/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      <content type="html"><![CDATA[<p>2018年6月13日12:55:26突然更新<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br>学习的博客<br><a href="http://www.cnblogs.com/BLADEVIL/p/3479713.html" target="_blank" rel="external">树链剖分</a></p><h1 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h1><p><a href="https://vjudge.net/problem/SPOJ-QTREE" target="_blank" rel="external">QTREE</a></p><h2 id="ac-code"><a href="#ac-code" class="headerlink" title="ac code"></a>ac code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, next;</div><div class="line">&#125;edge[maxn&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> tot, head[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    edge[tot].to = v;</div><div class="line">    edge[tot].next = head[u];</div><div class="line">    head[u] = tot++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> pos;</div><div class="line"><span class="keyword">int</span> top[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> deep[maxn];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> rp[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">    tot = <span class="number">0</span>;</div><div class="line">    pos = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(son, <span class="number">-1</span>, <span class="keyword">sizeof</span>(son));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    deep[u] = d;</div><div class="line">    fa[u] = pre;</div><div class="line">    num[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; ~i; i = edge[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].to;</div><div class="line">        <span class="keyword">if</span>(v!=pre)&#123;</div><div class="line">            dfs1(v, u, d+<span class="number">1</span>);</div><div class="line">            num[u] += num[v];</div><div class="line">            <span class="keyword">if</span>(son[u] == <span class="number">-1</span>||num[v]&gt;num[son[u]])&#123;</div><div class="line">                son[u] = v;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getpos</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> sp)</span></span>&#123;</div><div class="line">    top[u] = sp;</div><div class="line">    p[u] = pos++;</div><div class="line">    rp[p[u]] = u;</div><div class="line">    <span class="keyword">if</span>(son[u] == <span class="number">-1</span>) <span class="keyword">return</span>;</div><div class="line">    getpos(son[u], sp);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; ~i; i = edge[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].to;</div><div class="line">        <span class="keyword">if</span>(v!=son[u]&amp;&amp;v!=fa[u])&#123;</div><div class="line">            getpos(v, v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> Max;</div><div class="line">&#125;node[maxn&lt;&lt;<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    node[rt].l = l;</div><div class="line">    node[rt].r = r;</div><div class="line">    node[rt].Max = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</div><div class="line">    build(rt&lt;&lt;<span class="number">1</span>, l, mid);</div><div class="line">    build((rt&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>, mid+<span class="number">1</span>, r);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</div><div class="line">    node[rt].Max = max(node[rt&lt;&lt;<span class="number">1</span>].Max, node[(rt&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].Max);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> k, <span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(node[rt].l == k&amp;&amp;node[rt].r == k)&#123;</div><div class="line">        node[rt].Max = val;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = (node[rt].l+node[rt].r)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(k&lt;=mid) update(rt&lt;&lt;<span class="number">1</span>, k, val);</div><div class="line">    <span class="keyword">else</span> update((rt&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>, k, val);</div><div class="line">    push_up(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(node[rt].l == l&amp;&amp;node[rt].r == r)&#123;</div><div class="line">        <span class="keyword">return</span> node[rt].Max;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = (node[rt].l+node[rt].r)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(r&lt;=mid)<span class="keyword">return</span> query(rt&lt;&lt;<span class="number">1</span>, l, r);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> query((rt&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>, l, r);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> max(query(rt&lt;&lt;<span class="number">1</span>, l, mid), query((rt&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>, mid+<span class="number">1</span>, r));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> f1 = top[u], f2 = top[v];</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(f1!=f2)&#123;</div><div class="line">        <span class="keyword">if</span>(deep[f1]&lt;deep[f2])&#123;</div><div class="line">            swap(f1, f2);</div><div class="line">            swap(u, v);</div><div class="line">        &#125;</div><div class="line">        temp = max(temp, query(<span class="number">1</span>, p[f1], p[u]));</div><div class="line">        u = fa[f1];</div><div class="line">        f1 = top[u];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(u == v) <span class="keyword">return</span> temp;</div><div class="line">    <span class="comment">//u, v在同一根链上</span></div><div class="line">    <span class="keyword">if</span>(deep[u]&gt;deep[v]) swap(u, v);</div><div class="line">    <span class="keyword">return</span> max(temp, query(<span class="number">1</span>, p[son[u]], p[v]));</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> e[maxn][<span class="number">3</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">int</span> t, n;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        init();</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;e[i][<span class="number">0</span>]&gt;&gt;e[i][<span class="number">1</span>]&gt;&gt;e[i][<span class="number">2</span>];</div><div class="line">            add_edge(e[i][<span class="number">0</span>], e[i][<span class="number">1</span>]);</div><div class="line">            add_edge(e[i][<span class="number">1</span>], e[i][<span class="number">0</span>]);</div><div class="line">        &#125;</div><div class="line">        dfs1(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        getpos(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">        build(<span class="number">1</span>, <span class="number">0</span>, pos<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(deep[e[i][<span class="number">0</span>]]&gt;deep[e[i][<span class="number">1</span>]])&#123;</div><div class="line">                swap(e[i][<span class="number">0</span>], e[i][<span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">            update(<span class="number">1</span>, p[e[i][<span class="number">1</span>]], e[i][<span class="number">2</span>]);<span class="comment">//将更深的节点先更新</span></div><div class="line">        &#125;</div><div class="line">        <span class="built_in">string</span> op;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="comment">//cout&lt;&lt;op&lt;&lt;endl;</span></div><div class="line">        <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;op)&#123;</div><div class="line">            <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'D'</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</div><div class="line">            <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'Q'</span>)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find(u, v));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                update(<span class="number">1</span>, p[e[u<span class="number">-1</span>][<span class="number">1</span>]], v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">1</span></div><div class="line"><span class="comment">3</span></div><div class="line"><span class="comment">1 2 1</span></div><div class="line"><span class="comment">2 3 2</span></div><div class="line"><span class="comment">QUERY 1 2</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cf-478</title>
      <link href="/2018/05/02/cf-478/"/>
      <url>/2018/05/02/cf-478/</url>
      <content type="html"><![CDATA[<p>我真的好菜啊，第二题对着空气调试，一度对自己的智商产生了怀疑<br>想着涨分，结果妥妥的大跌。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>我他妈的都想到了是精度的问题，可是就差一个变量没有改成ll类型<br>emmmmm</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>就是运用lower_bound的操作<br>注意有下面的几种情况：</p><ol><li>只有所有的人都死了，才会浪费魔法</li><li>魔法恰好等于攻击的人的总的能力</li><li>部分的攻击了最后的一个人，因此要记录一下最后一个人的剩余HP</li></ol><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line">ll a[maxn];</div><div class="line">ll sum[maxn];</div><div class="line">ll k[maxn];</div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</div><div class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</div><div class="line">    &#125;</div><div class="line">    sum[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    sum[<span class="number">1</span>] = a[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</div><div class="line">        sum[i] = sum[i<span class="number">-1</span>]+a[i<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> kill = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;q; i++)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;k[i];</div><div class="line">        <span class="keyword">int</span> temp1;</div><div class="line">        <span class="keyword">if</span>(res&gt;<span class="number">0</span>)</div><div class="line">            temp1 = a[kill] - res;</div><div class="line">        <span class="keyword">else</span> temp1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> index = lower_bound(sum+<span class="number">1</span>, sum+n+<span class="number">1</span>, k[i]+sum[kill]+temp1)-(sum);</div><div class="line">        <span class="comment">//会有魔法的剩余，直接输出答案</span></div><div class="line">        <span class="keyword">if</span>(index&gt;n)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</div><div class="line">            res = kill = <span class="number">0</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//最后一个人会受到部分的攻击</span></div><div class="line">        <span class="keyword">if</span>(sum[index] &gt; k[i]+sum[kill]+temp1)&#123;</div><div class="line">            res = sum[index]-k[i]-sum[kill]-temp1;</div><div class="line">            index = index<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(sum[index] == k[i]+sum[kill]+temp1&amp;&amp;index == n)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</div><div class="line">            res = <span class="number">0</span>;</div><div class="line">            kill = <span class="number">0</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(sum[index] == k[i]+sum[kill]+temp1)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n-index);</div><div class="line">            res = <span class="number">0</span>;</div><div class="line">            kill = index;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> ans = n-index;</div><div class="line">            kill = index;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kuangbin专题9--连通图</title>
      <link href="/2018/04/30/kuangbin%E4%B8%93%E9%A2%989-%E8%BF%9E%E9%80%9A%E5%9B%BE/"/>
      <url>/2018/04/30/kuangbin%E4%B8%93%E9%A2%989-%E8%BF%9E%E9%80%9A%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>一些图论算法<br>专题链接：<a href="https://vjudge.net/contest/166947#problem/A" target="_blank" rel="external">专题九-连通图</a><br><a id="more"></a></p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>缩点后，任务A为求缩点后的图中入度为0的点。<br>任务B为入度为0，和出度为0的点数的最大值。</p><p>注意最后缩为一个点的时候任务B要特判！</p><p>晚上学一下tarjan的缩点的方法。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e2</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rG[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; new_G[maxn];</div><div class="line"><span class="keyword">bool</span> link[maxn][maxn];</div><div class="line"><span class="keyword">int</span> in[maxn];</div><div class="line"><span class="keyword">int</span> out[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> belong[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vs;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) G[i].clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) rG[i].clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) new_G[i].clear();</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span>(in));</div><div class="line">    <span class="built_in">memset</span>(out, <span class="number">0</span>, <span class="keyword">sizeof</span>(out));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i];</div><div class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span> dfs(v);</div><div class="line">    &#125;</div><div class="line">    vs.push_back(u);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rdfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    belong[u] = k;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;rG[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = rG[u][i];</div><div class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        rdfs(v, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">scc</span><span class="params">()</span></span>&#123;</div><div class="line">    vs.clear();</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[i]) dfs(i);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=vs.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="keyword">int</span> u = vs[i];</div><div class="line">        <span class="keyword">if</span>(!vis[u]) rdfs(u, k++);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> k;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u;</div><div class="line">            <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;u&amp;&amp;u)&#123;</div><div class="line">                G[i].push_back(u);</div><div class="line">                rG[u].push_back(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> sz = scc();</div><div class="line">        <span class="built_in">memset</span>(link, <span class="number">0</span>, <span class="keyword">sizeof</span>(link));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G[i].size(); j++)&#123;</div><div class="line">                <span class="keyword">int</span> u = i;</div><div class="line">                <span class="keyword">int</span> v = G[i][j];</div><div class="line">                <span class="keyword">if</span>(belong[u]!=belong[v]&amp;&amp;!link[belong[u]][belong[v]]) &#123;</div><div class="line">                    new_G[belong[u]].push_back(belong[v]);</div><div class="line">                    link[belong[u]][belong[v]] = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;new_G[i].size(); j++)&#123;</div><div class="line">                <span class="keyword">int</span> v = new_G[i][j];</div><div class="line">                in[v]++;</div><div class="line">                out[i]++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(sz == <span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"1\n0\n"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> ans2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(in[i] == <span class="number">0</span>) ans1++;</div><div class="line">            <span class="keyword">if</span>(out[i] == <span class="number">0</span>) ans2++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;max(ans1, ans2)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>一道很裸的求无向图的割点的个数。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>cut数组没有初始化，导致wa了两发<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e2</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v, next;</div><div class="line">    <span class="keyword">bool</span> cut;</div><div class="line">&#125;edge[maxm];</div><div class="line"><span class="keyword">int</span> head[maxn];</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"><span class="keyword">int</span> low[maxn], dfn[maxn], Stack[maxn];</div><div class="line"><span class="keyword">int</span> Index, top;</div><div class="line"><span class="keyword">bool</span> instack[maxn];</div><div class="line"><span class="keyword">bool</span> cut[maxn];</div><div class="line"><span class="keyword">int</span> add_block[maxn];</div><div class="line"><span class="keyword">int</span> bridge;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    edge[tot].v = v;</div><div class="line">    edge[tot].next = head[u];</div><div class="line">    edge[tot].cut = <span class="literal">true</span>;</div><div class="line">    head[u] = tot++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    low[u] = dfn[u] = ++Index;</div><div class="line">    <span class="keyword">int</span> son = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i=edge[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">            son++;</div><div class="line">            tarjan(v, u);</div><div class="line">            <span class="keyword">if</span>(low[v]&lt;low[u]) low[u] = low[v];</div><div class="line">            <span class="keyword">if</span>(low[v]&gt;dfn[u])&#123;</div><div class="line">                bridge++;</div><div class="line">                edge[i].cut = <span class="literal">true</span>;</div><div class="line">                edge[i^<span class="number">1</span>].cut = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(low[v]&gt;=dfn[u]&amp;&amp;fa!=<span class="number">-1</span>)&#123;</div><div class="line">                cut[u] = <span class="literal">true</span>;</div><div class="line">                add_block[u]++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(low[u]&gt;dfn[v])&#123;</div><div class="line">            low[u] = dfn[v];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(son&gt;<span class="number">1</span>&amp;&amp;fa == <span class="number">-1</span>) cut[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>(fa == <span class="number">-1</span>) add_block[u] = son<span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="built_in">memset</span>(instack, <span class="number">0</span>, <span class="keyword">sizeof</span>(instack));</div><div class="line">    tot = <span class="number">0</span>;</div><div class="line">    bridge = <span class="number">0</span>;</div><div class="line">    top = Index = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(add_block, <span class="number">0</span>, <span class="keyword">sizeof</span>(add_block));</div><div class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span>(dfn));</div><div class="line">    <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span>(low));</div><div class="line">    <span class="built_in">memset</span>(cut, <span class="number">0</span>, <span class="keyword">sizeof</span>(cut));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> a,b;</div><div class="line">        <span class="keyword">char</span> ch;</div><div class="line">        init();</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a),a)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%c"</span>,&amp;b,&amp;ch))</div><div class="line">            &#123;</div><div class="line">                add_edge(a, b);</div><div class="line">                add_edge(b, a);</div><div class="line">                <span class="keyword">if</span>(ch==<span class="string">'\n'</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        tarjan(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(cut[i])&#123;</div><div class="line">                ans++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="曹操的桥"><a href="#曹操的桥" class="headerlink" title="曹操的桥"></a>曹操的桥</h1><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>找到一个桥，且它的权重最小<br>需要注意以下的几点：</p><ol><li>桥的权重可能为0，这个时候派出的人数为1.</li><li><code>会有重边的存在</code></li><li>当其中的图已经不连通的时候，直接输出0.</li><li>当图中不存在桥的时候，输出-1.<br>因为有重边的存在。<br>将<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div></pre></td></tr></table></figure></li></ol><p>改成<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(v == fa) &#123;</div><div class="line">    <span class="keyword">if</span>(cnt) low[u] = dfn[v];<span class="comment">//防止将此边当成是桥：low[v]&gt;dfn[u]</span></div><div class="line">    cnt++;</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v, next, weight;</div><div class="line">    <span class="keyword">bool</span> cut;</div><div class="line">&#125;edge[maxm];</div><div class="line"><span class="keyword">int</span> head[maxn];</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"><span class="keyword">int</span> low[maxn], dfn[maxn], Stack[maxn];</div><div class="line"><span class="keyword">int</span> Index, top;</div><div class="line"><span class="keyword">bool</span> instack[maxn];</div><div class="line"><span class="keyword">bool</span> cut[maxn];</div><div class="line"><span class="keyword">int</span> add_block[maxn];</div><div class="line"><span class="keyword">int</span> bridge;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> weight)</span></span>&#123;</div><div class="line">    edge[tot].v = v;</div><div class="line">    edge[tot].next = head[u];</div><div class="line">    edge[tot].weight = weight;</div><div class="line">    edge[tot].cut = <span class="literal">false</span>;</div><div class="line">    head[u] = tot++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> G[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> is_chong[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> v;</div><div class="line">    low[u] = dfn[u] = ++Index;</div><div class="line">    <span class="keyword">int</span> son = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i=edge[i].next)&#123;</div><div class="line">        v = edge[i].v;</div><div class="line">        <span class="keyword">if</span>(v == fa) &#123;</div><div class="line">            <span class="keyword">if</span>(cnt) low[u] = dfn[v];</div><div class="line">            cnt++;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">            son++;</div><div class="line">            tarjan(v, u);</div><div class="line">            <span class="keyword">if</span>(low[v]&lt;low[u]) low[u] = low[v];</div><div class="line">            <span class="keyword">if</span>(low[v]&gt;dfn[u])&#123;</div><div class="line">                bridge++;</div><div class="line">                edge[i].cut = <span class="literal">true</span>;</div><div class="line">                edge[i^<span class="number">1</span>].cut = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(low[v]&gt;=dfn[u]&amp;&amp;fa!=<span class="number">-1</span>)&#123;</div><div class="line">                cut[u] = <span class="literal">true</span>;</div><div class="line">                <span class="comment">//if(u == 1) cout&lt;&lt;"yes"&lt;&lt;endl;</span></div><div class="line">                add_block[u]++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(low[u]&gt;dfn[v])&#123;</div><div class="line">            low[u] = dfn[v];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(son&gt;<span class="number">1</span>&amp;&amp;fa == <span class="number">-1</span>) cut[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>(fa == <span class="number">-1</span>) add_block[u] = son<span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="built_in">memset</span>(instack, <span class="number">0</span>, <span class="keyword">sizeof</span>(instack));</div><div class="line">    tot = <span class="number">0</span>;</div><div class="line">    bridge = <span class="number">0</span>;</div><div class="line">    top = Index = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(add_block, <span class="number">0</span>, <span class="keyword">sizeof</span>(add_block));</div><div class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span>(dfn));</div><div class="line">    <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span>(low));</div><div class="line">    <span class="built_in">memset</span>(cut, <span class="number">0</span>, <span class="keyword">sizeof</span>(cut));</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(is_chong, <span class="number">0</span>, <span class="keyword">sizeof</span>(is_chong));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;maxn; j++) G[i][j] = <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(a == <span class="number">-1</span>) <span class="keyword">return</span> b;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">-1</span>) <span class="keyword">return</span>  a;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> b;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&amp;&amp;(n+m))&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> u, v, weight;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;weight;</div><div class="line">            add_edge(u, v, weight);</div><div class="line">            add_edge(v, u, weight);</div><div class="line">            <span class="keyword">if</span>(vis[u][v]) &#123;</div><div class="line">                is_chong[u][v] = <span class="literal">true</span>;</div><div class="line">                is_chong[v][u] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            vis[u][v] = vis[v][u] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        tarjan(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(dfn[i] == <span class="number">0</span>)&#123;</div><div class="line">                flag = <span class="literal">true</span>;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flag) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(bridge == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> ans = INF;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=head[i]; ~j; j = edge[j].next)&#123;</div><div class="line">                    <span class="keyword">int</span> u =i;</div><div class="line">                    <span class="keyword">int</span> v = edge[j].v;</div><div class="line">                    <span class="keyword">if</span>(edge[j].cut == <span class="literal">true</span>&amp;&amp;(!is_chong[u][v])&amp;&amp;(!is_chong[v][u]))&#123;</div><div class="line">                        G[u][v] = edge[j].weight;</div><div class="line">                        G[v][u] = edge[j].weight;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>((edge[j].cut == <span class="literal">true</span>)&amp;&amp;(is_chong[u][v]))&#123;</div><div class="line">                        G[u][v] = <span class="number">-1</span>;</div><div class="line">                        G[v][u] = <span class="number">-1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(is_chong[i][j])&#123;</div><div class="line">                    G[i][j] = G[j][i] = <span class="number">-1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(j == i) <span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        ans = min1(ans, G[i][j]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(ans == <span class="number">0</span>) ans++;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gym补题</title>
      <link href="/2018/04/29/gym%E8%A1%A5%E9%A2%98/"/>
      <url>/2018/04/29/gym%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>挂机四个半小时。。。</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="D-effective-network"><a href="#D-effective-network" class="headerlink" title="D effective network"></a>D effective network</h1><p><a href="http://codeforces.com/gym/101597/problem/D" target="_blank" rel="external">构造题</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>首先从这个无向图中选出来q个点，然后这q个点之间任意两点之间的距离不能超过q-k</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>比赛的时候用最短路来维护任意两点之间的距离，然后判断。<br>因为最短路的时间复杂度为\(O(n^2log(n))\)的预处理，然后二分的寻找q值， \(O(n^3)\)的时间复杂度的寻找判断。结果一直T。。。</p><p>后来看了解答。利用了一个性质：<br>若原来的图中存在一个解，那么整张图也满足原来的性质。</p><blockquote><p>如果对于x个点（x&lt;=n） 存在x-k&gt;=max， 那么x增加一个点。那么最大的距离最大为max+1。那么 (x+1)-k&gt;=(max+1) 依然成立。所以增加到n也是成立的。并且再实际情况中 max并不一定会增加1。这时考虑最差的情况。</p></blockquote><p>然后用bfs对每一个点判断就行了<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn  = <span class="number">5000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) G[i].clear();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    q.push(u);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[temp].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[temp][i];</div><div class="line">            <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                d[v] = d[temp]+<span class="number">1</span>;</div><div class="line">                vis[v] = <span class="literal">true</span>;</div><div class="line">                q.push(v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> max_depth = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        max_depth = max(max_depth, d[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max_depth;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k)&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</div><div class="line">            G[u].push_back(v);</div><div class="line">            G[v].push_back(u);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> temp = bfs(i);</div><div class="line">            ans = max(ans, temp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ans&lt;=n-k)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">                i == <span class="number">1</span>?<span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>后来发现直接判断规模为n的思想是真的非常的重要啊！<br>用dij堆优化也能过，用了3837ms,前面的bfs用了1419ms.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">3e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">int</span> dis_all[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v, cost;</div><div class="line">    Node(<span class="keyword">int</span> _v = <span class="number">0</span>, <span class="keyword">int</span> _cost = <span class="number">0</span>):v(_v), cost(_cost)&#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v, c;</div><div class="line">    qnode(<span class="keyword">int</span> _v=<span class="number">0</span>, <span class="keyword">int</span> _c=<span class="number">0</span>):v(_v), c(_c)&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> qnode &amp;r) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> c&gt;r.c;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Node&gt; G[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) G[i].clear();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) dis[i] = INF;</div><div class="line">    priority_queue&lt;qnode&gt; pq;</div><div class="line">    dis[s] = <span class="number">0</span>;</div><div class="line">    pq.push(qnode(s, <span class="number">0</span>));</div><div class="line">    qnode temp;</div><div class="line">    <span class="keyword">while</span>(!pq.empty())&#123;</div><div class="line">        temp = pq.top();</div><div class="line">        pq.pop();</div><div class="line">        <span class="keyword">int</span> u = temp.v;</div><div class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</div><div class="line">        vis[u] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">            Node e = G[u][i];</div><div class="line">            <span class="keyword">int</span> v = e.v;</div><div class="line">            <span class="keyword">int</span> cost = e.cost;</div><div class="line">            <span class="keyword">if</span>(!vis[v] &amp;&amp; dis[v]&gt;dis[u]+cost)&#123;</div><div class="line">                dis[v] = dis[u]+cost;</div><div class="line">                pq.push(qnode(v, dis[v]));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">ios :: sync_with_stdio(<span class="literal">false</span>);</div><div class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line"><span class="built_in">cout</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k)&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</div><div class="line">            G[u].push_back(Node&#123;v, <span class="number">1</span>&#125;);</div><div class="line">            G[v].push_back(Node&#123;u, <span class="number">1</span>&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            dij(i);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">                dis_all[i][j] = dis[j];</div><div class="line">                ans = max(ans, dis[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(n-k&lt;ans) flag = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(!flag)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">                i == <span class="number">1</span>?<span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构造题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>最小费用流</title>
      <link href="/2018/04/28/%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
      <url>/2018/04/28/%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>积累一下最小费用流的模板<br>固定流量的最小费用流只要在维护流量的时候不断的减少就行了。<br>感觉链式前星星有的时候不能够被替代，因为有时候需要维护边的属性<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="最小费用最大流的模板"><a href="#最小费用最大流的模板" class="headerlink" title="最小费用最大流的模板"></a>最小费用最大流的模板</h1><p>首先对每一天边的费用求最短路。<br>因为边的费用可能是负的，所以必须要用Bellman-ford或者是SPFA算法。<br>对其中的一些变量进行相应的说明：</p><blockquote><p>pre[]:记录的是前面的边的编号<br>反向边的flow是负值，因此即使反向边的cap=0, 这一条边仍然可以有流量通过。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">int</span> s, t, n, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v, cost, cap, next, flow;</div><div class="line">&#125;edge[maxm];</div><div class="line"><span class="keyword">int</span> head[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];<span class="comment">//记录的是哪一条边的编号</span></div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span>(pre));</div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">    tot = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> weight, <span class="keyword">int</span> price)</span></span>&#123;</div><div class="line">    edge[tot].v = v;</div><div class="line">    edge[tot].cost = price;</div><div class="line">    edge[tot].cap = weight;</div><div class="line">    edge[tot].flow = <span class="number">0</span>;</div><div class="line">    edge[tot].next = head[u];</div><div class="line">    head[u] = tot++;</div><div class="line">    edge[tot].v = u;</div><div class="line">    edge[tot].cost = <span class="number">-1</span>*price;</div><div class="line">    edge[tot].cap = <span class="number">0</span>;</div><div class="line">    edge[tot].flow = <span class="number">0</span>;</div><div class="line">    edge[tot].next = head[v];</div><div class="line">    head[v] = tot++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) dis[i] = INF;</div><div class="line">    dis[s] = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span>(pre));</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</div><div class="line">    q.push(s);</div><div class="line">    vis[s] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop();</div><div class="line">        vis[u] = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; ~i; i=edge[i].next)&#123;</div><div class="line">            <span class="keyword">int</span> v = edge[i].v;</div><div class="line">            <span class="keyword">if</span>(edge[i].cap&gt;edge[i].flow &amp;&amp; dis[v]&gt;dis[u]+edge[i].cost)&#123;</div><div class="line">                dis[v] = dis[u]+edge[i].cost;</div><div class="line">                pre[v] = i;</div><div class="line">                <span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">                    q.push(v);</div><div class="line">                    vis[v] = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(pre[t] == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min_cost_max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> &amp;min_cost)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(SPFA(s, t))&#123;</div><div class="line">        <span class="keyword">int</span> Min = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[t]; ~i; i = pre[edge[i^<span class="number">1</span>].v])&#123;</div><div class="line">            <span class="keyword">if</span>(Min&gt;edge[i].cap-edge[i].flow)&#123;</div><div class="line">                Min = edge[i].cap - edge[i].flow;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=pre[t]; ~i; i = pre[edge[i^<span class="number">1</span>].v])&#123;</div><div class="line">            <span class="comment">//cout&lt;&lt;edge[i^1].v&lt;&lt;" ";</span></div><div class="line">            edge[i].flow += Min;</div><div class="line">            edge[i^<span class="number">1</span>].flow -= Min;</div><div class="line">            min_cost += edge[i].cost*Min;</div><div class="line">        &#125;</div><div class="line">        flow += Min;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t)&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> u, v, price, weight;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;price&gt;&gt;weight;</div><div class="line">            add_edge(u, v, weight, price);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> min_cost = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> ans = min_cost_max_flow(s, t, min_cost);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;min_cost&lt;&lt;<span class="string">" "</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">5 7 0 4</span></div><div class="line"><span class="comment">0 1 2 10</span></div><div class="line"><span class="comment">1 2 6 6</span></div><div class="line"><span class="comment">0 2 4 2</span></div><div class="line"><span class="comment">1 3 2 6</span></div><div class="line"><span class="comment">3 2 3 3</span></div><div class="line"><span class="comment">2 4 2 5</span></div><div class="line"><span class="comment">3 4 6 8</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h1 id="模板题目"><a href="#模板题目" class="headerlink" title="模板题目"></a>模板题目</h1><p><a href="http://poj.org/problem?id=2135" target="_blank" rel="external">poj2135</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>从起点1到N，然后再从N回到1，每一条边最多经过一次。边有长度，问最小需要走过的长度。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>将边的长度作为边的花费，然后每一条边只能经过一次就设边的容量为1.<br>设一个超级源S与1节点连接，边的容量为2， 费用为0，<br>超级汇与N节点连接，边的容量为2， 费用为0.</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>上面的模板代码只要改一改就可以了<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">int</span> s, t, n, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v, cost, cap, next, flow;</div><div class="line">&#125;edge[maxm];</div><div class="line"><span class="keyword">int</span> head[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];<span class="comment">//记录的是哪一条边的编号</span></div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span>(pre));</div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">    tot = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> weight, <span class="keyword">int</span> price)</span></span>&#123;</div><div class="line">    edge[tot].v = v;</div><div class="line">    edge[tot].cost = price;</div><div class="line">    edge[tot].cap = weight;</div><div class="line">    edge[tot].flow = <span class="number">0</span>;</div><div class="line">    edge[tot].next = head[u];</div><div class="line">    head[u] = tot++;</div><div class="line">    edge[tot].v = u;</div><div class="line">    edge[tot].cost = <span class="number">-1</span>*price;</div><div class="line">    edge[tot].cap = <span class="number">0</span>;</div><div class="line">    edge[tot].flow = <span class="number">0</span>;</div><div class="line">    edge[tot].next = head[v];</div><div class="line">    head[v] = tot++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) dis[i] = INF;</div><div class="line">    dis[s] = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span>(pre));</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</div><div class="line">    q.push(s);</div><div class="line">    vis[s] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop();</div><div class="line">        vis[u] = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; ~i; i=edge[i].next)&#123;</div><div class="line">            <span class="keyword">int</span> v = edge[i].v;</div><div class="line">            <span class="keyword">if</span>(edge[i].cap&gt;edge[i].flow &amp;&amp; dis[v]&gt;dis[u]+edge[i].cost)&#123;</div><div class="line">                dis[v] = dis[u]+edge[i].cost;</div><div class="line">                pre[v] = i;</div><div class="line">                <span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">                    q.push(v);</div><div class="line">                    vis[v] = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(pre[t] == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min_cost_max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> &amp;min_cost)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(SPFA(s, t))&#123;</div><div class="line">        <span class="keyword">int</span> Min = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[t]; ~i; i = pre[edge[i^<span class="number">1</span>].v])&#123;</div><div class="line">            <span class="keyword">if</span>(Min&gt;edge[i].cap-edge[i].flow)&#123;</div><div class="line">                Min = edge[i].cap - edge[i].flow;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=pre[t]; ~i; i = pre[edge[i^<span class="number">1</span>].v])&#123;</div><div class="line">            <span class="comment">//cout&lt;&lt;edge[i^1].v&lt;&lt;" ";</span></div><div class="line">            edge[i].flow += Min;</div><div class="line">            edge[i^<span class="number">1</span>].flow -= Min;</div><div class="line">            min_cost += edge[i].cost*Min;</div><div class="line">        &#125;</div><div class="line">        flow += Min;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> u, v, len;</div><div class="line">        s = <span class="number">0</span>;</div><div class="line">        t = <span class="number">2001</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;len;</div><div class="line">            add_edge(u, v, <span class="number">1</span>, len);</div><div class="line">            add_edge(v, u, <span class="number">1</span>, len);</div><div class="line">        &#125;</div><div class="line">        add_edge(s, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">        add_edge(n, t, <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> min_cost = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> ans = min_cost_max_flow(s, t, min_cost);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;min_cost&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小费用流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线性基</title>
      <link href="/2018/04/28/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
      <url>/2018/04/28/%E7%BA%BF%E6%80%A7%E5%9F%BA/</url>
      <content type="html"><![CDATA[<p>用线性代数里面的基的思想来解决算法里面的一类亦或问题。</p><a id="more"></a><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br>偷了韦神的线性基的板子<br>以及可以参考的博客<a href="https://blog.sengxian.com/algorithms/linear-basis" target="_blank" rel="external">线性基详解</a><br>感觉查询的时候就是不断的取最高位或者是最低位，用贪心的思想<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">7</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">L_B</span>&#123;</span></div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> d[<span class="number">61</span>],p[<span class="number">61</span>];</div><div class="line">    <span class="keyword">int</span> cnt;</div><div class="line">    L_B() <span class="comment">//这个函数类似于构造函数，在创建的时候直接先调用一次</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</div><div class="line">        <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));</div><div class="line">        cnt=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">            <span class="keyword">if</span> (val&amp;(<span class="number">1L</span>L&lt;&lt;i))</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (!d[i])</div><div class="line">                &#123;</div><div class="line">                    d[i]=val;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                val^=d[i];</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> val&gt;<span class="number">0</span>;<span class="comment">//若false表示已经被填满了，不能进行相应的插入操作</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query_max</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ret=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">            <span class="keyword">if</span> ((ret^d[i])&gt;ret)</div><div class="line">                ret^=d[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query_min</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">60</span>;i++)</div><div class="line">            <span class="keyword">if</span> (d[i])</div><div class="line">                <span class="keyword">return</span> d[i];</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</div><div class="line">                <span class="keyword">if</span> (d[i]&amp;(<span class="number">1L</span>L&lt;&lt;j))</div><div class="line">                    d[i]^=d[j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">60</span>;i++)</div><div class="line">            <span class="keyword">if</span> (d[i])</div><div class="line">                p[cnt++]=d[i];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">kthquery</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> k)</span> <span class="comment">//寻找第k小？</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (k&gt;=(<span class="number">1L</span>L&lt;&lt;cnt))</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">            <span class="keyword">if</span> (k&amp;(<span class="number">1L</span>L&lt;&lt;i))</div><div class="line">                ret^=p[i];</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//两个线性基的合并</span></div><div class="line"><span class="function">L_B <span class="title">merge</span><span class="params">(<span class="keyword">const</span> L_B &amp;n1,<span class="keyword">const</span> L_B &amp;n2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    L_B ret=n1;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        <span class="keyword">if</span> (n2.d[i])</div><div class="line">            ret.insert(n2.d[i]);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ll i,j,k,f1,f2,f3,f4,t1,t2,t3,t4;</div><div class="line">    L_B a;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="built_in">cin</span>  &gt;&gt; n;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; t1;</div><div class="line">        a.insert(t1);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; a.query_max() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    a.rebuild();</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;a.kthquery(<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h1><p><a href="https://www.luogu.org/problemnew/show/P3812#sub" target="_blank" rel="external">洛谷</a><br><a href="">sgu</a></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>最近几场比赛补题</title>
      <link href="/2018/04/27/%E6%9C%80%E8%BF%91%E5%87%A0%E5%9C%BA%E6%AF%94%E8%B5%9B%E8%A1%A5%E9%A2%98/"/>
      <url>/2018/04/27/%E6%9C%80%E8%BF%91%E5%87%A0%E5%9C%BA%E6%AF%94%E8%B5%9B%E8%A1%A5%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>不轻易言弃</p><a id="more"></a><h1 id="校赛"><a href="#校赛" class="headerlink" title="校赛"></a>校赛</h1><p>过了五题，有的题目还是需要仔细思考一下的。</p><h2 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h2><p>三进制dp.用一个数组维护余数前缀的所有后缀的种类的个数，这种思想很是巧妙。<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fqrb1000uhj30qy067wew.jpg" alt=""><br><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fqrb1dbdwtj30c304idfr.jpg" alt=""></p><blockquote><p>+1操作很明显 当转移到达的状态（i）的后缀和j 和 处理好的串的元素（b[i]）相同时，单独一个b[i]也能产生一个后缀和j</p><p><code>对后缀进行划分（自动机dp的常见做法） dp[i][j]: 访问到第i号元素 后缀和必定为j 的 区间[1,i]子串 的取法总数</code></p></blockquote><p>第二个思想相当的厉害。</p><h2 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h2><p>pq维护，我维护的是后面的出现的次数，每一次弹出最小的出现的次数。不用维护前面的，因为在pq中肯定不会用到它们</p><h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><p>网络赛的升级版<br>队友是打表找规律做出来的。<br>先贴一个数据规模是100的代码</p><h3 id="弱化版"><a href="#弱化版" class="headerlink" title="弱化版"></a>弱化版</h3><p><a href="http://acm.xidian.edu.cn/problem.php?id=1286" target="_blank" rel="external">弱化版</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">int</span> step;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="comment">//int bfs()&#123;</span></div><div class="line"><span class="comment">//    Node s;</span></div><div class="line"><span class="comment">//    s.x = s.y = 1;</span></div><div class="line"><span class="comment">//    s.step = 0;</span></div><div class="line"><span class="comment">//    queue&lt;Node&gt; q;</span></div><div class="line"><span class="comment">//    while(!q.empty()) q.pop();</span></div><div class="line"><span class="comment">//    q.push(s);</span></div><div class="line"><span class="comment">//    while(true)&#123;</span></div><div class="line"><span class="comment">//        Node temp = q.front();</span></div><div class="line"><span class="comment">//        q.pop();</span></div><div class="line"><span class="comment">//        if(temp.y == n) &#123;</span></div><div class="line"><span class="comment">//            return temp.step;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//        else&#123;</span></div><div class="line"><span class="comment">//            Node temp1 = temp;</span></div><div class="line"><span class="comment">//            Node temp2 = temp;</span></div><div class="line"><span class="comment">//            temp1.y = temp1.x+temp1.y;</span></div><div class="line"><span class="comment">//            temp2.x = temp2.y;</span></div><div class="line"><span class="comment">//            temp2.y = 2*temp2.y;</span></div><div class="line"><span class="comment">//            temp1.step = temp2.step = temp.step+1;</span></div><div class="line"><span class="comment">//            q.push(temp1);</span></div><div class="line"><span class="comment">//            q.push(temp2);</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    return -1;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</div><div class="line"><span class="keyword">int</span> ans[maxn][maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="comment">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;</span></div><div class="line">    <span class="keyword">int</span> tempx = x;</div><div class="line">    <span class="keyword">int</span> tempy = x+y;</div><div class="line">    <span class="keyword">if</span>(tempy&lt;=<span class="number">100</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(ans[tempx][tempy]&gt;ans[x][y]+<span class="number">1</span>) ans[tempx][tempy] = ans[x][y]+<span class="number">1</span>;</div><div class="line">        dfs(tempx, tempy);</div><div class="line">    &#125;</div><div class="line">    tempx = y;</div><div class="line">    tempy = <span class="number">2</span>*y;</div><div class="line">    <span class="keyword">if</span>(tempy&lt;=<span class="number">100</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(ans[tempx][tempy]&gt;ans[x][y]+<span class="number">1</span>) ans[tempx][tempy] = ans[x][y]+<span class="number">1</span>;</div><div class="line">        dfs(tempx, tempy);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;maxn; j++) ans[i][j] = INF;</div><div class="line">    ans[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">        <span class="keyword">int</span> ans1 = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)&#123;</div><div class="line">            ans1 = min(ans1, ans[i][n]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans1);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="强化版"><a href="#强化版" class="headerlink" title="强化版"></a>强化版</h3><p><a href="http://acm.xidian.edu.cn/problem.php?id=1290" target="_blank" rel="external">强化版</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">12</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">int</span> n, m, f, t;</div><div class="line"></div><div class="line"><span class="keyword">int</span> data[maxn];</div><div class="line"><span class="keyword">int</span> prime[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getprime</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(prime, <span class="number">0</span>, <span class="keyword">sizeof</span>(prime));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i ++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(! prime[i])prime[++ prime[<span class="number">0</span>]] = i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= prime[<span class="number">0</span>] &amp;&amp; prime[j] &lt;= (maxn - <span class="number">1</span>) / i; j ++)</div><div class="line">        &#123;</div><div class="line">            prime[prime[j] * i] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)<span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    getprime();</div><div class="line">    data[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1000000</span>; i ++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">bool</span> isok = <span class="literal">false</span>;</div><div class="line">        f = lower_bound(prime + <span class="number">1</span>, prime + <span class="number">1</span> + prime[<span class="number">0</span>], i) - prime - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(i == prime[f + <span class="number">1</span>])</div><div class="line">        &#123;</div><div class="line">            data[i] = i - <span class="number">1</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= prime[<span class="number">0</span>]; k ++)</div><div class="line">            <span class="keyword">if</span>(i % prime[k] == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                j = i / prime[k];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#123;</div><div class="line">            data[i] = data[j] + i / j - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">while</span>(n --)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;f);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, data[f]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后就会发现，答案是n分解质因数之后，<code>所有的(质数-1)的和</code>。<br>然后啊，我就傻了吧唧的在外面的txt文本中打了409kb的表，发现交不上去。。。<br>看了队友的代码，发现自己的打表方式并不正确。</p><h1 id="选拔第一场"><a href="#选拔第一场" class="headerlink" title="选拔第一场"></a>选拔第一场</h1><h2 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h2><p>图论签到题，我签了90min，严重导致士气下降。只用判断图中有没有环就行了。最后才想起来用scc…</p><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>大霸一发ac，并不知道</p><h2 id="G思维题"><a href="#G思维题" class="headerlink" title="G思维题"></a>G思维题</h2><p>整队都卡了这一道题，看来平时的脑洞还是太少了。</p><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>取数组中连续的一段数字，使得它们的和模一个数m的值为0.</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>维护前缀的模值，当两个前缀的模值相等的时候，去掉中间的部分，不影响原来的模值。（即中间的和模值为0）</p><h4 id="T了的代码"><a href="#T了的代码" class="headerlink" title="T了的代码"></a>T了的代码</h4><p>我不知道为什么一直T，这明明是O(n)的时间复杂度啊。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">&#125;node[maxm];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</div><div class="line">            <span class="keyword">int</span> time = num[i]/m;</div><div class="line">            <span class="keyword">if</span>(time&lt;=<span class="number">0</span>)&#123;</div><div class="line">                num[i] = m*(<span class="number">-1</span>*time+<span class="number">1</span>)+num[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                num[i] = num[i] - time*m;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxm; i++)&#123;</div><div class="line">            node[i].l = node[i].r = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(node[num[i]].l!=<span class="number">-1</span>) &#123;</div><div class="line">                node[num[i]].r = i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                node[i].l = node[i].r = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxm; i++)&#123;</div><div class="line">            ans = max(ans, node[i].r-node[i].l);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="J"><a href="#J" class="headerlink" title="J"></a>J</h2><p>kmp,要理解next[]的含义。因为是真后缀，前缀和后缀完全相同，在字符串的最后面加一个特殊字符。<br>然后用kmp的next[]压入一个set中，并且查询，若set中存在，那么前缀也在中间存在过。<br>时间复杂度O(n+m).<br>我觉得得补补字符串的坑，此时不填，更待何时！！！！</p><h1 id="选拔第二场（模拟专场）"><a href="#选拔第二场（模拟专场）" class="headerlink" title="选拔第二场（模拟专场）"></a>选拔第二场（模拟专场）</h1><p>大霸想出来的用pq维护的感觉很巧妙。<br>然后就是一个fibonacii基的东西，感觉很巧妙，居然是数位dp…我们找了一个半小时规律，感觉还差最后一点点</p><h2 id="大霸过的那一道题"><a href="#大霸过的那一道题" class="headerlink" title="大霸过的那一道题"></a>大霸过的那一道题</h2><p>先是排序，然后选前面能凑成的数字。前\(1~a_i\)一定可以凑成\(1~sum[i]\), sum[i]为前缀和，想想确实是这样。1,可以凑成，2也可以凑成，3也可以。。。递推着证明</p><h2 id="J-1"><a href="#J-1" class="headerlink" title="J"></a>J</h2><p>删掉一些边分成若干个节点相同的连通图<br><a href="https://www.cnblogs.com/elpsycongroo/p/8958838.html" target="_blank" rel="external">讲解的博客</a><br>再贴一道类似的题目<br><a href="http://codeforces.com/contest/964" target="_blank" rel="external">cf 964</a>里面的D题</p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>强联通缩点</title>
      <link href="/2018/04/25/%E5%BC%BA%E8%81%94%E9%80%9A%E7%BC%A9%E7%82%B9/"/>
      <url>/2018/04/25/%E5%BC%BA%E8%81%94%E9%80%9A%E7%BC%A9%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>实验室的氛围很好啊，希望以后多向巨巨学习。</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5934" target="_blank" rel="external">hdu 5934</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>先缩点，然后将入度为0的点的最小代价加在一起<br>注意两个int类型的数据相乘会超过int范围，数据必须开成long long 类型的</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    ll x, y, r, c;</div><div class="line">&#125;node[maxn];</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">sqr</span><span class="params">(Node a, Node b)</span></span>&#123;</div><div class="line">    ll r = a.r*a.r;</div><div class="line">    ll dis = ((a.x-b.x)*(a.x-b.x))+(a.y-b.y)*(a.y-b.y);</div><div class="line">    <span class="keyword">return</span> r&gt;=dis;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rG[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vs;</div><div class="line"></div><div class="line">ll cost[maxn];</div><div class="line"><span class="keyword">int</span> belong[maxn];</div><div class="line"><span class="keyword">int</span> k;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i];</div><div class="line">        <span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">            dfs(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    vs.push_back(u);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rdfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    cost[k] = min(cost[k], node[u].c);</div><div class="line">    belong[u] = k;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;rG[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = rG[u][i];</div><div class="line">        <span class="keyword">if</span>(!vis[v]) rdfs(v, k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">scc</span><span class="params">()</span></span>&#123;</div><div class="line">    vs.clear();</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[i])&#123;</div><div class="line">            dfs(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    k=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=vs.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="keyword">int</span> u = vs[i];</div><div class="line">        <span class="keyword">if</span>(!vis[u]) &#123;</div><div class="line">            cost[++k] = INF;</div><div class="line">            rdfs(u, k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> in[maxn];</div><div class="line"><span class="keyword">int</span> out[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; new_G[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)&#123;</div><div class="line">        G[i].clear();</div><div class="line">        rG[i].clear();</div><div class="line">        new_G[i].clear();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span>(in));</div><div class="line">    <span class="built_in">memset</span>(out, <span class="number">0</span>, <span class="keyword">sizeof</span>(out));</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">        init();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> x, y, r, c;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;r&gt;&gt;c;</div><div class="line">            node[i].x = x, node[i].y = y;</div><div class="line">            node[i].r = r, node[i].c = c;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(sqr(node[i], node[j]))&#123;</div><div class="line">                    G[i].push_back(j);</div><div class="line">                    rG[j].push_back(i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> tot = scc();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G[i].size(); j++)&#123;</div><div class="line">                <span class="keyword">int</span> v = G[i][j];</div><div class="line">                <span class="keyword">if</span>(belong[i]!=belong[v])&#123;</div><div class="line">                    in[belong[v]]++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(!in[i]) ans += cost[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, ++kase, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强联通缩点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树的直径</title>
      <link href="/2018/04/20/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
      <url>/2018/04/20/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</url>
      <content type="html"><![CDATA[<p>两次bfs即可</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>给定一棵树，求最远的两点之间的距离。<br>两次bfs就行了，具体的证明有一点麻烦</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v, weight;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) d[i] = <span class="number">-1</span>;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    d[u] = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    q.push(u);</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">int</span> long_dis = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[temp].size(); i++)&#123;</div><div class="line">            Edge e = G[temp][i];</div><div class="line">            <span class="keyword">if</span>(vis[e.v]) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(d[e.v]&lt;d[temp]+e.weight)&#123;</div><div class="line">                    d[e.v]=d[temp]+e.weight;</div><div class="line">                    q.push(e.v);</div><div class="line">                    long_dis = e.v;</div><div class="line">                    vis[e.v] = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> long_dis;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> p = bfs(<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> q = bfs(p);</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        ans = max(ans, d[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</div><div class="line">        <span class="keyword">int</span> u, v, weight;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;weight;</div><div class="line">            G[u].push_back(Edge&#123;v, weight&#125;);</div><div class="line">            G[v].push_back(Edge&#123;u, weight&#125;);</div><div class="line">        &#125;</div><div class="line">        solve();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      
    </entry>
    
    <entry>
      <title>kuangbin专题2--搜索进阶</title>
      <link href="/2018/04/19/kuangbin%E4%B8%93%E9%A2%982-%E6%90%9C%E7%B4%A2%E8%BF%9B%E9%98%B6/"/>
      <url>/2018/04/19/kuangbin%E4%B8%93%E9%A2%982-%E6%90%9C%E7%B4%A2%E8%BF%9B%E9%98%B6/</url>
      <content type="html"><![CDATA[<p>进阶搜索题目</p><a id="more"></a><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>一个bfs,要求输出移动的步骤。<br>然而写完之后T了emmmmm</p><h2 id="Tle的代码"><a href="#Tle的代码" class="headerlink" title="Tle的代码"></a>Tle的代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4</span>;</div><div class="line"><span class="keyword">int</span> mp[maxn][maxn];</div><div class="line"><span class="keyword">int</span> fact[<span class="number">10</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    fact[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">9</span>; i++) fact[i] = fact[i<span class="number">-1</span>]*(i);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> sx, sy;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> m[maxn][maxn];</div><div class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">char</span> mov[<span class="number">140</span>];</div><div class="line">    <span class="keyword">int</span> len;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</div><div class="line"><span class="keyword">char</span> move_di[<span class="number">4</span>] =&#123;<span class="string">'u'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>, <span class="string">'l'</span>&#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_num = <span class="number">362879</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> ter = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> vis[max_num];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> num[][maxn])</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> temp[<span class="number">9</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++) temp[i*<span class="number">3</span>+j] = num[i][j];</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)&#123;</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;<span class="number">9</span>; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(temp[j]&lt;temp[i])&#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ans += fact[<span class="number">8</span>-i]*cnt;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=<span class="number">3</span>||y&lt;<span class="number">0</span>||y&gt;=<span class="number">3</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">char</span> last_ans[<span class="number">140</span>];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Node s;</div><div class="line">    s.x = sx;</div><div class="line">    s.y = sy;</div><div class="line">    s.step = <span class="number">0</span>;</div><div class="line">    s.len = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++) s.m[i][j] = mp[i][j];</div><div class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</div><div class="line">    q.push(s);</div><div class="line">    <span class="keyword">int</span> number = cal(s.m);</div><div class="line">    <span class="comment">//cout&lt;&lt;number&lt;&lt;endl;</span></div><div class="line">    vis[number] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        Node temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        number = cal(temp.m);</div><div class="line">        <span class="keyword">if</span>(number == ter) &#123;</div><div class="line">            temp.mov[temp.len] = <span class="string">'\0'</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=temp.len; i++)&#123;</div><div class="line">                last_ans[i] = temp.mov[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</div><div class="line">            <span class="keyword">int</span> nx = temp.x+dx[i];</div><div class="line">            <span class="keyword">int</span> ny = temp.y+dy[i];</div><div class="line">            <span class="keyword">if</span>(judge(nx, ny))&#123;</div><div class="line">                Node temp1 = temp;</div><div class="line">                swap(temp1.m[temp.x][temp.y], temp1.m[nx][ny]);</div><div class="line">                number = cal(temp1.m);</div><div class="line">                <span class="keyword">if</span>(vis[number])<span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    temp1.mov[temp1.len] = move_di[i];</div><div class="line">                    temp1.len = temp.len+<span class="number">1</span>;</div><div class="line">                    temp1.step = temp.step+<span class="number">1</span>;</div><div class="line">                    temp1.x = nx;</div><div class="line">                    temp1.y = ny;</div><div class="line">                    vis[number] = <span class="literal">true</span>;</div><div class="line">                    q.push(temp1);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    init();</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">    <span class="keyword">char</span> temp[<span class="number">30</span>];</div><div class="line">    <span class="keyword">while</span>(gets(temp))&#123;</div><div class="line">        tot = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)&#123;</div><div class="line">                <span class="keyword">char</span> temp_num;</div><div class="line">                temp_num = temp[tot];</div><div class="line">                tot += <span class="number">3</span>;</div><div class="line">                <span class="keyword">if</span>(temp_num == <span class="string">'x'</span>) mp[i][j] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span> mp[i][j] = temp_num-<span class="string">'0'</span>;</div><div class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="number">0</span>)&#123;</div><div class="line">                    sx = i, sy = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">bool</span> is_true;</div><div class="line">        is_true = bfs();</div><div class="line">        <span class="keyword">if</span>(!is_true)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"unsolvable\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;last_ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>最大矩形面积</title>
      <link href="/2018/04/19/%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF/"/>
      <url>/2018/04/19/%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF/</url>
      <content type="html"><![CDATA[<p>dp积累， 栈的应用。<br>注意最大矩形弹栈的时候选择矩形的范围是<code>末尾到小于要加入的元素，不包含最新要加入的元素</code><br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="最大正方形"><a href="#最大正方形" class="headerlink" title="最大正方形"></a>最大正方形</h1><p>给一个n·m的网格，其中若干个网格为障碍物，不能被覆盖。问覆盖该网格图形的最大正方形面积。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>从左向右，从上到下递推：<br>\(dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])+1\)<br>感觉理解起来还是比较简单的，时间复杂度为\(O(H·W)\)</p><h1 id="最大矩形的并"><a href="#最大矩形的并" class="headerlink" title="最大矩形的并"></a>最大矩形的并</h1><p>还是前面的题面，不过这回覆盖的形状为矩形，问最大的覆盖面积</p><h2 id="未验证的代码"><a href="#未验证的代码" class="headerlink" title="未验证的代码"></a>未验证的代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1405</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> G[maxn][maxn];</div><div class="line"><span class="keyword">int</span> num[maxn][maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> height;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">&#125;;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">4 5</span></div><div class="line"><span class="comment">0 0 1 0 0</span></div><div class="line"><span class="comment">1 0 0 0 0</span></div><div class="line"><span class="comment">0 0 0 1 0</span></div><div class="line"><span class="comment">0 0 0 1 0</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_max_rectangle</span><span class="params">(<span class="keyword">int</span> *tot, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    <span class="built_in">stack</span>&lt;Node&gt; s;</div><div class="line">    <span class="keyword">while</span>(!s.empty()) s.pop();</div><div class="line">    <span class="keyword">int</span> maxs = <span class="number">0</span>;</div><div class="line">    tot[m] = <span class="number">0</span>;<span class="comment">//相当于是一个截止的地方，防止越界。</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=m; i++)&#123;</div><div class="line">        Node temp;</div><div class="line">        temp.height = tot[i];</div><div class="line">        temp.x = i;</div><div class="line">        <span class="keyword">if</span>(s.empty())&#123;</div><div class="line">            s.push(temp);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//注意高度相等的时候既不会计算面积，也不会压栈和弹栈</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s.top().height&lt;temp.height)&#123;</div><div class="line">            s.push(temp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s.top().height&gt;temp.height)&#123;</div><div class="line">            <span class="keyword">int</span> target = i;</div><div class="line">            <span class="keyword">while</span>(!s.empty()&amp;&amp;s.top().height&gt;=temp.height)&#123;</div><div class="line">                Node pre = s.top();</div><div class="line">                s.pop();</div><div class="line">                <span class="keyword">int</span> area = pre.height*(i-pre.x);<span class="comment">//注意选择矩形的范围</span></div><div class="line">                maxs = max(maxs, area);</div><div class="line">                target = pre.x;</div><div class="line">            &#125;</div><div class="line">            temp.x = target;</div><div class="line">            s.push(temp);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> maxs;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRectangle</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(G[j][i]) num[j][i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                num[j][i] = num[j<span class="number">-1</span>][i]+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> max_s = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="comment">//cout&lt;&lt;"test"&lt;&lt;endl;</span></div><div class="line">        <span class="keyword">int</span> temp = get_max_rectangle(num[i], m);</div><div class="line">        <span class="comment">//cout&lt;&lt;"haha"&lt;&lt;endl;</span></div><div class="line">        max_s = max(max_s, temp);</div><div class="line">        <span class="comment">//cout&lt;&lt;max_s&lt;&lt;endl;</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max_s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++) <span class="built_in">cin</span>&gt;&gt;G[i][j];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;getRectangle()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>凸包</title>
      <link href="/2018/04/19/%E5%87%B8%E5%8C%85/"/>
      <url>/2018/04/19/%E5%87%B8%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>基本的思想会，但是实现的小细节还不知道，先mark</p><a id="more"></a><p>蓝书的P275<br>先求凸包（扫描的时间为O(n),排序的时间为O(nlogn)），然后求最远点对(O(n))<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// LA4728/UVa1453 Square</span></div><div class="line"><span class="comment">// Rujia Liu</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> x, y;</div><div class="line">  Point(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>):x(x),y(y) &#123; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> Point Vector;</div><div class="line"></div><div class="line">Vector <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; A, <span class="keyword">const</span> Point&amp; B) &#123;</div><div class="line">  <span class="keyword">return</span> Vector(A.x-B.x, A.y-B.y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Cross</span><span class="params">(<span class="keyword">const</span> Vector&amp; A, <span class="keyword">const</span> Vector&amp; B)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> A.x*B.y - A.y*B.x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dot</span><span class="params">(<span class="keyword">const</span> Vector&amp; A, <span class="keyword">const</span> Vector&amp; B)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> A.x*B.x + A.y*B.y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dist2</span><span class="params">(<span class="keyword">const</span> Point&amp; A, <span class="keyword">const</span> Point&amp; B)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> (A.x-B.x)*(A.x-B.x) + (A.y-B.y)*(A.y-B.y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; p1, <span class="keyword">const</span> Point&amp; p2) &#123;</div><div class="line">  <span class="keyword">return</span> p1.x &lt; p2.x || (p1.x == p2.x &amp;&amp; p1.y &lt; p2.y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; p1, <span class="keyword">const</span> Point&amp; p2) &#123;</div><div class="line">  <span class="keyword">return</span> p1.x == p2.x &amp;&amp; p1.y == p2.y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 点集凸包</span></div><div class="line"><span class="comment">// 如果不希望在凸包的边上有输入点，把两个 &lt;= 改成 &lt;</span></div><div class="line"><span class="comment">// 注意：输入点集会被修改</span></div><div class="line"><span class="built_in">vector</span>&lt;Point&gt; ConvexHull(<span class="built_in">vector</span>&lt;Point&gt;&amp; p) &#123;</div><div class="line">  <span class="comment">// 预处理，删除重复点</span></div><div class="line">  sort(p.begin(), p.end());</div><div class="line">  p.erase(unique(p.begin(), p.end()), p.end());</div><div class="line"></div><div class="line">  <span class="keyword">int</span> n = p.size();</div><div class="line">  <span class="keyword">int</span> m = <span class="number">0</span>;</div><div class="line">  <span class="built_in">vector</span>&lt;Point&gt; ch(n+<span class="number">1</span>);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">    <span class="keyword">while</span>(m &gt; <span class="number">1</span> &amp;&amp; Cross(ch[m<span class="number">-1</span>]-ch[m<span class="number">-2</span>], p[i]-ch[m<span class="number">-2</span>]) &lt;= <span class="number">0</span>) m--;</div><div class="line">    ch[m++] = p[i];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">int</span> k = m;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="keyword">while</span>(m &gt; k &amp;&amp; Cross(ch[m<span class="number">-1</span>]-ch[m<span class="number">-2</span>], p[i]-ch[m<span class="number">-2</span>]) &lt;= <span class="number">0</span>) m--;</div><div class="line">    ch[m++] = p[i];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(n &gt; <span class="number">1</span>) m--;</div><div class="line">  ch.resize(m);</div><div class="line">  <span class="keyword">return</span> ch;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回点集直径的平方</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">diameter2</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; points)</span> </span>&#123;</div><div class="line">  <span class="built_in">vector</span>&lt;Point&gt; p = ConvexHull(points);</div><div class="line">  <span class="keyword">int</span> n = p.size();</div><div class="line">  <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> Dist2(p[<span class="number">0</span>], p[<span class="number">1</span>]);</div><div class="line">  p.push_back(p[<span class="number">0</span>]); <span class="comment">// 免得取模</span></div><div class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>, v = <span class="number">1</span>; u &lt; n; u++) &#123;</div><div class="line">    <span class="comment">// 一条直线贴住边p[u]-p[u+1]</span></div><div class="line">    <span class="keyword">for</span>(;;) &#123;</div><div class="line">      <span class="comment">// 当Area(p[u], p[u+1], p[v+1]) &lt;= Area(p[u], p[u+1], p[v])时停止旋转</span></div><div class="line">      <span class="comment">// 即Cross(p[u+1]-p[u], p[v+1]-p[u]) - Cross(p[u+1]-p[u], p[v]-p[u]) &lt;= 0</span></div><div class="line">      <span class="comment">// 根据Cross(A,B) - Cross(A,C) = Cross(A,B-C)</span></div><div class="line">      <span class="comment">// 化简得Cross(p[u+1]-p[u], p[v+1]-p[v]) &lt;= 0</span></div><div class="line">      <span class="keyword">int</span> diff = Cross(p[u+<span class="number">1</span>]-p[u], p[v+<span class="number">1</span>]-p[v]);</div><div class="line">      <span class="keyword">if</span>(diff &lt;= <span class="number">0</span>) &#123;</div><div class="line">        ans = max(ans, Dist2(p[u], p[v])); <span class="comment">// u和v是对踵点</span></div><div class="line">        <span class="keyword">if</span>(diff == <span class="number">0</span>) ans = max(ans, Dist2(p[u], p[v+<span class="number">1</span>])); <span class="comment">// diff == 0时u和v+1也是对踵点</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">      v = (v + <span class="number">1</span>) % n;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> T;</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">  <span class="keyword">while</span>(T--) &#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="built_in">vector</span>&lt;Point&gt; points;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">      <span class="keyword">int</span> x, y, w;</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;w);</div><div class="line">      points.push_back(Point(x, y));</div><div class="line">      points.push_back(Point(x+w, y));</div><div class="line">      points.push_back(Point(x, y+w));</div><div class="line">      points.push_back(Point(x+w, y+w));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, diameter2(points));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>平面扫描</title>
      <link href="/2018/04/19/%E5%B9%B3%E9%9D%A2%E6%89%AB%E6%8F%8F/"/>
      <url>/2018/04/19/%E5%B9%B3%E9%9D%A2%E6%89%AB%E6%8F%8F/</url>
      <content type="html"><![CDATA[<ol><li>扫描的方式一共有两种，一种是横向的沿着一个方向进行扫描统计；</li><li>另外的一种方式就是绕着一个固定的点进行相关的统计</li></ol><p>感觉更像是一种思想，找到扫描的策略是更关键的</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://poj.org/problem?id=2932" target="_blank" rel="external">poj 2932</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给你若干个圆，圆之间<code>没有交点</code>， 问有多少个圆不被其他的圆包含</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>由于没有交点，处理起来相对的容易一些：首先按照x进行排序，然后根据新进来的圆，再按照y的值判断<code>最近的两个圆</code>，看新的圆是否在这两个圆中。找几个特例判断就行了，并不会证明</li></ul><h2 id="未验证的代码"><a href="#未验证的代码" class="headerlink" title="未验证的代码"></a>未验证的代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e4</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></div><div class="line">    <span class="keyword">double</span> x, y, r;</div><div class="line">&#125;point[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">inside</span><span class="params">(<span class="keyword">int</span> id1, <span class="keyword">int</span> id2)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> dx = point[id1].x-point[id2].x;</div><div class="line">    <span class="keyword">int</span> dy = point[id1].y-point[id2].y;</div><div class="line">    <span class="keyword">return</span> (dx*dx+dy*dy)&lt;=point[id2].r*point[id2].r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; &gt; events;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        events.push_back(make_pair(point[i].x-point[i].r, i));</div><div class="line">        events.push_back(make_pair(point[i].x+point[i].r, i+n));</div><div class="line">    &#125;</div><div class="line">    sort(events.begin(), events.end());</div><div class="line">    <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; &gt; outer;<span class="comment">//记录的是y的值以及圆的序号</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>*n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> id = events[i].second%n;</div><div class="line">        <span class="keyword">if</span>(events[i].second&lt;n)&#123;</div><div class="line">            pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; temp = make_pair(point[id].y, id);</div><div class="line">            <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; &gt;::iterator it</div><div class="line">            = outer.lower_bound(temp);</div><div class="line">            <span class="keyword">if</span>(it!=outer.end() &amp;&amp; inside(id, it-&gt;second)) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(it!=outer.begin() &amp;&amp; inside(id, (--it)-&gt;second)) <span class="keyword">continue</span>;</div><div class="line">            outer.insert(temp);</div><div class="line">            ans.push_back(id);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            outer.erase(make_pair(point[id].y, id));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sort(ans.begin(), ans.end());</div><div class="line">    <span class="keyword">int</span> len = ans.size();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[len<span class="number">-1</span>]+<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>, &amp;point[i].r, &amp;point[i].x, &amp;point[i].y);</div><div class="line">        &#125;</div><div class="line">        solve();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="直线扫描（挑程2里面的题目）"><a href="#直线扫描（挑程2里面的题目）" class="headerlink" title="直线扫描（挑程2里面的题目）"></a>直线扫描（挑程2里面的题目）</h1><p>和x轴与Y轴垂直的若干条线段，问交点的个数。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>按照一维进行扫描(下面的讲解以扫描线平行于x轴为例)。若扫描线接触到线段的下端点，就将点插入到二叉树中。若遇到了平行于x轴的线，则在二叉树中查找相应线段范围内的点的个数。</p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cf-round754 div2</title>
      <link href="/2018/04/18/cf-round754-div2/"/>
      <url>/2018/04/18/cf-round754-div2/</url>
      <content type="html"><![CDATA[<p>cf中的一个数学题<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><a href="http://codeforces.com/contest/964" target="_blank" rel="external">round 754</a></p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>一开始我知道我写完肯定会T，但是还是写了下去，然而WA7，我想怎么会不是T呢，T了才有改进的动力啊。<br>第二天的中午才发现了问题，原来由于数的乘积非常的大，因此仅仅一次的取正是不行的。<br><code>num = (num+mod)%mod;</code>变成了<code>num = (num+mod*n)%mod;</code></p><p>然后当然就理所当然的T了。</p><p>对等式进行相应的化简<br><img src="http://latex.codecogs.com/gif.latex?\sum_{i=0}^{n}s_ia^{n-i}b^i&space;=&space;\sum_{i=0}^{k-1}s_ia^{n-i}b^i&plus;(\sum_{i=0}^{k-1}s_ia^{n-i}b^i)·(a^{-k}b^k)&plus;\dots&plus;(\sum_{i=0}^{k-1}s_ia^{n-i}b^i)(a^{-k\frac{n&plus;1}{k}-1}b^{k\frac{n&plus;1}{k}-1})\\&space;=&space;\sum_{i=0}^{k-1}s_ia^{n-i}b^i(1&plus;a^{-k}b^k&plus;a^{-2k}b^{2k}&plus;\dots&space;&plus;&space;a^{-k\frac{n&plus;1}{k}-1}b^{k\frac{n&plus;1}{k}-1})\\&space;=&space;\sum_{i=0}^{k-1}s_ia^{n-i}b^i*(\frac{1-(a^{-k}b^k)^{\frac{n&plus;1}{k}}}{1-(a^{-k}b^k)})" title="\sum_{i=0}^{n}s_ia^{n-i}b^i = \sum_{i=0}^{k-1}s_ia^{n-i}b^i+(\sum_{i=0}^{k-1}s_ia^{n-i}b^i)·(a^{-k}b^k)+\dots+(\sum_{i=0}^{k-1}s_ia^{n-i}b^i)(a^{-k\frac{n+1}{k}-1}b^{k\frac{n+1}{k}-1})\\ = \sum_{i=0}^{k-1}s_ia^{n-i}b^i(1+a^{-k}b^k+a^{-2k}b^{2k}+\dots + a^{-k\frac{n+1}{k}-1}b^{k\frac{n+1}{k}-1})\\ = \sum_{i=0}^{k-1}s_ia^{n-i}b^i*(\frac{1-(a^{-k}b^k)^{\frac{n+1}{k}}}{1-(a^{-k}b^k)})"></p><p>前面一部分用快速幂，因为1e9+9是质数，任意数对该数的逆元必定存在。后面的部分用逆元来搞就行了</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">9</span>;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b)</span></span>&#123;</div><div class="line">    ll ans = <span class="number">1l</span>l;</div><div class="line">    <span class="keyword">while</span>(b)&#123;</div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</div><div class="line">            ans=(ans*a)%mod;</div><div class="line">        &#125;</div><div class="line">        a = a*a%mod;</div><div class="line">        b&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">extgcd</span><span class="params">(ll a,ll b,ll&amp; d,ll&amp; x,ll&amp; y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!b)&#123; d=a; x=<span class="number">1</span>; y=<span class="number">0</span>;&#125;</div><div class="line">    <span class="keyword">else</span>&#123; extgcd(b,a%b,d,y,x); y-=x*(a/b); &#125;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">inverse</span><span class="params">(ll a,ll n)</span></span>&#123;</div><div class="line">    ll d,x,y;</div><div class="line">    extgcd(a,n,d,x,y);</div><div class="line">    <span class="keyword">return</span> d==<span class="number">1</span>?(x+n)%n:<span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">ll n ,a, b, k;</div><div class="line"><span class="built_in">string</span> op;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;k)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;op;</div><div class="line">        ll ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</div><div class="line">            ll num = <span class="number">0</span>;</div><div class="line">            <span class="keyword">char</span> temp = op[i];</div><div class="line">            <span class="keyword">if</span>(temp == <span class="string">'-'</span>)&#123;</div><div class="line">                num = (<span class="number">-1l</span>l)*pow_mod(a, n-i)*pow_mod(b, i)%mod;</div><div class="line">                num = (num+mod*n)%mod;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                num = pow_mod(a, n-i)*pow_mod(b, i)%mod;</div><div class="line">                num = (num+mod*n)%mod;</div><div class="line">            &#125;</div><div class="line">            ans = (ans+num+mod)%mod;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//cout&lt;&lt;ans&lt;&lt;endl;</span></div><div class="line">        ll q = (pow_mod(a, (mod<span class="number">-2</span>)*k)*pow_mod(b, k))%mod;</div><div class="line">        <span class="keyword">if</span>(q == <span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;ans*(n+<span class="number">1</span>)/k%mod&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            ll inverse_deno = inverse((q<span class="number">-1</span>), mod);</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;((ans*(pow_mod(q, (n+<span class="number">1</span>)/k)<span class="number">-1l</span>l)%mod)*inverse_deno%mod+n*mod)%mod&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>一个思考题，第一眼看上去感觉在删边的时候要不断的维护删除的信息，感觉不可做。<br>但是看了别人的题解之后，发现删除的时候并不不需要维护。从底向上不断的删除就行了</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先。若节点是偶数个，那么肯定不存在解，因为总共有奇数条边，每次删除偶数条边，最后不可能删完的。</p><p>d[i]: 表示的是i及i的子树中节点的总个数。<br>我们都是从d[i]为奇数的节点开始删除的，d[i]为奇数表示这个子树有偶数条边。因为从下往上删除，一定是符合要求的。<br>感觉这种不需要维护删除信息的思想非常的重要，把原来复杂的问题简单化。</p><p>还有，关同步大法好！！！！</p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    d[u] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">if</span>(num[u][i] == fa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            dfs(num[u][i], u);</div><div class="line">            d[u] += d[num[u][i]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = num[u][i];</div><div class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(d[v]%<span class="number">2</span>==<span class="number">0</span>)&#123;</div><div class="line">                solve(v, u);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;u&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = num[u][i];</div><div class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(d[v]%<span class="number">2</span>==<span class="number">1</span>)&#123;</div><div class="line">                solve(v, u);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</div><div class="line">        <span class="keyword">int</span> rt;</div><div class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">int</span> temp;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">cin</span>&gt;&gt;temp;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">                <span class="keyword">int</span> temp;</div><div class="line">                <span class="built_in">cin</span>&gt;&gt;temp;</div><div class="line">                <span class="keyword">if</span>(temp == <span class="number">0</span>) rt = i;</div><div class="line">                num[temp].push_back(i);</div><div class="line">            &#125;</div><div class="line">            dfs(rt, <span class="number">-1</span>);</div><div class="line">            solve(rt, <span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kdtree</title>
      <link href="/2018/04/18/kdtree/"/>
      <url>/2018/04/18/kdtree/</url>
      <content type="html"><![CDATA[<p>感觉kdtree是主席树的升级版，建树的过程非常的像，但是查询的过程不太一样</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>二维平面，给定n个点。\(1\le n\le 1e6\),后面有q个查询，(sx, tx, sy, ty)查询一个平面内点的个数。</p><h2 id="问题的升级版"><a href="#问题的升级版" class="headerlink" title="问题的升级版"></a>问题的升级版</h2><p>若有顶点的插入和删除，该怎么操作？（突然想起晚上打的cf里面的节点的删除该怎么样高效的进行操作？</p><p>巨巨说<code>主席树+带修</code>, 并没有什么思路。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>可以看看qsc推荐的知乎的一个教程，感觉可以理解一下。<br>通过中间的不断的切割，并且对x，y轴进行排序，从而降低查询的复杂度</p><h2 id="未验证的代码"><a href="#未验证的代码" class="headerlink" title="未验证的代码"></a>未验证的代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> pos;</div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    Node()&#123;&#125;;</div><div class="line">    Node(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r):pos(pos), l(l), r(r)&#123;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> id, x, y;</div><div class="line">    Point()&#123;&#125;;</div><div class="line">    Point(<span class="keyword">int</span> _id, <span class="keyword">int</span> _x, <span class="keyword">int</span> _y):id(_id), x(_x), y(_y)&#123;&#125;;</div><div class="line">    <span class="comment">//答案要求输出的结果按照输入点的顺序来</span></div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point &amp;p)<span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> id&lt;p.id;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(Point a, Point b)</span></span>&#123;<span class="keyword">return</span> a.x&lt;b.x;&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpy</span><span class="params">(Point a, Point b)</span></span>&#123;<span class="keyword">return</span> a.y&lt;b.y;&#125;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">Point p[maxn];</div><div class="line">Node node[maxn];</div><div class="line"><span class="keyword">int</span> rt;</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">make_kdtree</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> depth)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!(l&lt;r)) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</div><div class="line">    <span class="comment">//cout&lt;&lt;"test:"&lt;&lt;l&lt;&lt;" "&lt;&lt;mid&lt;&lt;" "&lt;&lt;r&lt;&lt;endl;</span></div><div class="line">    <span class="comment">//感觉kdree和主席树的区别就在这个地方</span></div><div class="line">    <span class="keyword">if</span>(depth%<span class="number">2</span> == <span class="number">0</span>)&#123;</div><div class="line">        sort(p+l, p+r, cmpx);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        sort(p+l, p+r, cmpy);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> t = rt++;</div><div class="line">    node[t].pos = mid;</div><div class="line">    node[t].l = make_kdtree(l, mid, depth+<span class="number">1</span>);</div><div class="line">    node[t].r = make_kdtree(mid+<span class="number">1</span>, r, depth+<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_node</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> sx, <span class="keyword">int</span> tx, <span class="keyword">int</span> sy, <span class="keyword">int</span> ty,</span></span></div><div class="line"><span class="function"><span class="params">          <span class="keyword">int</span> depth, <span class="built_in">vector</span>&lt;Point&gt; &amp;ans)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x = p[node[rt].pos].x;</div><div class="line">    <span class="keyword">int</span> y = p[node[rt].pos].y;</div><div class="line">    <span class="comment">//cout&lt;&lt;"test:"&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;</span></div><div class="line">    <span class="keyword">if</span>(x&gt;=sx&amp;&amp;x&lt;=tx&amp;&amp;y&lt;=ty&amp;&amp;y&gt;=sy)&#123;</div><div class="line">        ans.push_back(p[node[rt].pos]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(depth%<span class="number">2</span> == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(node[rt].l!=<span class="number">-1</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(sx&lt;=x)&#123;</div><div class="line">                find_node(node[rt].l, sx, tx, sy, ty, depth+<span class="number">1</span>, ans);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(node[rt].r!=<span class="number">-1</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(x&lt;=tx)&#123;</div><div class="line">                find_node(node[rt].r, sx, tx, sy, ty, depth+<span class="number">1</span>, ans);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span>(node[rt].l!=<span class="number">-1</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(sy&lt;=y)&#123;</div><div class="line">                find_node(node[rt].l, sx, tx,sy,ty, depth+<span class="number">1</span>, ans);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(node[rt].r!=<span class="number">-1</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(y&lt;=ty)&#123;</div><div class="line">                find_node(node[rt].r, sx, tx, sy, ty, depth+<span class="number">1</span>, ans);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> x, y;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            p[i].x = x, p[i].y = y, p[i].id = i;</div><div class="line">            node[i].l = node[i].r = node[i].pos = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        rt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> root = make_kdtree(<span class="number">0</span>, n, <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> q;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line"><span class="comment">//        for(int i=0; i&lt;=n; i++)&#123;</span></div><div class="line"><span class="comment">//            printf("%d: %d %d %d\n", i, node[i].pos, node[i].l, node[i].r);</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        <span class="keyword">int</span> sx, sy, tx, ty;</div><div class="line">        <span class="built_in">vector</span>&lt;Point&gt; ans;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;q; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;sx, &amp;tx, &amp;sy, &amp;ty);</div><div class="line">            ans.clear();</div><div class="line">            find_node(root, sx, tx, sy, ty, <span class="number">0</span>, ans);</div><div class="line">            sort(ans.begin(), ans.end());</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;Point&gt;::iterator it = ans.begin(); it!=ans.end();</div><div class="line">                        it++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, it-&gt;id);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">6</span></div><div class="line"><span class="comment">2 1</span></div><div class="line"><span class="comment">2 2</span></div><div class="line"><span class="comment">4 2</span></div><div class="line"><span class="comment">6 2</span></div><div class="line"><span class="comment">3 3</span></div><div class="line"><span class="comment">5 4</span></div><div class="line"><span class="comment">2</span></div><div class="line"><span class="comment">2 4 0 4</span></div><div class="line"><span class="comment">4 10 2 5</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="comment">//output</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">0</span></div><div class="line"><span class="comment">1</span></div><div class="line"><span class="comment">2</span></div><div class="line"><span class="comment">4</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">2</span></div><div class="line"><span class="comment">3</span></div><div class="line"><span class="comment">5</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kdtree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kuangbin最短路专题</title>
      <link href="/2018/04/17/kuangbin%E6%9C%80%E7%9F%AD%E8%B7%AF%E4%B8%93%E9%A2%98/"/>
      <url>/2018/04/17/kuangbin%E6%9C%80%E7%9F%AD%E8%B7%AF%E4%B8%93%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>最短路专题</p><a id="more"></a><p><a href="https://vjudge.net/contest/166930#overview" target="_blank" rel="external">kuangbin带你飞专题4最短路</a></p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>一个很裸的最短路问题，但是我又又又被卡了好久啊。<br>因为可能会有重边，而且数据读入的顺序和我平时的顺序不太一样，导致一直被卡。。。</p><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>是一个完全图，最后特别要注意一个东西！<br><code>printf() 函数中不存在 %lf ，输入 double 用 %lf 输出用 %f</code><br>输出格式害人一直以为的东西竟然是错的emmm<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</div><div class="line"><span class="keyword">double</span> dis[maxn];</div><div class="line"><span class="keyword">double</span> G[maxn][maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">&#125;point[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="number">1.0</span>*(x1-x2)*(x1-x2)+<span class="number">1.0</span>*(y1-y2)*(y1-y2));</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) dis[i] = INF;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">    dis[s] = <span class="number">0</span>;</div><div class="line">    priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; pq;</div><div class="line">    pq.push(P(<span class="number">0</span>, s));</div><div class="line">    <span class="keyword">while</span>(!pq.empty())&#123;</div><div class="line">        P temp = pq.top();</div><div class="line">        pq.pop();</div><div class="line">        <span class="keyword">int</span> u = temp.second;</div><div class="line">        <span class="keyword">if</span>(dis[u]&lt;temp.first) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(dis[i]&gt;max(dis[u], G[u][i]))&#123;</div><div class="line">                dis[i] = max(dis[u], G[u][i]);</div><div class="line">                pq.push(P(dis[i], i));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Frog Distance = %.3f\n\n"</span>, dis[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">     <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)&amp;&amp;n)&#123;</div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;point[i].x, &amp;point[i].y);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(i == j) G[i][j] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    G[i][j] = cal(point[i].x, point[i].y, point[j].x, point[j].y);</div><div class="line">                    G[j][i] = G[i][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d\n"</span>, ++kase);</div><div class="line">        dijk();</div><div class="line">     &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="c"><a href="#c" class="headerlink" title="c"></a>c</h1><p>要求找到一个路径从1到n，使得这条路径上的最小的边权最大<br>还是用不断的拓展的思想，每次用最大的边进行拓展，所以优先队列用<code>less&lt;P&gt;</code>, 然后注意dis[]的初始化，应该还是比较的简单的。<br>关键就是不断拓展的思想<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v, weight;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Node&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) dis[i] = <span class="number">-1</span>;</div><div class="line">    priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, less&lt;P&gt; &gt; pq;</div><div class="line">    pq.push(P(<span class="number">0</span>, s));</div><div class="line">    dis[s] = INF;</div><div class="line">    <span class="keyword">while</span>(!pq.empty())&#123;</div><div class="line">        P temp = pq.top();</div><div class="line">        pq.pop();</div><div class="line">        <span class="keyword">int</span> u = temp.second;</div><div class="line">        <span class="keyword">if</span>(temp.first&gt;dis[u]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][i].v;</div><div class="line">            <span class="keyword">int</span> weight = G[u][i].weight;</div><div class="line">            <span class="keyword">if</span>(dis[v]&lt;min(dis[u], weight))&#123;</div><div class="line">                dis[v] = min(dis[u], weight);</div><div class="line">                pq.push(P(dis[v], v));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">int</span> kase = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v, weight;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            G[u].push_back(Node&#123;v, weight&#125;);</div><div class="line">            G[v].push_back(Node&#123;u, weight&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d:\n"</span>, kase++);</div><div class="line">        dijk(<span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n\n"</span>, dis[n]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>反向建边，跑单源最短路<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> v, weight;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G1[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G2[maxn];</div><div class="line"><span class="keyword">int</span> dis1[maxn];</div><div class="line"><span class="keyword">int</span> dis2[maxn];</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="keyword">int</span> n, m, x;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">(<span class="built_in">vector</span>&lt;Edge&gt; *G, <span class="keyword">int</span> *dis)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) dis[i] = INF;</div><div class="line">    dis[x] = <span class="number">0</span>;</div><div class="line">    priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; pq;</div><div class="line">    pq.push(P(<span class="number">0</span>, x));</div><div class="line">    <span class="keyword">while</span>(!pq.empty())&#123;</div><div class="line">        P temp = pq.top();</div><div class="line">        pq.pop();</div><div class="line">        <span class="keyword">int</span> u = temp.second;</div><div class="line">        <span class="keyword">if</span>(temp.first&gt;dis[u]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][i].v;</div><div class="line">            <span class="keyword">int</span> weight = G[u][i].weight;</div><div class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+weight)&#123;</div><div class="line">                dis[v] = dis[u]+weight;</div><div class="line">                pq.push(P(dis[v], v));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;x))&#123;</div><div class="line">        <span class="keyword">int</span> u, v, weight;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)&#123;</div><div class="line">            G1[i].clear();</div><div class="line">            G2[i].clear();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            G1[u].push_back(Edge&#123;v, weight&#125;);</div><div class="line">            G2[v].push_back(Edge&#123;u, weight&#125;);</div><div class="line">        &#125;</div><div class="line">        dijk(G2, dis2);</div><div class="line">        dijk(G1, dis1);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(i == x) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span> ans = max(ans, dis1[i]+dis2[i]);</div><div class="line">            <span class="comment">//printf("%d %d %d\n", i, dis1[i], dis2[i]);</span></div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>最小成本排序</title>
      <link href="/2018/04/15/%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/04/15/%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>它的思想很巧妙</p><a id="more"></a><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>给定一串数字，使得它们之间两两交换，交换的代价为两个数字的和，最后使得这一串数字变得有序。问最小的权重是多少？</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我们经过找规律，发现了下面的规律：</p><ul><li><p>数字与位置能构成若干个环，环内的最小的元素，作为交换的媒介，不断的使数组变得有序，代价为：<br>\(\sum w_{i}+(n-2)·min(w_i)\)， 这里讨论的都是环内的元素</p></li><li><p>但是不光是每一个环内的元素， 我们还要借助其环内的最小的元素。<br>例如：(2 1) (8 10 7 9),若按照上面的规则进行相应的变换，最小的权重为51.事实上，我们可以将7和1进行交换，然后1作为媒介进行交换，最后回来，最小的权重为49.公式为：\(\sum w_i+(n-2)·min\_circle+2·(min\_circl+min\_global)-(n-1)·(min\_circle-min\_global)\)后面的在前面的基础之上分别是<code>两圈交换的代价</code>和<code>全局最小元素最为媒介减少的代价</code></p></li></ul><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">6</span></div><div class="line"><span class="comment">2 1 8 10 7 9</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> id[maxv];</div><div class="line"><span class="keyword">int</span> weight[maxn];</div><div class="line"><span class="keyword">int</span> temp[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> min_value;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        temp[i] = weight[i];</div><div class="line">    &#125;</div><div class="line">    sort(temp, temp+n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) id[temp[i]] = i;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> cur = i;</div><div class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> w = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> min_weight = <span class="number">1e9</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">            vis[cur] = <span class="literal">true</span>;</div><div class="line">            min_weight = min(min_weight, weight[cur]);</div><div class="line">            number++;</div><div class="line">            w+=weight[cur];</div><div class="line">            cur = id[weight[cur]];</div><div class="line">            <span class="keyword">if</span>(vis[cur]) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        ans += min(w+(number<span class="number">-2</span>)*min_weight,</div><div class="line">                   w+(number<span class="number">-2</span>)*min_weight+<span class="number">2</span>*(min_value+min_weight)</div><div class="line">                   -(number<span class="number">-1</span>)*(min_weight-min_value));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        min_value = <span class="number">1e9</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;weight[i]);</div><div class="line">            min_value = min(min_value, weight[i]);</div><div class="line">        &#125;</div><div class="line">        solve();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>上次去NWU的预热赛有一个交换的问题，就是判断有多少个圈的问题</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kuangbin带你飞专题一</title>
      <link href="/2018/04/03/kuangbin%E5%B8%A6%E4%BD%A0%E9%A3%9E%E4%B8%93%E9%A2%98%E4%B8%80/"/>
      <url>/2018/04/03/kuangbin%E5%B8%A6%E4%BD%A0%E9%A3%9E%E4%B8%93%E9%A2%98%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>我也想好好刷题，但是没人监督<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><a href="https://vjudge.net/contest/65959#overview" target="_blank" rel="external">kuangbin带你飞专题一</a></p><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>一个简单的bfs，就是退出的条件有一点不懂啊<br>在while里面写成这样:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(q.empty())&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><p>就是错误的emmm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line">#include &lt;cstdio&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line">int c, n, m;</div><div class="line">const int maxn = 35;</div><div class="line">char mp[maxn][maxn][maxn];</div><div class="line">int dz[6] = &#123;0, 0, 0, 0, 1, -1&#125;;</div><div class="line">int dx[6] = &#123;1, -1, 0, 0, 0, 0&#125;;</div><div class="line">int dy[6] = &#123;0, 0, 1, -1, 0, 0&#125;;</div><div class="line">int sx, sy, sz;</div><div class="line">int tx, ty, tz;</div><div class="line">bool vis[maxn][maxn][maxn];</div><div class="line">struct Node&#123;</div><div class="line">    int x, y, z;</div><div class="line">    int tot;</div><div class="line">    Node(int a, int b, int c, int num):x(a), y(b), z(c), tot(num)&#123;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">bool judge(int x, int y, int z)&#123;</div><div class="line">    if(vis[z][x][y] == true) return false;</div><div class="line">    if(x&lt;0||x&gt;=n) return false;</div><div class="line">    if(y&lt;0||y&gt;=m) return false;</div><div class="line">    if(z&lt;0||z&gt;=c) return false;</div><div class="line">    if(mp[z][x][y] == &apos;#&apos;) return false;</div><div class="line">    if(z == sz&amp;&amp;x == sx&amp;&amp;y == sy) return false;</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line">int bfs(int x, int y, int z)&#123;</div><div class="line">    Node temp = Node&#123;x, y, z, 0&#125;;</div><div class="line">    queue&lt;Node&gt; q;</div><div class="line">    q.push(temp);</div><div class="line">    vis[z][x][y] = true;</div><div class="line">    while(!q.empty())&#123;</div><div class="line">        Node temp1 = q.front();</div><div class="line">        q.pop();</div><div class="line">        if(temp1.x == tx&amp;&amp;temp1.y == ty&amp;&amp;temp1.z == tz)&#123;</div><div class="line">            return temp1.tot;</div><div class="line">        &#125;</div><div class="line">        for(int i=0; i&lt;6; i++)&#123;</div><div class="line">            int nx = temp1.x+dx[i];</div><div class="line">            int ny = temp1.y+dy[i];</div><div class="line">            int nz = temp1.z+dz[i];</div><div class="line">            int step = temp1.tot+1;</div><div class="line">            if(judge(nx, ny, nz))&#123;</div><div class="line">                vis[nz][nx][ny] = true;</div><div class="line">                q.push(Node&#123;nx, ny, nz, step&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return -1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    while(cin&gt;&gt;c&gt;&gt;n&gt;&gt;m&amp;&amp;(n+m+c)!=0)&#123;</div><div class="line">        getchar();</div><div class="line">        memset(vis, 0, sizeof(vis));</div><div class="line">        for(int i=0; i&lt;c; i++)&#123;</div><div class="line">            for(int j=0; j&lt;n; j++)&#123;</div><div class="line">                for(int k=0; k&lt;m; k++)&#123;</div><div class="line">                    cin&gt;&gt;mp[i][j][k];</div><div class="line">                    if(mp[i][j][k] == &apos;S&apos;)&#123;</div><div class="line">                        sz = i, sx = j, sy = k;</div><div class="line">                        //cout&lt;&lt;sz&lt;&lt;&quot; &quot;&lt;&lt;sx&lt;&lt;&quot; &quot;&lt;&lt;sy&lt;&lt;endl;</div><div class="line">                    &#125;</div><div class="line">                    else if(mp[i][j][k] == &apos;E&apos;)&#123;</div><div class="line">                        tz = i, tx = j, ty = k;</div><div class="line">                        //cout&lt;&lt;tz&lt;&lt;&quot; &quot;&lt;&lt;tx&lt;&lt;&quot; &quot;&lt;&lt;ty&lt;&lt;endl;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        int tot = bfs(sx, sy, sz);</div><div class="line">        if(tot!=-1)&#123;</div><div class="line">            printf(&quot;Escaped in %d minute(s).\n&quot;, tot);</div><div class="line">        &#125;</div><div class="line">        else printf(&quot;Trapped!\n&quot;);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="c"><a href="#c" class="headerlink" title="c"></a>c</h1><p>一个简单的bfs状态搜索，但是卡了我一个下午！！<br>函数一定要在最外面有一个返回值！！！！！！！return 0；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, step;</div><div class="line">    Node()&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;step = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>-&gt;x = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">    Node s;</div><div class="line">    s.step = <span class="number">0</span>;</div><div class="line">    s.x = n;</div><div class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</div><div class="line">    q.push(s);</div><div class="line">    vis[n] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        Node temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">if</span>(temp.x == k) <span class="keyword">return</span> temp.step;</div><div class="line">        Node temp1;</div><div class="line">        <span class="keyword">int</span> nex;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>) nex = temp.x<span class="number">-1</span>;</div><div class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>) nex = temp.x+<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(i == <span class="number">2</span>) nex = temp.x*<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nex&lt;<span class="number">0</span>||nex&gt;<span class="number">100000</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(!vis[nex])&#123;</div><div class="line">                vis[nex] = <span class="literal">true</span>;</div><div class="line">                temp1.x = nex;</div><div class="line">                temp1.step = temp.step+<span class="number">1</span>;</div><div class="line">                q.push(temp1);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要在外面返回一个值，不然就要gg!!</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))&#123;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,bfs());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="E-find-the-multiple"><a href="#E-find-the-multiple" class="headerlink" title="E find the multiple"></a>E find the multiple</h1><p>用dfs然后超时了emmmm<br>打表大法好啊<br>把主程序放上来吧<br>有一个小的知识点就是超大整数判断能否整除一个整数，要用到<code>模拟除法</code>的运算过程<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</div><div class="line"><span class="keyword">char</span> ans[maxn];</div><div class="line"><span class="keyword">char</span> ans1[<span class="number">201</span>][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">char</span>* ch, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</div><div class="line">    num %= n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len; i++)&#123;</div><div class="line">        num = num*<span class="number">10</span>+ch[i]-<span class="string">'0'</span>;</div><div class="line">        num %= n;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>* ch, <span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(index&gt;=<span class="number">100</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(judge(ch, index))&#123;</div><div class="line">        ch[index+<span class="number">1</span>] = <span class="string">'\0'</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ch);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        ch[index+<span class="number">1</span>] = <span class="string">'0'</span>;</div><div class="line">        <span class="keyword">if</span>(dfs(ch, index+<span class="number">1</span>))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        ch[index+<span class="number">1</span>] = <span class="string">'1'</span>;</div><div class="line">        <span class="keyword">if</span>(dfs(ch, index+<span class="number">1</span>))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ans[<span class="number">0</span>] = <span class="string">'1'</span>;</div><div class="line">    freopen(<span class="string">"ans.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">for</span> (n=<span class="number">1</span>; n&lt;=<span class="number">200</span>; n++)</div><div class="line">    &#123;</div><div class="line">        dfs(ans, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="F-find-prime-path"><a href="#F-find-prime-path" class="headerlink" title="F find prime path"></a>F find prime path</h1><p>一个很裸的bfs</p><font color="#FF3030"><strong>注意vis[]的访问顺序</strong></font><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">bool</span> prime[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(prime, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="literal">false</span>));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!prime[i])&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*i; j&lt;=maxn; j+=i)&#123;</div><div class="line">                prime[j] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans[<span class="number">4</span>];</div><div class="line">    ans[<span class="number">0</span>] = n/<span class="number">1000</span>;</div><div class="line">    ans[<span class="number">1</span>] = (n/<span class="number">100</span>)%<span class="number">10</span>;</div><div class="line">    ans[<span class="number">2</span>] = (n/<span class="number">10</span>)%<span class="number">10</span>;</div><div class="line">    ans[<span class="number">3</span>] = n%<span class="number">10</span>;</div><div class="line">    <span class="keyword">if</span>(ans[i] == j) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    ans[i] = j;</div><div class="line">    <span class="keyword">return</span> ans[<span class="number">0</span>]*<span class="number">1000</span>+ans[<span class="number">1</span>]*<span class="number">100</span>+ans[<span class="number">2</span>]*<span class="number">10</span>+ans[<span class="number">3</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    ans[n] = <span class="number">0</span>;</div><div class="line">    q.push(n);</div><div class="line">    vis[n] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">int</span> temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">if</span>(temp == m)&#123;</div><div class="line">            <span class="keyword">return</span> ans[temp];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=<span class="number">9</span>; j++)&#123;</div><div class="line">                <span class="keyword">int</span> new_num = trans(temp, i, j);</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(new_num&lt;=<span class="number">1000</span>) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(new_num == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(vis[new_num]||prime[new_num]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    q.push(new_num);</div><div class="line">                    vis[new_num] = <span class="literal">true</span>;</div><div class="line">                    ans[new_num] = ans[temp]+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, bfs(n));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br># <font color="#FF3030">未解决的问题</font>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>组合游戏</title>
      <link href="/2018/03/27/%E7%BB%84%E5%90%88%E6%B8%B8%E6%88%8F/"/>
      <url>/2018/03/27/%E7%BB%84%E5%90%88%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<p>本文不涉及博弈论初始知识的讲解，对SG函数进行一定的说明，以及应用。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="学习的博客"><a href="#学习的博客" class="headerlink" title="学习的博客"></a>学习的博客</h1><p><a href="https://blog.csdn.net/strangedbly/article/details/51137432" target="_blank" rel="external">详解博弈论</a></p><h1 id="SG函数"><a href="#SG函数" class="headerlink" title="SG函数"></a>SG函数</h1><p>\(SG(x) = mex(all possible solutions)\)<br>比如，取一堆中的石子</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阶梯博弈</title>
      <link href="/2018/03/24/%E9%98%B6%E6%A2%AF%E5%8D%9A%E5%BC%88/"/>
      <url>/2018/03/24/%E9%98%B6%E6%A2%AF%E5%8D%9A%E5%BC%88/</url>
      <content type="html"><![CDATA[<p>两位巨巨全程carry我，tql.<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>有n个阶梯，每个阶梯上放有不同的石子数量，每一次可以移动大于等于1的数量的石子到前面一个阶梯。最后不能移动石子的人为输。问先手必胜or必败。<br>最后所有的石子都会移到地面。（n个阶梯编号从1开始）</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>当移动奇数阶梯上面的石子到偶数阶梯上面的时候，相当于拿走了石子。<br>当移动偶数阶梯上面的石子到奇数阶梯上面的时候，我们可以在把这个奇数阶梯上面同样多的石子数移动到偶数阶梯上面（肯定是可以移动的，因为有地面！）。奇数阶梯上面的石子的状态保持不变。</p><p>综上，对奇数阶梯上面的石子进行亦或和就可以了。<br><a href="https://blog.csdn.net/liangzhaoyang1/article/details/51213003" target="_blank" rel="external">staircase nim</a></p><h2 id="具体的题目"><a href="#具体的题目" class="headerlink" title="具体的题目"></a>具体的题目</h2><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>折半枚举</title>
      <link href="/2018/03/23/%E6%8A%98%E5%8D%8A%E6%9E%9A%E4%B8%BE/"/>
      <url>/2018/03/23/%E6%8A%98%E5%8D%8A%E6%9E%9A%E4%B8%BE/</url>
      <content type="html"><![CDATA[<p>指数级别的搜素，进行折半枚举之后，指数变为原来的一半<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5616" target="_blank" rel="external">HDU5616 Jam’s balance</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>就是看给一定重量的砝码看能不能称出来</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>最最开始想到的就是暴力枚举，时间复杂度为\(O(m3^n)\).<br>但是这样肯定会T啊。<br>于是就有了折半枚举这种操作，时间复杂度为\(O(m3^{\frac{n}{2}})\).</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><h2 id="它解"><a href="#它解" class="headerlink" title="它解"></a>它解</h2><p>01背包：<br>正向枚举的时候，枚举了放砝码的情形。</p><p>再枚举一次，枚举不放砝码和减去砝码的情形，感觉还是很巧妙的。</p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20</span>*<span class="number">100</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> weight[<span class="number">25</span>];</div><div class="line"><span class="keyword">bool</span> bag[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    bag[<span class="number">0</span>] = <span class="literal">true</span>;</div><div class="line">    <span class="comment">//包含了用这个砝码和不用这个砝码的情况</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=maxn; j&gt;=weight[i]; j--)&#123;</div><div class="line">            bag[j] |= bag[j-weight[i]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//反向减去砝码</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=weight[i]; j&lt;maxn; j++)&#123;</div><div class="line">            bag[j-weight[i]] |= bag[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> t;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">        <span class="keyword">while</span>(t--)&#123;</div><div class="line">            <span class="built_in">memset</span>(bag, <span class="number">0</span>, <span class="keyword">sizeof</span>(bag));</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;weight[i]);</div><div class="line">            solve();</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;m;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">                <span class="keyword">int</span> wei;</div><div class="line">                <span class="built_in">cin</span>&gt;&gt;wei;</div><div class="line">                <span class="keyword">if</span>(bag[wei])&#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>水一发博客</title>
      <link href="/2018/03/22/%E6%B0%B4%E4%B8%80%E5%8F%91%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/03/22/%E6%B0%B4%E4%B8%80%E5%8F%91%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>近期疯狂点技能点ing。<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br>无意间翻到了大一上学期看到的一篇博客<br><a href="https://blog.csdn.net/bbtl_ast/article/details/53750051" target="_blank" rel="external">一位ACMer详尽的规划</a><br>当时看到这篇博文的时候真的是一脸懵逼，里面的一大堆名词从来都没有听过，然后就堆积博客仓库了。。。<br>不过现在再看看这篇博文的时候，就感觉不过如此嘛，剩下的就是深造各种技能点吧。<br>心中也慢慢的有了奋斗的目标，想先提升自己的码力，然后做一些有意思的事情。<br>计院新开了大数据的方向，我可能在网络和大数据之间选择吧。<br>先提升提升自己爬虫的能力，然而爬虫涉及到的知识，不仅多，到后期还非常的深，需要打下坚实的网络分析的基础。而这学期的计算机网络通信可能是一个很好的切入点吧。<br>最后，还是自说自话，加油↖(^ω^)↗</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>polya定理的应用</title>
      <link href="/2018/03/22/polya%E5%AE%9A%E7%90%86%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2018/03/22/polya%E5%AE%9A%E7%90%86%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>前两天本来是开了单独的一个组合数学的博文，但是发现里面的知识点基本都会了，特地把这个定理拿出来讲解。<br>感觉最近一直在学习新的算法，过得很充实，但是总是隐隐感觉不太对劲，没有形成自己的思维。后两周的比赛加油啊。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="一道题目"><a href="#一道题目" class="headerlink" title="一道题目"></a>一道题目</h1><p>有一个2*2的方阵，用黑白两种颜色进行染色，通过旋转重合的方案算是同一种方案，问有多少种不同的方案。<br><img src="https://t1.picb.cc/uploads/2018/03/22/2gscPt.png" alt=""><br>这道题目的答案是6，怎么样解决这个问题呢？</p><h2 id="Burnside引理"><a href="#Burnside引理" class="headerlink" title="Burnside引理"></a>Burnside引理</h2><p>{g1, g2, g3, g4} = {旋转0°， 逆时针旋转90°，逆时针旋转180°, 逆时针旋转270° };</p><p><font color="#FF3030"><strong>注释：集合中任意种变化的组合必须包含在集合中，即必须要具有封闭性。</strong></font><br><img src="https://t1.picb.cc/uploads/2018/03/22/2gs5u1.png" alt=""><br><img src="http://latex.codecogs.com/gif.latex?\frac{\sum{fixed\quad&space;points}}{transpose&space;number}&space;=&space;\frac{\sum_{g\in&space;G}D(g)}{\left&space;|&space;G&space;\right&space;|}=\frac{16&plus;2&plus;4&plus;2}{4}=6" title="\frac{\sum{fixed\quad points}}{transpose number} = \frac{\sum_{g\in G}D(g)}{\left | G \right |}=\frac{16+2+4+2}{4}=6"></p><p>Burnside引理具体要计算每一种变换的不动点的数目，时间复杂度是指数级别的。<br>因此，就引入了Polya定理（然而并不会证明）</p><h2 id="Polya定理"><a href="#Polya定理" class="headerlink" title="Polya定理"></a>Polya定理</h2><ul><li>G是{1,2,…,n}的一个置换群</li><li>用m种颜色给1~n进行染色，不同染色方案数为</li></ul><p>首先对每一个格子进行相应的编号，称之为标准态：<br><img src="http://latex.codecogs.com/gif.latex?\begin{bmatrix}&space;1&space;&&space;2\\&space;3&space;&&space;4&space;\end{bmatrix}" title="\begin{bmatrix} 1 & 2\\ 3 & 4 \end{bmatrix}"></p><p><img src="https://t1.picb.cc/uploads/2018/03/22/2gszI6.png" alt=""></p><p><img src="http://latex.codecogs.com/gif.latex?\frac{\sum_{g\in&space;G}&space;circular\quad&space;sections}{transpose\quad&space;numbers}=\frac{\sum_{g\in&space;G}m^{c(g)}}{\left&space;|&space;G&space;\right&space;|}=\frac{2^4&plus;2^1&plus;2^2&plus;2^1}{4}=6" title="\frac{\sum_{g\in G} circular\quad sections}{transpose\quad numbers}=\frac{\sum_{g\in G}m^{c(g)}}{\left | G \right |}=\frac{2^4+2^1+2^2+2^1}{4}=6"><br>其中，c(g)表示在g这种姿态下的循环节的个数。</p><h1 id="Qusetion-Polya能替代Burnside定理吗？"><a href="#Qusetion-Polya能替代Burnside定理吗？" class="headerlink" title="Qusetion:Polya能替代Burnside定理吗？"></a>Qusetion:Polya能替代Burnside定理吗？</h1><h1 id="珠子的染色问题"><a href="#珠子的染色问题" class="headerlink" title="珠子的染色问题"></a>珠子的染色问题</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="">poj 2409</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><ul><li>给定一个珠子的颜色数目为c， 珠子的个数为s。其中翻转、旋转后与之前的情形有重复的情况的条件下，算一种染色方案。</li><li>问一共有多少种不同的染色方案</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>Polya定理的应用：<br>分两种情况：</p><h4 id="旋转："><a href="#旋转：" class="headerlink" title="旋转："></a>旋转：</h4><p>一个有n种旋转方式：{转动0个珠子， 转动1个珠子, …, 转动i个珠子，…, 转动n-1个珠子}。<br>其中\(\frac{n}{gcd(n, i)}\)个珠子构成一个循环节，那么一共有gcd(n, i)个循环节。<br><img src="http://latex.codecogs.com/gif.latex?total\quad&space;circular\quad&space;sections&space;=&space;{\sum_{i=0}^{n-1}c^{gcd(n,&space;i)}}" title="total\quad circular\quad sections = {\sum_{i=0}^{n-1}c^{gcd(n, i)}}"></p><h4 id="翻转："><a href="#翻转：" class="headerlink" title="翻转："></a>翻转：</h4><p>有两种情况：</p><h5 id="当n为奇数的时候："><a href="#当n为奇数的时候：" class="headerlink" title="当n为奇数的时候："></a>当n为奇数的时候：</h5><p>有n条翻转的对称轴，两个珠子为一组，构成\(\frac{n-1}{2}\)个循环节，剩下的一个珠子单独构成一个循环节。<br><img src="http://latex.codecogs.com/gif.latex?n*c^{\frac{n-1}{2}&plus;1}" title="n*c^{\frac{n-1}{2}+1}"></p><h5 id="当n为偶数的时候："><a href="#当n为偶数的时候：" class="headerlink" title="当n为偶数的时候："></a>当n为偶数的时候：</h5><p>当一条对称轴穿过两个珠子的情况：<br>共有\(\frac{n}{2}\)条对称轴，两个珠子为一组，构成\(\frac{n-2}{2}\)个循环节，剩下在对称轴上面的两个珠子构成两个循环节。一共构成<img src="http://latex.codecogs.com/gif.latex?\frac{n-2}{2}&plus;2" title="\frac{n-2}{2}+2">个循环节。<br><img src="http://latex.codecogs.com/gif.latex?\frac{n}{2}*c^{\frac{n-2}{2}&plus;2}" title="\frac{n}{2}*c^{\frac{n-2}{2}+2}"></p><p>当对称轴不穿过任何的珠子的时候，以对称轴为中心，两个为一组，构成\(\frac{n}{2}\)个循环节。<br><img src="http://latex.codecogs.com/gif.latex?\frac{n}{2}*c^{\frac{n}{2}}" title="\frac{n}{2}*c^{\frac{n}{2}}"></p><h4 id="变换的种类的个数"><a href="#变换的种类的个数" class="headerlink" title="变换的种类的个数"></a>变换的种类的个数</h4><p>旋转有n种变换，翻转的时候，不论奇偶，都有n种变换。总共有2n种变换</p><h3 id="总的式子"><a href="#总的式子" class="headerlink" title="总的式子"></a>总的式子</h3><p><img src="http://latex.codecogs.com/gif.latex?ans&space;=&space;\left\{\begin{matrix}&space;\frac{\sum_{i=0}^{n-1}c^{gcd(n,&space;i)}&plus;n*c^{\frac{n-1}{2}&plus;1}}{2*n},n\quad&space;is\quad&space;a\quad&space;prime\\&space;\frac{\sum_{i=0}^{n-1}c^{gcd(n,&space;i)}&plus;\frac{n}{2}*c^{\frac{n-2}{2}&plus;2}&plus;\frac{n}{2}*c^{\frac{n}{2}}}{2*n},&space;n\quad&space;is\quad&space;not\quad&space;a\quad&space;prime&space;\end{matrix}\right." title="ans = \left\{\begin{matrix} \frac{\sum_{i=0}^{n-1}c^{gcd(n, i)}+n*c^{\frac{n-1}{2}+1}}{2*n},n\quad is\quad a\quad prime\\ \frac{\sum_{i=0}^{n-1}c^{gcd(n, i)}+\frac{n}{2}*c^{\frac{n-2}{2}+2}+\frac{n}{2}*c^{\frac{n}{2}}}{2*n}, n\quad is\quad not\quad a\quad prime \end{matrix}\right."></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> c, s;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;c&gt;&gt;s)&#123;</div><div class="line">        <span class="keyword">if</span>(c+s == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(s%<span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s; i++)&#123;</div><div class="line">                <span class="keyword">int</span> mul = <span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;__gcd(s, i); j++)&#123;</div><div class="line">                    mul*=c;</div><div class="line">                &#125;</div><div class="line">                ans+=mul;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> mul = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(s<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>; i++)&#123;</div><div class="line">                mul*=c;</div><div class="line">            &#125;</div><div class="line">            ans += s*mul;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;ans/(<span class="number">2</span>*s)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s; i++)&#123;</div><div class="line">                <span class="keyword">int</span> mul = <span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;__gcd(s, i); j++)&#123;</div><div class="line">                    mul*=c;</div><div class="line">                &#125;</div><div class="line">                ans+=mul;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> mul = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s/<span class="number">2</span>; i++)&#123;</div><div class="line">                mul*=c;</div><div class="line">            &#125;</div><div class="line">            ans += s/<span class="number">2</span>*mul;</div><div class="line">            mul = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(s<span class="number">-2</span>)/<span class="number">2</span>+<span class="number">2</span>; i++)&#123;</div><div class="line">                mul*=c;</div><div class="line">            &#125;</div><div class="line">            ans += s/<span class="number">2</span>*mul;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;ans/(<span class="number">2</span>*s)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为这道题目规模比较的小，还可以直接写出这些置换，用Burnside.</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1><p>Polya能代替Burnside吗</p>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>online latex公式编辑技巧的积累</title>
      <link href="/2018/03/21/online-latex%E5%85%AC%E5%BC%8F%E7%BC%96%E8%BE%91%E6%8A%80%E5%B7%A7%E7%9A%84%E7%A7%AF%E7%B4%AF/"/>
      <url>/2018/03/21/online-latex%E5%85%AC%E5%BC%8F%E7%BC%96%E8%BE%91%E6%8A%80%E5%B7%A7%E7%9A%84%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<p>在线编辑公式然后嵌入到md文件中是真的好用啊。<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">mathjax语法网站</a></p><h1 id="编辑大括号"><a href="#编辑大括号" class="headerlink" title="编辑大括号"></a>编辑大括号</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">\left \&#123; &#123;\begin&#123;array&#125;&#123;*&#123;20&#125;&#123;c&#125;&#125; &#123;&#123;x_k&#125; = &#123;x_m&#125; - &#123;x_n&#125;&#125;\\ &#123;&#123;x_m&#125;,&#123;x_n&#125; \ge 0&#125; \end&#123;array&#125;&#125; \right.</div><div class="line"></div><div class="line">- \infty \le &#123;x_k&#125; \le + \infty \Rightarrow \left\&#123; &#123;\begin&#123;array&#125;&#123;*&#123;20&#125;&#123;c&#125;&#125; &#123;&#123;x_k&#125; = &#123;x_m&#125; - &#123;x_n&#125;&#125;\\ &#123;&#123;x_m&#125;,&#123;x_n&#125; \ge 0&#125; \end&#123;array&#125;&#125; \right.</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>数论</title>
      <link href="/2018/03/20/%E6%95%B0%E8%AE%BA/"/>
      <url>/2018/03/20/%E6%95%B0%E8%AE%BA/</url>
      <content type="html"><![CDATA[<p>数论的知识点的总结，可能不会很注重结论的证明emmmmm。然而并不会证啊<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="欧拉函数及其应用"><a href="#欧拉函数及其应用" class="headerlink" title="欧拉函数及其应用"></a>欧拉函数及其应用</h1><h1 id="miller-rabin素性判断"><a href="#miller-rabin素性判断" class="headerlink" title="miller-rabin素性判断"></a>miller-rabin素性判断</h1><p>我们平时判断一个数是否为素数的范围为1e6左右，因为还要保存。<br>这个算法是单独判断一个数是否为素数</p><h1 id="Pollard-rho算法"><a href="#Pollard-rho算法" class="headerlink" title="Pollard-rho算法"></a>Pollard-rho算法</h1><p>一个超大数的质因数分解</p><h1 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h1><p>需要求x的值<br><img src="http://latex.codecogs.com/gif.latex?x^2&space;\equiv&space;n(modp)" title="x^2 \equiv n(modp)"></p><h1 id="离散对数"><a href="#离散对数" class="headerlink" title="离散对数"></a>离散对数</h1><p>其中n必须是素数<br><img src="http://latex.codecogs.com/gif.latex?a^x&space;\equiv&space;b(mod\quad&space;p)" title="a^x \equiv b(mod\quad n)"></p><h3 id="模板题目"><a href="#模板题目" class="headerlink" title="模板题目"></a>模板题目</h3><p><a href="http://poj.org/problem?id=2417" target="_blank" rel="external">poj2417</a></p><h3 id="T了的代码"><a href="#T了的代码" class="headerlink" title="T了的代码"></a>T了的代码</h3><p>lrj书上面的代码不够优秀<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">ex_gcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(a == <span class="number">0</span>&amp;&amp; b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</div><div class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    ll d = ex_gcd(b, a%b, y, x);</div><div class="line">    y -= a/b*x;</div><div class="line">    <span class="keyword">return</span> d;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll n)</span></span>&#123;</div><div class="line">    ll x, y;</div><div class="line">    ll d = ex_gcd(a, n, x, y);</div><div class="line">    <span class="keyword">if</span>(d == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (x+n)%n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b, ll p)</span></span>&#123;</div><div class="line">    ll ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)&#123;</div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</div><div class="line">            ans = ans*a%p;</div><div class="line">        &#125;</div><div class="line">        a = a*a%p;</div><div class="line">        b&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">mul_mod</span><span class="params">(ll a, ll b, ll p)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (a%p)*(b%p)%p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">return x, a^x\equav b(mod n), and n is a prime.</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function">ll <span class="title">bsgs</span><span class="params">(ll a, ll b, ll n)</span></span>&#123;</div><div class="line">    ll m, v, e=<span class="number">1</span>, i;</div><div class="line">    m = <span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</div><div class="line">    <span class="comment">//cout&lt;&lt;pow_mod(a, m, n)&lt;&lt;endl;</span></div><div class="line">    v = inv(pow_mod(a, m, n), n);</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; x;</div><div class="line">    x.clear();</div><div class="line">    x[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="comment">//cout&lt;&lt;v&lt;&lt;endl;</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++)&#123;</div><div class="line">        e = mul_mod(e, a, n);</div><div class="line">        <span class="comment">//cout&lt;&lt;e&lt;&lt;endl;</span></div><div class="line">        <span class="keyword">if</span>(!x.count(e)) x[e] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m ;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(x.count(b)) <span class="keyword">return</span> i*m+x[b];</div><div class="line">        b = mul_mod(b, v, n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ll b, n, p;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;p, &amp;b, &amp;n))&#123;</div><div class="line">        ll ans = bsgs(b, n, p);</div><div class="line">        <span class="keyword">if</span>(ans == <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"no solution\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="ex-离散对数"><a href="#ex-离散对数" class="headerlink" title="ex-离散对数"></a>ex-离散对数</h1><p>n不是素数的时候该怎么求解呢</p><h1 id="原根及其应用"><a href="#原根及其应用" class="headerlink" title="原根及其应用"></a>原根及其应用</h1><p>definition:<br><img src="http://latex.codecogs.com/gif.latex?a_i\%n&space;\quad&space;is\quad&space;different\quad&space;from\quad&space;each\quad&space;other,&space;(i=0,&space;1,\dots&space;\varphi&space;(n)-1),&space;a\quad&space;is\quad&space;prime\quad&space;to\quad&space;n" title="a_i\%n \quad is\quad different\quad from\quad each\quad other, (i=0, 1,\dots \varphi (n)-1), a\quad is\quad prime\quad to\quad n"></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>中国剩余定理</title>
      <link href="/2018/03/20/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
      <url>/2018/03/20/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</url>
      <content type="html"><![CDATA[<p>中国剩余定理的应用，不涉及相应的公式的推导。<br>而又要分成两种情况：</p><ul><li>模数相互互质（并不要求模数是质数，只要两两互质就行了）</li><li>模数不互质<a id="more"></a></li></ul><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="模数两两互质的情况"><a href="#模数两两互质的情况" class="headerlink" title="模数两两互质的情况"></a>模数两两互质的情况</h1><p>之前一直害怕中国剩余定理的推导，知道我看到下面的大白话：<br><a href="https://www.zhihu.com/question/40430507?sort=created" target="_blank" rel="external">大白话讲解中国剩余定理</a><br><img src="https://t1.picb.cc/uploads/2018/03/20/2VQVD1.png" alt=""><br>首先列出一个求解的过程，然后结合上面的讲解，说明求解的过程：<br><img src="http://latex.codecogs.com/gif.latex?1.&space;\quad&space;N&space;=&space;\prod&space;_{i=1}^{k}n_i\\&space;\quad&space;2.&space;N_i&space;=&space;\frac{N}{n_i}\\&space;3.&space;find\quad&space;a\quad&space;number\quad&space;x'\quad&space;to\quad&space;satisfy\quad&space;x_i'\%n_i&space;=&space;1,and\quad&space;x_i'=&space;N_i*x_i,so\quad&space;we\quad&space;can\quad&space;construct\quad&space;the\quad&space;equation:&space;N_i*x_i&plus;r_i*y&space;=&space;1&space;\quad&space;to&space;find&space;\quad&space;x_i.\\&space;4.&space;answer&space;=&space;(\sum_{i=1}^{k}r_i*x_i')\%N=(\sum_{i=1}^{k}r_i*N_i*x_i)\%N" title="1. \quad N = \prod _{i=1}^{k}n_i\\ \quad 2. N_i = \frac{N}{n_i}\\ 3. find\quad a\quad number\quad x'\quad to\quad satisfy\quad x_i'\%n_i = 1,and\quad x_i'= N_i*x_i,so\quad we\quad can\quad construct\quad the\quad equation: N_i*x_i+r_i*y = 1 \quad to find \quad x_i.\\ 4. answer = (\sum_{i=1}^{k}r_i*x_i')\%N=(\sum_{i=1}^{k}r_i*N_i*x_i)\%N"></p><p>说明：<br>变量含义的说明：<br>\(r_i\):第i个式子的remainder, 也就是余数<br>\(n_i\):第i个式子的模数<br>1.第一步全部乘起来为后面做准备，不过数一课件中N为所有模数的最小公倍数，应该都可以吧除非有数的溢出。<br>2.单独求一个数的特殊的数，因此除掉那一个数。<br>3.求一个特殊的数字，这个数字模\(a_i\)为1<br>4.\((特殊的数字*r_i)\%n_i = r_i)\), 最后把它们都加起来就行了。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="http://acm.fzu.edu.cn/problem.php?pid=1402" target="_blank" rel="external">fzoj1402</a><br><a href="https://vjudge.net/contest/177378#problem/A" target="_blank" rel="external">hdu1370</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>很裸的中国剩余定理的题目</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>FZoj坑的要死，输出长整型必须是I64d,试了好几发<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</div><div class="line">ll n[maxn], r[maxn];</div><div class="line"><span class="keyword">int</span> num;</div><div class="line"><span class="function">ll <span class="title">ex_gcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(a == <span class="number">0</span>&amp;&amp; b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</div><div class="line">        x = <span class="number">1</span>;</div><div class="line">        y = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    ll d = ex_gcd(b, a%b, y, x);</div><div class="line">    y -= a/b*x;</div><div class="line">    <span class="keyword">return</span> d;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">china_remainder</span><span class="params">()</span></span>&#123;</div><div class="line">    ll N = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++) N*=n[i];</div><div class="line">    ll ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</div><div class="line">        ll N_i = N/n[i];</div><div class="line">        ll x, y;</div><div class="line">        ex_gcd(N_i, n[i], x, y);</div><div class="line">        x = (x%n[i]+n[i])%n[i];</div><div class="line">        ans = (ans+r[i]*x*N_i%N)%N;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++) <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>, &amp;n[i], &amp;r[i]);</div><div class="line">        china_remainder();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="模数不互质的中国剩余定理"><a href="#模数不互质的中国剩余定理" class="headerlink" title="模数不互质的中国剩余定理"></a>模数不互质的中国剩余定理</h1><p>推导的过程好复杂，采用了合并的思想<br><a href="http://yzmduncan.iteye.com/blog/1323599" target="_blank" rel="external">模数不互质的情况说明</a><br><img src="https://t1.picb.cc/uploads/2018/03/20/2VXPCt.png" alt=""></p><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><a href="http://poj.org/problem?id=2891" target="_blank" rel="external">poj 2891</a></p><h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><p>直接超别人的代码了，积累一下，知道有这么个东西<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">中国剩余定理（不互质） </span></div><div class="line"><span class="comment">*/</span>  </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;  </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="keyword">typedef</span> __int64 int64;  </div><div class="line">int64 Mod;  </div><div class="line">  </div><div class="line"><span class="function">int64 <span class="title">gcd</span><span class="params">(int64 a, int64 b)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)  </div><div class="line">        <span class="keyword">return</span> a;  </div><div class="line">    <span class="keyword">return</span> gcd(b,a%b);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function">int64 <span class="title">Extend_Euclid</span><span class="params">(int64 a, int64 b, int64&amp;x, int64&amp; y)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)  </div><div class="line">    &#123;  </div><div class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;  </div><div class="line">        <span class="keyword">return</span> a;  </div><div class="line">    &#125;  </div><div class="line">    int64 d = Extend_Euclid(b,a%b,x,y);  </div><div class="line">    int64 t = x;  </div><div class="line">    x = y;  </div><div class="line">    y = t - a/b*y;  </div><div class="line">    <span class="keyword">return</span> d;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//a在模n乘法下的逆元，没有则返回-1  </span></div><div class="line"><span class="function">int64 <span class="title">inv</span><span class="params">(int64 a, int64 n)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    int64 x,y;  </div><div class="line">    int64 t = Extend_Euclid(a,n,x,y);  </div><div class="line">    <span class="keyword">if</span>(t != <span class="number">1</span>)  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    <span class="keyword">return</span> (x%n+n)%n;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//将两个方程合并为一个  </span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(int64 a1, int64 n1, int64 a2, int64 n2, int64&amp; a3, int64&amp; n3)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    int64 d = gcd(n1,n2);  </div><div class="line">    int64 c = a2-a1;  </div><div class="line">    <span class="keyword">if</span>(c%d)  </div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </div><div class="line">    c = (c%n2+n2)%n2;  </div><div class="line">    c /= d;  </div><div class="line">    n1 /= d;  </div><div class="line">    n2 /= d;  </div><div class="line">    c *= inv(n1,n2);  </div><div class="line">    c %= n2;  </div><div class="line">    c *= n1*d;  </div><div class="line">    c += a1;  </div><div class="line">    n3 = n1*n2*d;  </div><div class="line">    a3 = (c%n3+n3)%n3;  </div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//求模线性方程组x=ai(mod ni),ni可以不互质  </span></div><div class="line"><span class="function">int64 <span class="title">China_Reminder2</span><span class="params">(<span class="keyword">int</span> len, int64* a, int64* n)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    int64 a1=a[<span class="number">0</span>],n1=n[<span class="number">0</span>];  </div><div class="line">    int64 a2,n2;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)  </div><div class="line">    &#123;  </div><div class="line">        int64 aa,nn;  </div><div class="line">        a2 = a[i],n2=n[i];  </div><div class="line">        <span class="keyword">if</span>(!merge(a1,n1,a2,n2,aa,nn))  </div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">        a1 = aa;  </div><div class="line">        n1 = nn;  </div><div class="line">    &#125;  </div><div class="line">    Mod = n1;  </div><div class="line">    <span class="keyword">return</span> (a1%n1+n1)%n1;  </div><div class="line">&#125;  </div><div class="line">int64 a[<span class="number">1000</span>],b[<span class="number">1000</span>];  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">int</span> i;  </div><div class="line">    <span class="keyword">int</span> k;  </div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k)!=EOF)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; k; i++)  </div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d %I64d"</span>,&amp;a[i],&amp;b[i]);  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,China_Reminder2(k,b,a));  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>组合数的整理</title>
      <link href="/2018/03/20/%E7%BB%84%E5%90%88%E6%95%B0%E7%9A%84%E6%95%B4%E7%90%86/"/>
      <url>/2018/03/20/%E7%BB%84%E5%90%88%E6%95%B0%E7%9A%84%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>组合数学中的一些基本的套路，感觉还是不会做题目啊QAQ<br>感觉高中的组合数学被翔碾压，大学被各位巨巨智商碾压emmmmmm<br>还有群论的大坑没有开， polya还不会<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="圈排列问题"><a href="#圈排列问题" class="headerlink" title="圈排列问题"></a>圈排列问题</h1><p>n位同学，围成一圈玩狼人杀，问分配座位的方案。</p><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>\((n-1)!\)</p><h1 id="链排列"><a href="#链排列" class="headerlink" title="链排列"></a>链排列</h1><p>翻转后可以等价的</p><h2 id="公式-1"><a href="#公式-1" class="headerlink" title="公式"></a>公式</h2><p>\(frac{1}{2}(n-1)!\)</p><h1 id="隔板法"><a href="#隔板法" class="headerlink" title="隔板法"></a>隔板法</h1><h1 id="第一类斯特林数"><a href="#第一类斯特林数" class="headerlink" title="第一类斯特林数"></a>第一类斯特林数</h1><p>把一个包含n个元素的集合分成k个环排列的方法数。</p><h1 id="第二类斯特林数"><a href="#第二类斯特林数" class="headerlink" title="第二类斯特林数"></a>第二类斯特林数</h1><p>把一个包含n个元素的集合分成k个<font color="#FF3030"><strong>非空子集</strong></font>的个数</p><h1 id="Bell数（排名问题）"><a href="#Bell数（排名问题）" class="headerlink" title="Bell数（排名问题）"></a>Bell数（排名问题）</h1><h1 id="分拆数（计数dp）"><a href="#分拆数（计数dp）" class="headerlink" title="分拆数（计数dp）"></a>分拆数（计数dp）</h1><h1 id="错排公式"><a href="#错排公式" class="headerlink" title="错排公式"></a>错排公式</h1><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>1~n这n个数构成一个排列，第1项不是1，第2项不是2,……,第n项不是n的方案数</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们考虑1的位置，1的位置有n-1个，在每一个位置都是等价的，因此我们不妨设1在第2项，那么再考虑2的位置，2的位置有两种：<br>如果2在第1项，那么剩余3~n这n-2个数，需要放在第3~n项中，方案数是f(n-2)。<br>如果2不再第1项，那么2~n这n-1个数，需要放在第1,3~n项，且因为假设了2不能放在第1项，因此这是n-1个数构成错位排列的情况，方案数是f(n-1)</p><h2 id="公式以及相应的化简"><a href="#公式以及相应的化简" class="headerlink" title="公式以及相应的化简"></a>公式以及相应的化简</h2><p><img src="http://latex.codecogs.com/gif.latex?f(n)&space;=&space;(n-1)*(f(n-1)&plus;f(n-2))\\&space;f(n)-n*f(n-1)&space;=&space;-(f(n-1)-(n-1)*f(n-2))\\&space;we&space;\quad&space;find&space;\quad&space;a&space;\quad&space;series,&space;and&space;\quad&space;their&space;\quad&space;common&space;\quad&space;ratio&space;\quad&space;is\quad&space;-1.\\&space;initial&space;\quad&space;value:f(1)&space;=&space;0,&space;f(2)&space;=&space;1;\\&space;f(n)-n*f(n-1)&space;=&space;(-1)^{n-2}*(f(2)-f(1))\\&space;{\color{Red}&space;f(n)&space;=&space;n*f(n-1)&plus;(-1)^{n},&space;n\ge&space;1}\\&space;Also,&space;after\quad&space;reading&space;\quad&space;some\quad&space;paper,&space;we&space;\quad&space;also\quad&space;have\quad&space;the\quad&space;following&space;\quad&space;equation:\\&space;{\color{Red}&space;f(n)=&space;[\frac{n!}{e}&plus;0.5]}" title="f(n) = (n-1)*(f(n-1)+f(n-2))\\ f(n)-n*f(n-1) = -(f(n-1)-(n-1)*f(n-2))\\ we \quad find \quad a \quad series, and \quad their \quad common \quad ratio \quad is\quad -1.\\ initial \quad value:f(1) = 0, f(2) = 1;\\ f(n)-n*f(n-1) = (-1)^{n-2}*(f(2)-f(1))\\ {\color{Red} f(n) = n*f(n-1)+(-1)^{n}, n\ge 1}\\ Also, after\quad reading \quad some\quad paper, we \quad also\quad have\quad the\quad following \quad equation:\\ {\color{Red} f(n)= [\frac{n!}{e}+0.5]}"></p><h1 id="卡特兰数–计数映射的伟大胜利"><a href="#卡特兰数–计数映射的伟大胜利" class="headerlink" title="卡特兰数–计数映射的伟大胜利"></a>卡特兰数–计数映射的伟大胜利</h1><p>暑假的时候积累了很多的卡特兰数的模型，然而还是不会用，先祭上我收集的博客的知识的链接。其实这一类的找规律的问题都可以使用OEIS大法。然而比赛的时候根本不能用。<br><a href="http://lanqi.org/skills/10939/" target="_blank" rel="external">卡特兰数的讲解</a></p><h2 id="问题的引入"><a href="#问题的引入" class="headerlink" title="问题的引入"></a>问题的引入</h2><p>那么一个足够大的栈的进栈序列为:\(1, 2, 3, 4, …n, \)时有多少个不同的出栈序列？</p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>假设现在入栈为+1, 出栈为-1.若现在要出站，那么之前的和必须要大于等于1.<br>先在假设有这样的序列：1，-1， 1， 1， -1， -1， -1，1<br>上面的序列明显是不符合要求的，我们从一开始不符合要求的数字开始：</p><p>1，-1， 1， 1， -1， -1， <font color="#FF3030"><strong>-1</strong></font>，1</p><p>更改为下面的序列：\(-1, 1, -1, -1, 1, 1, 1, 1\)的序列，有n+1个+1，n-1个-1.<br>构成了一一映射的关系。<br>所以：</p><p>$$ h(n) =  C_{2n}^{n}-C_{2n}^{n-1} = \frac{C_{2n}^{n}}{n+1} $$</p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>一个n边形，现在要分割成若干个三角形，那么有多少种分割的方法？（LRJ上面的题目）</p><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>具体的分析看一下书，最后的通过两种不同的方向，化简了推导式</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><img src="http://latex.codecogs.com/gif.latex?h(n)&space;=&space;\frac{4n-2}{n&plus;1}&space;h(n-1)" title="h(n) = \frac{4n-2}{n+1} h(n-1)"></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>差分约束系统</title>
      <link href="/2018/03/18/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/03/18/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>trie树</title>
      <link href="/2018/03/16/trie%E6%A0%91/"/>
      <url>/2018/03/16/trie%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>不断的将字符串插在trie树中，并且不断的更新节点的附加信息。<br>用数组来模拟树型结构<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="Trie板题"><a href="#Trie板题" class="headerlink" title="Trie板题"></a>Trie板题</h1><p><a href="http://poj.org/problem?id=2418" target="_blank" rel="external">Hardwood Species</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给很多个树的名称，会有重复的名字。<br>然后统计每一个不同的名字占有总数的比例</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>键trie树，最后统计的时候扫一遍就可以了。</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><p>用%.4f输出就AC了， 用%.4lf输出就WA了emmmmm<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">    <span class="keyword">int</span> son[<span class="number">256</span>];</div><div class="line">    Node()&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;num = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;son, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">this</span>-&gt;son));</div><div class="line">    &#125;</div><div class="line">&#125;node[maxn];</div><div class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</div><div class="line"><span class="keyword">char</span> ss[<span class="number">100</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> tot = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_trie</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">        num = s[i];</div><div class="line">        <span class="keyword">if</span>(node[p].son[num]!=<span class="number">0</span>)&#123;</div><div class="line">            p = node[p].son[num];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            node[p].son[num] = tot++;</div><div class="line">            p = tot<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    node[p].num++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> tot_str=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_trie</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(node[p].num!=<span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s %.4lf\n"</span>, ss, <span class="keyword">double</span>(node[p].num)/tot_str*<span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(node[p].son[i])&#123;</div><div class="line">            ss[len] = i;</div><div class="line">            print_trie(node[p].son[i], len+<span class="number">1</span>);</div><div class="line">            ss[len] = <span class="string">'\0'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(gets(s))&#123;</div><div class="line">        insert_trie(s, <span class="number">0</span>);</div><div class="line">        tot_str++;</div><div class="line">    &#125;</div><div class="line">    print_trie(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trie树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>后缀数组</title>
      <link href="/2018/03/14/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
      <url>/2018/03/14/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<p>后缀数组的原理很好懂，但是蓝书上写的代码，我是真的读不懂啊emmmmmmm</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="后缀数组的原理"><a href="#后缀数组的原理" class="headerlink" title="后缀数组的原理"></a>后缀数组的原理</h1><p>运用了倍增的思想，不断的计算后缀的字典序的大小，关于倍增的图可以看刘汝佳那本书上面的图。<br>我主要画了一下关于最长公共前缀的原理图。<br><img src="https://t1.picb.cc/uploads/2018/03/15/22DYSJ.png" alt=""></p><h1 id="代码里面的说明"><a href="#代码里面的说明" class="headerlink" title="代码里面的说明"></a>代码里面的说明</h1><p>其实sa[], x[]两个表示的东西非常的相似：<br>sa[i]表示的是：后缀的字典序排在第i位在原来的字符串中的位置为sa[i].<br>x[i]表示的是：字符串中的位置i在字典序中的大小为x[i].<br>两者其实是map<int, int=""> 的值发生了交换。</int,></p><p>其中的一段代码看了好久：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后面的字符串连接的是0，因此优先级最高，更新后面的第二维</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n-k; i&lt;n; i++)&#123;</div><div class="line">    y[p++] = i;</div><div class="line">&#125;</div><div class="line"><span class="comment">//更新前面的第二维，有的字母不能影响前面的第二维，判断条件是sa[i]&gt;=k,小于就相当于不能影响前面</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)<span class="keyword">if</span>(sa[i]&gt;=k) y[p++] = sa[i]-k;</div></pre></td></tr></table></figure></p><p>先更新的是后面连接’0’的第二维值，然后更新的是后面影响前面的第二维值。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="comment">//一个字符串的末尾必须是0，使得它的优先级最大</span></div><div class="line"><span class="comment">//x[]是第一维，y[]是第二维的数字</span></div><div class="line"><span class="comment">//c[]是统计字符的个数的</span></div><div class="line"><span class="keyword">int</span> sa[maxn], x[maxn], y[maxn], c[maxn], n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_sa</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) c[i] = <span class="number">0</span>;</div><div class="line">    <span class="comment">//处理原来的字符串，使其范围为0~m-1，并且最后一个字符必须为0.</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span>(s[i]&gt;=<span class="string">'A'</span>&amp;&amp;s[i]&lt;=<span class="string">'z'</span>)c[x[i]=(s[i]-<span class="string">'A'</span>+<span class="number">1</span>)]++;</div><div class="line">                            <span class="keyword">else</span> &#123;c[<span class="number">0</span>]++; x[i] = <span class="number">0</span>;&#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++) c[i] += c[i<span class="number">-1</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) sa[--c[x[i]]] = i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k&lt;&lt;=<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">        <span class="comment">//后面的字符串连接的是0，因此优先级最高，更新后面的第二维</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-k; i&lt;n; i++)&#123;</div><div class="line">            y[p++] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//更新前面的第二维，有的字母不能影响前面的第二维，判断条件是sa[i]&gt;=k,小于就相当于不能影响前面</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)<span class="keyword">if</span>(sa[i]&gt;=k) y[p++] = sa[i]-k;</div><div class="line">        </div><div class="line">        <span class="comment">//更新sa[]数组</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) c[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) c[x[y[i]]]++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; i++) c[i] += c[i<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">            sa[--c[x[y[i]]]] = y[i];</div><div class="line">        &#125;</div><div class="line">        swap(x, y);</div><div class="line">        p = <span class="number">1</span>; x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="comment">//若第一维和第二维的数字相等，那么它们的x[]的值是一样的，因为x[i]表示的以i为序号的后缀的排行大小为x[i]</span></div><div class="line">            x[sa[i]] = y[sa[i<span class="number">-1</span>]]==y[sa[i]]&amp;&amp;</div><div class="line">            y[sa[i<span class="number">-1</span>]+k]==y[sa[i]+k]?p<span class="number">-1</span>:p++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//顺序全部不等，必然可以排序了</span></div><div class="line">        <span class="keyword">if</span>(p&gt;=n) <span class="keyword">break</span>;</div><div class="line">        m = p;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    s = <span class="string">"BANANA0"</span>;</div><div class="line">    n = s.length();</div><div class="line">    build_sa(<span class="number">255</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;sa[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>linux command line</title>
      <link href="/2018/03/13/linux-command-line/"/>
      <url>/2018/03/13/linux-command-line/</url>
      <content type="html"><![CDATA[<p>This blog records some basic command lines for linux and some shortcuts for the operation.<br>Also, i find some interesting things or bug about my earphone.<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><ul><li>touch filename: just new a file</li><li>cd: go to the home</li><li>ctrl+a: if you are at the end of the command line, do this operation and the cursor will go to the beginning.</li><li>ctrl + -: </li><li>ctrl + shift + + :</li><li>ctrl + r: find some history command lines</li><li>ln -s text1.txt textLINK: create a link to the text1.txt file.(In essence, the link file is just a pointer to the file.)</li><li>head filename: the beginning 10 lines</li><li>tail filename: the end 10 lines of the text</li><li>shutdown -h +60/ shutdown -h now: h means halt. If we want to shutdown the linux right now, just use poweroff.</li><li>sudo apt-get htop: install some programes.</li><li>rm -r test: remove the file recursively.</li><li>cp filename (absolute file path)</li></ul><h1 id="programe-in-linux"><a href="#programe-in-linux" class="headerlink" title="programe in linux"></a>programe in linux</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">g++ test.cpp -o test</div><div class="line"></div><div class="line">./test</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>k-th number</title>
      <link href="/2018/03/13/k-th-number/"/>
      <url>/2018/03/13/k-th-number/</url>
      <content type="html"><![CDATA[<p>在毛概课中恍恍惚惚中回想起了主席树的建树、更新、查询操作。。。。<br>话说毛概老师这么年轻怎么还是这么红，这么专啊。。。</p><a id="more"></a><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h1><p>我觉的别人的博客将原理已经讲解的很好了:<br><a href="http://www.cnblogs.com/zyf0163/p/4749042.html" target="_blank" rel="external">主席树的原理的讲解</a><br><a href="http://blog.csdn.net/bbtl_ast/article/details/77824496" target="_blank" rel="external">当年自己手撸的代码</a></p><p>几个注释：<br>root[]:表示的是插入第i个数字的序列号<br>ls[i]:序号为i的左孩子的序号，如果忘记了就把它打印出来看看<br>rs[i]:同上<br>sum[]:表示的是一个区间里面数字的个数。sum[]管理的是<font color="#FF3030"><strong>一个区间的属性</strong></font>，当然到达叶子节点的时候，管理的就是一个值的个数。<br>并且每一个节点管理的是一个区间的属性。数字范围较大的时候，我们要先进行离散化。</p><p><img src="https://t1.picb.cc/uploads/2018/03/13/22hDiy.gif" alt="此处应该有一张图"></p><h1 id="k-th-number"><a href="#k-th-number" class="headerlink" title="k-th number"></a>k-th number</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2665" target="_blank" rel="external">hdu</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给一串数字，然后查询一个区间的第k大</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>好像这是一道非常经典的题目，有很多的算法都可以进行相应的求解。<br>目前知道的有主席树、划分树。</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> root[maxn], ls[maxn*<span class="number">20</span>], rs[maxn*<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> sz;</div><div class="line"><span class="keyword">int</span> sum[maxn*<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> dis_num[maxn];</div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;rt, <span class="keyword">int</span> l ,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    rt = ++cnt;</div><div class="line">    sum[rt] = <span class="number">0</span>;<span class="comment">//表示的是一个区间的个数</span></div><div class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</div><div class="line">    build(ls[rt], l, mid);</div><div class="line">    build(rs[rt], mid+<span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;now, <span class="keyword">int</span> last, <span class="keyword">int</span> val, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    now = ++cnt;</div><div class="line">    ls[now] = ls[last];</div><div class="line">    rs[now] = rs[last];</div><div class="line">    sum[now] = sum[last]+<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</div><div class="line">    <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(val&lt;=mid)</div><div class="line">        update(ls[now], ls[last], val, l, mid);</div><div class="line">    <span class="keyword">else</span> update(rs[now], rs[last], val, mid+<span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> cnt = sum[ls[y]] - sum[ls[x]];</div><div class="line">    <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(cnt&gt;=k) <span class="keyword">return</span> query(ls[x], ls[y], k, l, mid);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(rs[x], rs[y], k-cnt, mid+<span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</div><div class="line">            dis_num[i] = num[i];</div><div class="line">        &#125;</div><div class="line">        sort(num+<span class="number">1</span>, num+n+<span class="number">1</span>);</div><div class="line">        sz = unique(num+<span class="number">1</span>, num+n+<span class="number">1</span>)-(num+<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            dis_num[i] = lower_bound(num+<span class="number">1</span>, num+n+<span class="number">1</span>, dis_num[i])-(num);</div><div class="line">        &#125;</div><div class="line">        cnt = <span class="number">0</span>;</div><div class="line">        build(root[<span class="number">0</span>], <span class="number">1</span>, sz);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)update(root[i], root[i<span class="number">-1</span>], dis_num[i], <span class="number">1</span>, n);</div><div class="line">        <span class="keyword">int</span> k, x, y;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;q; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;k);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num[query(root[x<span class="number">-1</span>], root[y], k, <span class="number">1</span>, n)]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2-SAT</title>
      <link href="/2018/03/13/2-SAT/"/>
      <url>/2018/03/13/2-SAT/</url>
      <content type="html"><![CDATA[<p>主要积累2-SAT的模板，以及相应的思想<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="2-SAT"><a href="#2-SAT" class="headerlink" title="2-SAT"></a>2-SAT</h1><p>现在有这样的逻辑表达式:<br>\(x_i为假或者x_j为假，\)，我们进行相应的推测：<br>当\(x_i\)为真的时候，那么\(x_j\)必为假.这两个节点之间连一条边<br>同理：当\(x_j\)为真的时候，那么\(x_i\)必为假。这两个节点连一条边。<br>因为当其中的一个节点成立的时候，另外的一个节点必然也成立。</p><p>现在我们进行相应的拆点：<br>将逻辑节点i，拆成2<em>i与2</em>i+1:</p><font color="#FF3030"><strong>mark[2<em>i]表示节点i为假，mark[2</em>i+1]表示节点i为真。</strong></font><p>连完相应的边之后，使用dfs进行相应的判断，若产生冲突，那么就要进行相应的新的尝试。</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3587" target="_blank" rel="external">1146 - Now or later</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>每一架飞机都有早降落和晚降落的选择，并且都要进行相应的选择。<br>我们现在就要决策每一架的飞机的降落时间，使得每一架飞机降落的时间的间隔的最小值，最大。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>二分降落时间，然后用2-SAT进行相应的判断。</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><p>其中有这样的一行代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(T[i][a]-T[j][b])&lt;diff) solver.add_clause(i, a, j, b);</div></pre></td></tr></table></figure></p><p>注意判断其中添加语句的巧妙性。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TwoSAT</span>&#123;</span></div><div class="line">    <span class="comment">//int n;</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn*<span class="number">2</span>];</div><div class="line">    <span class="keyword">bool</span> mark[maxn*<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> sta[maxn*<span class="number">2</span>], c;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//this-&gt;n = n;</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n*<span class="number">2</span>; i++) G[i].clear();</div><div class="line">        <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span>(mark));</div><div class="line">        <span class="keyword">this</span>-&gt;c = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(mark[x^<span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(mark[x]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        mark[x] = <span class="literal">true</span>;</div><div class="line">        sta[c++] = x;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[x].size(); i++)&#123;</div><div class="line">            <span class="keyword">if</span>(!dfs(G[x][i])) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add_clause</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> xval, <span class="keyword">int</span> y, <span class="keyword">int</span> yval)</span></span>&#123;</div><div class="line">        x = <span class="number">2</span>*x+xval;</div><div class="line">        y = <span class="number">2</span>*y+yval;</div><div class="line">        G[x^<span class="number">1</span>].push_back(y);</div><div class="line">        G[y^<span class="number">1</span>].push_back(x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>*n; i+=<span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(!mark[i]&amp;&amp;!mark[i^<span class="number">1</span>])&#123;</div><div class="line">                c = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span>(!dfs(i))&#123;<span class="comment">//先假设一个条件是对的</span></div><div class="line">                    <span class="keyword">while</span>(c&gt;<span class="number">0</span>)mark[sta[--c]] = <span class="literal">false</span>;</div><div class="line">                    <span class="comment">//第一个假设不成立，再进行第二个假设成立。</span></div><div class="line">                    <span class="comment">//若两个假设都不成立,那么这个逻辑式将不成立，直接退出搜索</span></div><div class="line">                    <span class="keyword">if</span>(!dfs(i+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">TwoSAT solver;</div><div class="line"><span class="keyword">int</span> T[maxn][<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> diff)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>; a&lt;<span class="number">2</span>; a++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">0</span>; b&lt;<span class="number">2</span>; b++)</div><div class="line">                    <span class="keyword">if</span>(<span class="built_in">abs</span>(T[i][a]-T[j][b])&lt;diff) solver.add_clause(i, a, j, b);</div><div class="line">        <span class="keyword">return</span> solver.solve();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        <span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">2</span>; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T[i][j]);</div><div class="line">                R = max(R, T[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(L&lt;R)&#123;</div><div class="line">            solver.init();</div><div class="line">            <span class="keyword">int</span> M = L+(R-L+<span class="number">1</span>)/<span class="number">2</span>;<span class="comment">//M是向右靠近的</span></div><div class="line">            <span class="keyword">if</span>(judge(M)) L = M;</div><div class="line">            <span class="keyword">else</span> R = M<span class="number">-1</span>;</div><div class="line">            <span class="comment">//cout&lt;&lt;R&lt;&lt;endl;</span></div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;L&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2SAT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二分图的最大匹配</title>
      <link href="/2018/03/12/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/"/>
      <url>/2018/03/12/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/</url>
      <content type="html"><![CDATA[<p>最朴素的二分图的匹配方法：增广路算法。不断的使用dfs去寻找增广路，感觉效率很低。<br>还有一堆的<font color="#FF3030"><strong>等价的式子</strong></font>，有待进一步的补充：</p><ul><li>二分图最小顶点覆盖数 = 二分图最大匹配数</li><li>DAG的最小路径覆盖数 = V - 二分图最大匹配数</li><li>二分图的最大独立集数 = V - 二分图最大匹配数<br>要能理解其中的证明，并且灵活的进行相应的转换，emmmmmmmmmmmmmmm</li></ul><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="二分图的最大匹配"><a href="#二分图的最大匹配" class="headerlink" title="二分图的最大匹配"></a>二分图的最大匹配</h1><p>只要就是匈牙利算法，不断的使用dfs寻找增广路进行相应的扩充。</p><p>第二种求法就是建立相应的网络流模型，然后跑最大流，最大流就是匹配的最大的边数。</p><h1 id="二分图的一些等价式"><a href="#二分图的一些等价式" class="headerlink" title="二分图的一些等价式"></a>二分图的一些等价式</h1><p>最小点覆盖 = 最大二分匹配<br>简单的证明：</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://vjudge.net/contest/175593#problem/E" target="_blank" rel="external">E - Kindergarten POJ - 3692</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>女生和女生之间相互认识，男生和男生之间相互认识，然后给出n对女生、男生之间的关系，这些男生女生之间相互认识。<br>问最大能选出来多少个人，使得他们之间相互的认识。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>不认识的人之间连边，求最大独立集。<br>最大独立集 = 节点数-二分匹配数</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</div><div class="line"><span class="keyword">bool</span> mp[maxn][maxn];</div><div class="line"><span class="keyword">int</span> G, B, n;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> adj[maxn];</div><div class="line"><span class="keyword">int</span> kase;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(adj, <span class="number">-1</span>, <span class="keyword">sizeof</span>(adj));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;maxn; j++) mp[i][j] = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=B; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[i]&amp;&amp;mp[u][i])&#123;</div><div class="line">            vis[i] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span>(adj[i] == <span class="number">-1</span>||dfs(adj[i]))&#123;</div><div class="line">                adj[i] = u;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=G; i++)&#123;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="keyword">if</span>(dfs(i)) ans++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;++kase&lt;&lt;<span class="string">": "</span>&lt;&lt;G+B-ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;G, &amp;B, &amp;n)&amp;&amp;(G+B+n))&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> g, b;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;g, &amp;b);</div><div class="line">            mp[g][b] = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        solve();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h1><p><a href="http://acm.xidian.edu.cn/problem.php?id=1048" target="_blank" rel="external">二分图的模板题</a></p><h1 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn*<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> match[maxn*<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> used[maxn*<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> n, m, l;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    G[u].push_back(v);</div><div class="line">    G[v].push_back(u);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    used[v] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[v].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> u = G[v][i], w = match[u];</div><div class="line">        <span class="keyword">if</span>(w == <span class="number">-1</span> || !used[w]&amp;&amp;dfs(w))&#123;</div><div class="line">            match[u] = v;</div><div class="line">            match[v] = u;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(match, <span class="number">-1</span>, <span class="keyword">sizeof</span>(match));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>; v&lt;=n; v++)&#123;</div><div class="line">        <span class="keyword">if</span>(match[v] == <span class="number">-1</span>)&#123;</div><div class="line">            <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</div><div class="line">            <span class="keyword">if</span>(dfs(v)) ans++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">500</span>; v&lt;=m+<span class="number">500</span>; v++)&#123;</div><div class="line">        <span class="keyword">if</span>(match[v] == <span class="number">-1</span>)&#123;</div><div class="line">            <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</div><div class="line">            <span class="keyword">if</span>(dfs(v)) ans++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;maxn*<span class="number">2</span>; i++) G[i].clear();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;l);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=l; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            add_edge(u, v+<span class="number">500</span>);</div><div class="line">        &#125;</div><div class="line">        solve();</div><div class="line">        <span class="comment">//cout&lt;&lt;match[1]&lt;&lt;" "&lt;&lt;match[2]&lt;&lt;" "&lt;&lt;match[501]&lt;&lt;" "&lt;&lt;match[502]&lt;&lt;endl;</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="二分图的最大团"><a href="#二分图的最大团" class="headerlink" title="二分图的最大团"></a>二分图的最大团</h1><p><a href="https://www.cnblogs.com/jianglangcaijin/p/6035945.html" target="_blank" rel="external">二分图的最小顶点覆盖 最大独立集 最大团</a><br>定义：对于一般图来说，团是一个顶点集合，且由该顶点集合诱导的子图是一个完全图，简单说，就是选出一些顶点，这些顶点两两之间都有边。最大团就是使得选出的这个顶点集合最大。对于二分图来说，我们默认为左边的所有点之间都有边，右边的所有顶点之间都有边。那么，实际上，我们是要在左边找到一个顶点子集X，在右边找到一个顶点子集Y，使得X中每个顶点和Y中每个顶点之间都有边。</p><p>方法：二分图的最大团=补图的最大独立集。</p><p>补图的定义是：对于二分图中左边一点x和右边一点y，若x和y之间有边，那么在补图中没有，否则有。</p><p>这个方法很好理解，因为最大独立集是两两不相邻，所以最大独立集的补图两两相邻。</p><h1 id="网络流进行二分图匹配"><a href="#网络流进行二分图匹配" class="headerlink" title="网络流进行二分图匹配"></a>网络流进行二分图匹配</h1><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>manacher算法</title>
      <link href="/2018/03/12/manacher%E7%AE%97%E6%B3%95/"/>
      <url>/2018/03/12/manacher%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>manacher算法判断回文串的时间复杂度最低，为\(O(n)\).<br>其他判断回文串的算法，例如：<br>二分+hash， 后缀数组，他们的时间复杂度都是\(O(nlogn)\)</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="manacher算法"><a href="#manacher算法" class="headerlink" title="manacher算法"></a>manacher算法</h1><p>不断的维护三个属性</p><ul><li>p[i]:以i字母为中心的最长的回文半径</li><li>id:最长回文半径的坐标</li><li>mx最长p[i]做能触及的最右边+1，相当于是一个开区间</li></ul><p>具体看代码</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3068" target="_blank" rel="external">hdu 3068最长回文</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">char</span> s[maxn], str[maxn];</div><div class="line"><span class="keyword">int</span> p[maxn];<span class="comment">//回文半径</span></div><div class="line"><span class="keyword">int</span> len1, len2;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    str[<span class="number">0</span>] = <span class="string">'?'</span>;</div><div class="line">    str[<span class="number">1</span>] = <span class="string">'#'</span>;<span class="comment">//使之变成奇数长度的字符串</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len1; i++)&#123;</div><div class="line">        str[i*<span class="number">2</span>+<span class="number">2</span>] = s[i];</div><div class="line">        str[i*<span class="number">2</span>+<span class="number">3</span>] = <span class="string">'#'</span>;</div><div class="line">    &#125;</div><div class="line">    len2 = len1*<span class="number">2</span>+<span class="number">2</span>;</div><div class="line">    str[len2] = <span class="string">'$'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">manacher</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>, mx = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;len2; i++)&#123;<span class="comment">//mx是最右边的开区间</span></div><div class="line">        <span class="keyword">if</span>(mx&gt;i) p[i] = min(p[<span class="number">2</span>*mid-i], mx-i);</div><div class="line">        <span class="keyword">else</span> p[i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(; str[i+p[i]] == str[i-p[i]]; p[i]++);</div><div class="line">        <span class="keyword">if</span>(p[i]+i&gt;mx)&#123;</div><div class="line">            mx = p[i]+i;</div><div class="line">            mid = i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))&#123;</div><div class="line">        len1 = <span class="built_in">strlen</span>(s);</div><div class="line">        init();</div><div class="line">        manacher();</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;len2; i++)&#123;</div><div class="line">            ans = max(ans, p[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//#b#a # a#b#，偶数</span></div><div class="line">        <span class="comment">//#a#, 奇数  他们的长度都是回文半径-1</span></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> manacher </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>序列的全排列、子集的生成</title>
      <link href="/2018/03/12/%E5%AD%90%E9%9B%86%E7%94%9F%E6%88%90/"/>
      <url>/2018/03/12/%E5%AD%90%E9%9B%86%E7%94%9F%E6%88%90/</url>
      <content type="html"><![CDATA[<p>之所以要生成这样的排列，是为了判断每一种解答的可能，从而从所有的解答中搜寻想要的答案。</p><p>序列的全排列：<br>最终的目的是生成有重复元素的全排列的解答空间<br>子集的生成:<br>仅仅是0~n-1子集合的生成<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="序列的全排列"><a href="#序列的全排列" class="headerlink" title="序列的全排列"></a>序列的全排列</h1><h2 id="生成1-n的排列"><a href="#生成1-n的排列" class="headerlink" title="生成1~n的排列"></a>生成1~n的排列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e2</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_permutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cur)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(cur == n)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, num[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">bool</span> ok = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;cur; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(num[j] == i) ok = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ok)&#123;</div><div class="line">            num[cur] = i;</div><div class="line">            print_permutation(n, cur+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    n = <span class="number">3</span>;</div><div class="line">    print_permutation(<span class="number">3</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="可重复元素的全排列"><a href="#可重复元素的全排列" class="headerlink" title="可重复元素的全排列"></a>可重复元素的全排列</h2><p>num[]要事先排好序！！！<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> temp[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_permutation</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(cur == n)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>||num[i]!=num[i<span class="number">-1</span>])&#123;</div><div class="line">            <span class="keyword">int</span> c1, c2;</div><div class="line">            c1 = c2 = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;cur; j++)<span class="keyword">if</span>(num[i] == temp[j]) c1++;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) <span class="keyword">if</span>(num[j] == num[i]) c2++;</div><div class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>||num[i]!=num[i<span class="number">-1</span>])&#123;</div><div class="line">                <span class="keyword">if</span>(c1&lt;c2)&#123;</div><div class="line">                    temp[cur] = num[i];</div><div class="line">                    print_permutation(cur+<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">cin</span>&gt;&gt;num[i];</div><div class="line">    sort(num, num+n);<span class="comment">//必须要先排好序</span></div><div class="line">    print_permutation(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="使用系统的函数-next-permutation"><a href="#使用系统的函数-next-permutation" class="headerlink" title="使用系统的函数:next_permutation"></a>使用系统的函数:next_permutation</h2><p>注意打印的数组要先排好序！！！<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    n = <span class="number">3</span>;</div><div class="line">    <span class="keyword">int</span> num[<span class="number">5</span>];</div><div class="line">    num[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    num[<span class="number">1</span>] = <span class="number">2</span>;</div><div class="line">    num[<span class="number">2</span>] = <span class="number">2</span>;</div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>, num[i]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;<span class="keyword">while</span>(next_permutation(num, num+n));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="子集的生成"><a href="#子集的生成" class="headerlink" title="子集的生成"></a>子集的生成</h1><h2 id="增量构造法"><a href="#增量构造法" class="headerlink" title="增量构造法"></a>增量构造法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e2</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_subset</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *A, <span class="keyword">int</span> cur)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cur; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">int</span> s = cur?A[cur<span class="number">-1</span>]+<span class="number">1</span>:<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s; i&lt;n; i++)&#123;<span class="comment">//运用了定序的技巧，避免了重复枚举</span></div><div class="line">        A[cur] = i;</div><div class="line">        print_subset(n, A, cur+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    print_subset(<span class="number">3</span>, num, <span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="位向量法"><a href="#位向量法" class="headerlink" title="位向量法"></a>位向量法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e2</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_subset</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">bool</span> *vis, <span class="keyword">int</span> *num, <span class="keyword">int</span> cur)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(cur == n)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(vis[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>, num[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    vis[cur] = <span class="literal">true</span>;</div><div class="line">    print_subset(n, vis, num, cur+<span class="number">1</span>);</div><div class="line">    vis[cur] = <span class="literal">false</span>;</div><div class="line">    print_subset(n, vis, num, cur+<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    num[<span class="number">0</span>] = <span class="number">2</span>;</div><div class="line">    num[<span class="number">1</span>] = <span class="number">3</span>;</div><div class="line">    num[<span class="number">2</span>] = <span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    print_subset(<span class="number">3</span>, vis, num, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="二进制法"><a href="#二进制法" class="headerlink" title="二进制法"></a>二进制法</h2><p>比较好理解，而且容易书写<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e2</span>+<span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_subset</span><span class="params">(<span class="keyword">int</span> n ,<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(s&amp;(<span class="number">1</span>&lt;&lt;i))<span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n=<span class="number">3</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(<span class="number">1</span>&lt;&lt;n); i++)&#123;</div><div class="line">        print_subset(n, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>图论进阶篇</title>
      <link href="/2018/03/11/%E5%9B%BE%E8%AE%BA%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
      <url>/2018/03/11/%E5%9B%BE%E8%AE%BA%E8%BF%9B%E9%98%B6%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>主要记录一些将要学习的图论知识，或者概念还不是很清晰的图论知识。<br>个人感觉有关图论的竞赛知识基本上已经学完了，下面就是如何的灵活运用qaq.<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="二分图的多重匹配"><a href="#二分图的多重匹配" class="headerlink" title="二分图的多重匹配"></a>二分图的多重匹配</h1><p><a href="http://blog.csdn.net/luozhong11/article/details/52430572" target="_blank" rel="external">二分图多重匹配问题</a><br><a href="http://blog.csdn.net/tramp_1/article/details/52663763" target="_blank" rel="external">例子，图示的效果很好</a></p><h2 id="二分图的多重最大匹配-边数最大"><a href="#二分图的多重最大匹配-边数最大" class="headerlink" title="二分图的多重最大匹配(边数最大)"></a>二分图的多重最大匹配(边数最大)</h2><p>建立相应的模型，然后跑最大流<br>在原图上建立源点S和汇点T，S向每个X方点连一条容量为该X方点L值的边，每个Y方点向T连一条容量为该Y方点L值的边，原来二分图中各边在新的网络中仍存在，容量为1（若该边可以使用多次则容量大于1），求该网络的最大流，就是该二分图多重最大匹配的值。</p><h2 id="二分图的多重最优匹配-边权和最大"><a href="#二分图的多重最优匹配-边权和最大" class="headerlink" title="二分图的多重最优匹配(边权和最大)"></a>二分图的多重最优匹配(边权和最大)</h2><p>使用最大费用最大流<br>在原图上建立源点S和汇点T，S向每个X方点连一条容量为该X方点L值、费用为0的边，每个Y方点向T连一条容量为该Y方点L值、费用为0的边，原来二分图中各边在新的网络中仍存在，容量为1（若该边可以使用多次则容量大于1），费用为该边的权值。求该网络的最大费用最大流，就是该二分图多重最优匹配的值。</p><h1 id="欧拉回路"><a href="#欧拉回路" class="headerlink" title="欧拉回路"></a>欧拉回路</h1><h2 id="无向图的欧拉回路"><a href="#无向图的欧拉回路" class="headerlink" title="无向图的欧拉回路"></a>无向图的欧拉回路</h2><p>所有的点的度数都为偶数。</p><h2 id="有向图的欧拉回路"><a href="#有向图的欧拉回路" class="headerlink" title="有向图的欧拉回路"></a>有向图的欧拉回路</h2><p>所有节点的入度等于出度</p><h2 id="混合图的欧拉回路"><a href="#混合图的欧拉回路" class="headerlink" title="混合图的欧拉回路"></a>混合图的欧拉回路</h2><p>设一个节点D[i] = (out[i]-in[i]).</p><ul><li>若D[]中存在奇数，那么一定不会存在欧拉回路。因为改变任意一条无向边的方向，D[i]的奇偶性不会改变。</li><li>若都是偶数，那么需要跑最大流，具体的说明见kuangbin模板的说明<blockquote><p>若初始D值都是偶数，则将G’改装成网络：设立源点S和汇点T，对于每个D[i]&gt;0的点i，连边<s, i="">， 容量为D[i]/2；对于每个D[j]<0的点j，连边<j, t="">，容量为-D[j]/2；G’中的每条边在网络中仍保 留，容量为1（表示该边最多只能被改变方向一次）。求这个网络的最大流，<font color="#FF3030"><strong>若S引出的所有边均满流</strong></font>,则 原混合图是欧拉图，将网络中所有流量为1的中间边（就是不与S或T关联的边）在G’中改变方向，形成的 新图G’’一定是有向欧拉图；若S引出的边中有的没有满流，则原混合图不是欧拉图。</0的点j，连边<j,></s,></p></blockquote></li></ul><h1 id="欧拉路径（不需要回到原点）"><a href="#欧拉路径（不需要回到原点）" class="headerlink" title="欧拉路径（不需要回到原点）"></a>欧拉路径（不需要回到原点）</h1><h2 id="无向图的欧拉路径"><a href="#无向图的欧拉路径" class="headerlink" title="无向图的欧拉路径"></a>无向图的欧拉路径</h2><p>有以下两种情况存在</p><ul><li>所有节点的度数都是偶数</li><li>仅存在两个节点的度数为偶数，其它节点的度数都是偶数</li></ul><h2 id="有向图的欧拉路经"><a href="#有向图的欧拉路经" class="headerlink" title="有向图的欧拉路经"></a>有向图的欧拉路经</h2><p>依旧有两种情况</p><ul><li>所有节点的入度等于出度</li><li>仅有两个节点：一个节点的入度比出度大1，另外一个节点的入度比出度小1.  其余的入度等于出度。</li></ul><h2 id="混合图的欧拉路经"><a href="#混合图的欧拉路经" class="headerlink" title="混合图的欧拉路经"></a>混合图的欧拉路经</h2><p>如果存在欧拉回路，一点存在欧拉路径了。否则如果有且仅有两个点的（出度-入度）是奇数， 那么给这个两个点<font color="#FF3030"><strong>加边</strong></font>，判断是否存在欧拉回路。 </p><h1 id="曼哈顿最小生成树"><a href="#曼哈顿最小生成树" class="headerlink" title="曼哈顿最小生成树"></a>曼哈顿最小生成树</h1><h1 id="2-SAT"><a href="#2-SAT" class="headerlink" title="2-SAT"></a>2-SAT</h1><h1 id="二分图的匹配以及各种等价的形式"><a href="#二分图的匹配以及各种等价的形式" class="headerlink" title="二分图的匹配以及各种等价的形式"></a>二分图的匹配以及各种等价的形式</h1><p>看西工大的ppt和毛老师的ppt</p><h1 id="三种最大流复杂度的比较以及适用的范围"><a href="#三种最大流复杂度的比较以及适用的范围" class="headerlink" title="三种最大流复杂度的比较以及适用的范围"></a>三种最大流复杂度的比较以及适用的范围</h1><p>刷完24题，虽然很早之前就已经立下了这个flag</p><h1 id="边双联通分量的求解"><a href="#边双联通分量的求解" class="headerlink" title="边双联通分量的求解"></a>边双联通分量的求解</h1><h1 id="加入最少的边，使得图变成边-强联通分量"><a href="#加入最少的边，使得图变成边-强联通分量" class="headerlink" title="加入最少的边，使得图变成边-强联通分量"></a>加入最少的边，使得图变成边-强联通分量</h1><blockquote><p>一个有桥的连通图，如何把它通过加边变成边双连通图？方法为首先求出所有的桥，然后删除这些桥边， 剩下的每个连通块都是一个双连通子图。把每个双连通子图收缩为一个顶点，再把桥边加回来，最后的这 个图一定是一棵树，边连通度为 1。 统计出树中度为 1 的节点的个数，即为叶节点的个数，记为 leaf。则至少在树上添加(leaf+1)/2 条边，就能 使树达到边二连通，所以至少添加的边数就是(leaf+1)/2。具体方法为，首先把两个最近公共祖先最远的两 个叶节点之间连接一条边，这样可以把这两个点到祖先的路径上所有点收缩到一起，因为一个形成的环一 定是双连通的。然后再找两个最近公共祖先最远的两个叶节点，这样一对一对找完，恰好是(leaf+1)/2 次， 把所有点收缩到了一起。 </p></blockquote><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>生成树计数问题</title>
      <link href="/2018/03/11/%E7%94%9F%E6%88%90%E6%A0%91%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2018/03/11/%E7%94%9F%E6%88%90%E6%A0%91%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>这里不学习其中的原理的正确性，仅仅注重代码的正确性<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="生成树的计数问题"><a href="#生成树的计数问题" class="headerlink" title="生成树的计数问题"></a>生成树的计数问题</h1><p>生成树的计数问题的<font color="#FF3030"><strong>时间复杂度为指数级别</strong></font>的,因此能够处理的数据范围还是比较小的。</p><font color="#FF3030"><strong>这里对这里的时间复杂度存疑。</strong></font>感觉时间复杂度为\(O(n^3)\)<br>适用的范围为无向图。<br><br>可以是有向图，不过相应的矩阵的值要进行相应的变化<br><em> D 度数矩阵表示为每个点的出度</em> A 邻接矩阵表示为每两个点连接的边数，允许平行边，包括自环<br><br><br>其中构造的矩阵的过程见下面的博客<br><a href="http://blog.csdn.net/txl199106/article/details/62045182" target="_blank" rel="external">生成树的计数 Matrix-Tree（矩阵树）定理</a><br><br># 问题<br><a href="http://www.spoj.com/problems/HIGH/" target="_blank" rel="external">highways</a><br>注意spoj注册的时候要翻墙<br><br>## 题意<br>统计有多少个生成树<br><br>## 题解<br>运用生成树计数的算法<br><br>## AC代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">100005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="keyword">int</span> degree[maxn];</div><div class="line">ll g[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">det</span><span class="params">(ll a[][maxn], <span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ll ret = <span class="number">1</span>;</div><div class="line">    <span class="comment">//去掉了第0行第0列</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; ++i)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; ++j)&#123;</div><div class="line">            <span class="keyword">while</span>(a[j][i])&#123;<span class="comment">//辗转相减法</span></div><div class="line">                ll t = a[i][i]/a[j][i];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i; k&lt;n; ++k)&#123;</div><div class="line">                    a[i][k] = (a[i][k]-a[j][k]*t);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i; k&lt;n; ++k)&#123;</div><div class="line">                    swap(a[i][k], a[j][k]);</div><div class="line">                &#125;</div><div class="line">                ret = -ret;<span class="comment">//交换两行的位置，值变号</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a[i][i]==<span class="number">0</span>)&#123;<span class="comment">//主对角线有值为0，直接行列式为0</span></div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ret = ret*a[i][i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(ret&lt;<span class="number">0</span>)&#123;</div><div class="line">        ret = -ret;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> u, v;</div><div class="line">    <span class="built_in">memset</span>(degree, <span class="number">0</span>, <span class="keyword">sizeof</span> degree );</div><div class="line">    <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g );</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">while</span>(m--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        u--,v--;</div><div class="line">        g[u][v] = g[v][u] = <span class="number">-1</span>;</div><div class="line">        degree[u]++;</div><div class="line">        degree[v]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</div><div class="line">        g[i][i] = degree[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, det(g, n));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        solve();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br># <font color="#FF3030">未解决的问题</font>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成树计数问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>有向图的最小生成树</title>
      <link href="/2018/03/11/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2018/03/11/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>有向图的最小生成树，用的算法是朱刘算法<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="有向图的最小生成树"><a href="#有向图的最小生成树" class="headerlink" title="有向图的最小生成树"></a>有向图的最小生成树</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>恰好有一个入度为0的节点，该节点被称为根节点</li><li>其他的节点入度为1</li><li>从根节点可以到达任意的节点</li></ul><h2 id="最重要的思想"><a href="#最重要的思想" class="headerlink" title="最重要的思想"></a>最重要的思想</h2><p><img src="https://t1.picb.cc/uploads/2018/03/11/2yRcLw.png" alt=""></p><h2 id="资料及代码的参考来源"><a href="#资料及代码的参考来源" class="headerlink" title="资料及代码的参考来源"></a>资料及代码的参考来源</h2><p><a href="http://blog.csdn.net/txl199106/article/details/62045479" target="_blank" rel="external">最小树形图——朱刘算法(Edmonds)</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="c++"><span class="comment">/*</span><span class="comment">最小树形图</span><span class="comment">朱刘算法模板</span><span class="comment">时间复杂度O(nm)</span><span class="comment">数据为int型</span><span class="comment">*/</span><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span><span class="meta">#<span class="meta-keyword">define</span> MAXN 1010</span><span class="meta">#<span class="meta-keyword">define</span> MAXM 1000000+10</span><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span><span class="class">{</span>    <span class="keyword">int</span> from, to, cost;};Edge edge[MAXM];<span class="keyword">int</span> pre[MAXN];<span class="comment">//存储父节点</span><span class="keyword">int</span> vis[MAXN];<span class="comment">//标记作用</span><span class="keyword">int</span> id[MAXN];<span class="comment">//id[i]记录节点i所在环的编号</span><span class="keyword">int</span> in[MAXN];<span class="comment">//in[i]记录i入边中最小的权值</span><span class="keyword">int</span> N, M;<span class="comment">//N个点 M条有向边</span><span class="function"><span class="keyword">int</span> <span class="title">zhuliu</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> n, <span class="keyword">int</span> m, Edge *edge)</span><span class="comment">//root根 n点数 m边数</span></span><span class="function"></span>{    <span class="keyword">int</span> res = <span class="number">0</span>, u, v;    <span class="keyword">while</span>(<span class="number">1</span>)    {        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)            in[i] = INF;<span class="comment">//初始化</span>        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)        {            Edge E = edge[i];            <span class="keyword">if</span>(E.from != E.to &amp;&amp; E.cost &lt; in[E.to])            {                pre[E.to] = E.from;<span class="comment">//记录前驱</span>                in[E.to] = E.cost;<span class="comment">//更新</span>            }        }        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)            <span class="keyword">if</span>(i != root &amp;&amp; in[i] == INF)                <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//有其他孤立点 则不存在最小树形图</span>        <span class="comment">//找有向环</span>        <span class="keyword">int</span> tn = <span class="number">0</span>;<span class="comment">//记录当前查找中 环的总数</span>        <span class="built_in">memset</span>(id, <span class="number">-1</span>, <span class="keyword">sizeof</span>(id));        <span class="built_in">memset</span>(vis, <span class="number">-1</span>, <span class="keyword">sizeof</span>(vis));        in[root] = <span class="number">0</span>;<span class="comment">//根</span>        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)        {            res += in[i];<span class="comment">//累加</span>            v = i;            <span class="comment">//找图中的有向环 三种情况会终止while循环</span>            <span class="comment">//1,直到出现带有同样标记的点说明成环</span>            <span class="comment">//2,节点已经属于其他环</span>            <span class="comment">//3,遍历到根</span>            <span class="keyword">while</span>(vis[v] != i &amp;&amp; id[v] == <span class="number">-1</span> &amp;&amp; v != root)            {                vis[v] = i;<span class="comment">//标记</span>                v = pre[v];<span class="comment">//一直向上找</span>            }            <span class="comment">//因为找到某节点属于其他环  或者 遍历到根  说明当前没有找到有向环</span>            <span class="keyword">if</span>(v != root &amp;&amp; id[v] == <span class="number">-1</span>)<span class="comment">//必须上述查找已经找到有向环</span>            {                <span class="keyword">for</span>(<span class="keyword">int</span> u = pre[v]; u != v; u = pre[u])                    id[u] = tn;<span class="comment">//记录节点所属的 环编号</span>                id[v] = tn++;<span class="comment">//记录节点所属的 环编号  环编号累加</span>            }        }        <span class="keyword">if</span>(tn == <span class="number">0</span>) <span class="keyword">break</span>;<span class="comment">//不存在有向环</span>        <span class="comment">//可能存在独立点</span>        <span class="comment">//cout&lt;&lt;"test1"&lt;&lt;" "&lt;&lt;tn&lt;&lt;endl;</span>        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)            <span class="keyword">if</span>(id[i] == <span class="number">-1</span>){                id[i] = tn++;<span class="comment">//环数累加</span>                <span class="comment">//cout&lt;&lt;i&lt;&lt;endl;</span>            }        <span class="comment">//cout&lt;&lt;"test2"&lt;&lt;tn&lt;&lt;endl;</span>        <span class="comment">//对有向环缩点  和SCC缩点很像吧</span>        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)        {            v = edge[i].to;            edge[i].from = id[edge[i].from];            edge[i].to = id[edge[i].to];            <span class="comment">//&lt;u, v&gt;有向边</span>            <span class="comment">//两点不在同一个环 u到v的距离为 边权cost - in[v]</span>            <span class="keyword">if</span>(edge[i].from != edge[i].to)                edge[i].cost -= in[v];<span class="comment">//更新边权值 继续下一条边的判定</span>        }        n = tn;<span class="comment">//以环总数为下次操作的点数 继续执行上述操作 直到没有环</span>        root = id[root];<span class="comment">//        for(int i=0; i&lt;N; i++){</span><span class="comment">//            cout&lt;&lt;id[i]&lt;&lt;" ";</span><span class="comment">//        }</span><span class="comment">//        cout&lt;&lt;endl;</span>    }    <span class="keyword">return</span> res;}<span class="function"><span class="keyword">void</span> <span class="title">getMap</span><span class="params">()</span></span>{    <span class="keyword">int</span> u, v, w;    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++){        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);        edge[i] = Edge{u<span class="number">-1</span>, v<span class="number">-1</span>, w};    }}<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><span class="function"></span>{    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;N, &amp;M) != EOF)    {        getMap();<span class="comment">//建图  注意去除自环  自己到自己的权值为无穷大</span>        <span class="keyword">int</span> ans = zhuliu(<span class="number">0</span>, N, M, edge);        <span class="keyword">if</span>(ans == <span class="number">-1</span>)            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);<span class="comment">//不存在</span>        <span class="keyword">else</span>            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);    }    <span class="keyword">return</span> <span class="number">0</span>;}<span class="comment">/*</span><span class="comment">7 15</span><span class="comment">1 2 9</span><span class="comment">4 1 3</span><span class="comment">1 5 5</span><span class="comment">2 3 3</span><span class="comment">3 2 7</span><span class="comment">2 4 9</span><span class="comment">5 4 4</span><span class="comment">6 5 3</span><span class="comment">4 3 8</span><span class="comment">4 6 5</span><span class="comment">3 6 9</span><span class="comment">3 7 6</span><span class="comment">7 3 4</span><span class="comment">6 7 4</span><span class="comment">7 6 8</span><span class="comment">*/</span></code></pre><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有向图最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>割点与桥</title>
      <link href="/2018/03/08/%E5%89%B2%E7%82%B9%E4%B8%8E%E6%A1%A5/"/>
      <url>/2018/03/08/%E5%89%B2%E7%82%B9%E4%B8%8E%E6%A1%A5/</url>
      <content type="html"><![CDATA[<p>很多不知道的知识<br><a id="more"></a></p><h1 id="BCC"><a href="#BCC" class="headerlink" title="BCC"></a>BCC</h1><p>只要存在割点,那么就会保存相应的节点信息，<font color="#FF3030"><strong>感觉这样和点-双联通没有什么关系。</strong></font><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> iscut[maxn], low[maxn], pre[maxn];</div><div class="line"><span class="keyword">int</span> bcc_cnt;</div><div class="line"><span class="keyword">int</span> bccno[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bcc[maxn];</div><div class="line"><span class="keyword">int</span> dfs_clock;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> u, v;</div><div class="line">&#125;;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">5 5</span></div><div class="line"><span class="comment">0 1</span></div><div class="line"><span class="comment">1 2</span></div><div class="line"><span class="comment">2 0</span></div><div class="line"><span class="comment">1 3</span></div><div class="line"><span class="comment">3 4</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="built_in">stack</span>&lt;Edge&gt; S;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> lowu = pre[u] = ++dfs_clock;</div><div class="line">    <span class="keyword">int</span> child = <span class="number">0</span>;<span class="comment">//单独判断只有一个的A---B.</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i];</div><div class="line">        Edge e = Edge&#123;u, v&#125;;</div><div class="line">        <span class="keyword">if</span>(!pre[v])&#123;</div><div class="line">           <span class="comment">// printf("test:%d %d\n", e.u, e.v);</span></div><div class="line">            S.push(e);</div><div class="line">            child++;</div><div class="line">            <span class="keyword">int</span> lowv = dfs(v, u);</div><div class="line">            lowu = min(lowu, lowv);</div><div class="line">            <span class="keyword">if</span>(lowv&gt;=pre[u])&#123;</div><div class="line">                iscut[u] = <span class="number">1</span>;</div><div class="line">                bcc_cnt++;</div><div class="line">                bcc[bcc_cnt].clear();</div><div class="line">                <span class="keyword">for</span>(; ; )&#123;</div><div class="line">                    Edge temp = S.top();</div><div class="line">                    S.pop();</div><div class="line">                    <span class="keyword">if</span>(bccno[temp.u] != bcc_cnt)&#123;</div><div class="line">                        bcc[bcc_cnt].push_back(temp.u);</div><div class="line">                        bccno[temp.u] = bcc_cnt;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(bccno[temp.v] != bcc_cnt)&#123;</div><div class="line">                        bcc[bcc_cnt].push_back(temp.v);</div><div class="line">                        bccno[temp.v] = bcc_cnt;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(temp.u == u &amp;&amp;temp.v == v) <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pre[v] &lt; pre[u] &amp;&amp; v!=fa)&#123;<span class="comment">//判断是否为反向边</span></div><div class="line">            S.push(e);</div><div class="line">            <span class="comment">//printf("test:%d %d\n", e.u, e.v);</span></div><div class="line">            lowu = min(lowu, pre[v]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(fa&lt;<span class="number">0</span> &amp;&amp;child == <span class="number">1</span>)iscut[u] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> lowu;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_bcc</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="keyword">sizeof</span>(pre));</div><div class="line">    <span class="built_in">memset</span>(iscut, <span class="number">0</span>, <span class="keyword">sizeof</span>(iscut));</div><div class="line">    <span class="built_in">memset</span>(bccno, <span class="number">0</span>, <span class="keyword">sizeof</span>(bccno));</div><div class="line">    dfs_clock = bcc_cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!pre[i]) dfs(i, <span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) G[i].clear();</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">            G[v].push_back(u);</div><div class="line">        &#125;</div><div class="line">        find_bcc();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=bcc_cnt; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;bcc[i].size(); j++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, bcc[i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, bcc_cnt);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="图的黑白染色"><a href="#图的黑白染色" class="headerlink" title="图的黑白染色"></a>图的黑白染色</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> color[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i];</div><div class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(!color[v])&#123;</div><div class="line">            color[v] = <span class="number">3</span>-color[u];</div><div class="line">            <span class="keyword">if</span>(!dfs(v, u)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(color[u] == color[v]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) G[i].clear();</div><div class="line">        <span class="built_in">memset</span>(color, <span class="number">0</span>, <span class="keyword">sizeof</span>(color));</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</div><div class="line">            G[u].push_back(v);</div><div class="line">            G[v].push_back(u);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">bool</span> judge = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(!color[i])&#123;</div><div class="line">                color[i] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span>(!dfs(i, <span class="number">-1</span>))&#123;</div><div class="line">                    judge = <span class="literal">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(judge)<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="图的奇偶染色-从而判断奇偶圈"><a href="#图的奇偶染色-从而判断奇偶圈" class="headerlink" title="图的奇偶染色,从而判断奇偶圈"></a>图的奇偶染色,从而判断奇偶圈</h1><p>首先定义一下偶圈：从一个初始的顶点出发，经过不重复的边，最后回到原来的点。如果经过的边数是偶数的话，那么就是偶圈。如果经过的边数是奇数的话，那么就是奇圈。</p><p>在对图进行二部染色的时候，如果这个点与之前的点的颜色相同，那么构成奇圈。<br>若果和前面的颜色相反的话，那么就会构成偶圈。</p><p>若两个奇圈有公共的顶点，那么这两个奇圈可以构成一个偶圈。<br>在下面的代码中，我们用belong[]数组来维护这个性质</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5215" target="_blank" rel="external">hdu5215</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>判断是否存在奇圈和偶圈</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>看上面的解析<br><a href="http://blog.csdn.net/l123012013048/article/details/47691033" target="_blank" rel="external">参考来源</a></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> color[maxn];</div><div class="line"><span class="keyword">int</span> T;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> belong[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">bool</span> even, odd;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i];</div><div class="line">        <span class="keyword">if</span>(fa == v) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(!color[v])&#123;</div><div class="line">            color[v] = <span class="number">3</span>-color[u];</div><div class="line">            pre[v] = u;</div><div class="line">            dfs(v, u);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(color[u] == <span class="number">3</span>-color[v]) even = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(color[u] == color[v])&#123;</div><div class="line">            odd = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">int</span> temp = v;</div><div class="line">            ++cnt;</div><div class="line">            <span class="keyword">while</span>(!even)&#123;</div><div class="line">                <span class="keyword">if</span>(temp == <span class="number">-1</span>||temp == u) <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">if</span>(belong[temp])&#123;</div><div class="line">                    even = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                belong[temp] = cnt;</div><div class="line">                temp = pre[temp];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) G[i].clear();</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">memset</span>(color, <span class="number">0</span>, <span class="keyword">sizeof</span>(color));</div><div class="line">        <span class="built_in">memset</span>(belong, <span class="number">0</span>, <span class="keyword">sizeof</span>(belong));</div><div class="line">        <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="keyword">sizeof</span>(pre));</div><div class="line">        odd = even = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u<span class="number">-1</span>].push_back(v<span class="number">-1</span>);</div><div class="line">            G[v<span class="number">-1</span>].push_back(u<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(!color[i])&#123;</div><div class="line">                pre[i] = <span class="number">-1</span>;</div><div class="line">                color[i] = <span class="number">1</span>;</div><div class="line">                dfs(i, <span class="number">-1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(odd)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(even)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 割点，桥 </tag>
            
            <tag> 点-双连通图，边-双联通 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4c题目的小积累</title>
      <link href="/2018/03/08/4c%E9%A2%98%E7%9B%AE%E7%9A%84%E5%B0%8F%E7%A7%AF%E7%B4%AF/"/>
      <url>/2018/03/08/4c%E9%A2%98%E7%9B%AE%E7%9A%84%E5%B0%8F%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<p>记录一些忽视的小细节<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="最短路维护多个属性的问题"><a href="#最短路维护多个属性的问题" class="headerlink" title="最短路维护多个属性的问题"></a>最短路维护多个属性的问题</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.patest.cn/contests/gplt/L2-001" target="_blank" rel="external">L2-001. 紧急救援</a></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>注意最短路径的条数的维护，一开始我想错了.way[]<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e2</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, m, s, t;</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> weight[maxn];</div><div class="line"><span class="keyword">int</span> way[maxn];</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> w[maxn][maxn];</div><div class="line"><span class="keyword">int</span> max_weight[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) dis[i] = INF;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) max_weight[i] = <span class="number">0</span>;</div><div class="line">    dis[s] = <span class="number">0</span>;</div><div class="line">    max_weight[s] = weight[s];</div><div class="line">    way[s] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> min_dis = INF;</div><div class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;dis[j]&lt;min_dis)&#123;</div><div class="line">                u = j;</div><div class="line">                min_dis = dis[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis[u] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G[u].size(); j++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][j];</div><div class="line">            <span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">                <span class="keyword">if</span>(dis[v]&gt;dis[u]+w[u][v])&#123;</div><div class="line">                    dis[v] = dis[u]+w[u][v];</div><div class="line">                    way[v] = way[u];<span class="comment">//这里需要注意一下</span></div><div class="line">                    pre[v] = u;</div><div class="line">                    max_weight[v] = max_weight[u]+weight[v];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(dis[v] == dis[u]+w[u][v])&#123;</div><div class="line">                    way[v] += way[u];<span class="comment">//这里更新的时候需要注意一下</span></div><div class="line">                    <span class="keyword">if</span>(max_weight[v]&lt;max_weight[u]+weight[v])&#123;</div><div class="line">                        pre[v] = u;</div><div class="line">                        max_weight[v] = max_weight[u]+weight[v];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;s, &amp;t))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) G[i].clear();</div><div class="line">        <span class="built_in">memset</span>(way, <span class="number">0</span>, <span class="keyword">sizeof</span>(way));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) pre[i] = i;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;weight[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> u, v, wei;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;wei);</div><div class="line">            G[u].push_back(v);</div><div class="line">            G[v].push_back(u);</div><div class="line">            w[u][v] = w[v][u] = wei;</div><div class="line">        &#125;</div><div class="line">        dfs(s);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, way[t], max_weight[t]);</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; path;</div><div class="line">        <span class="keyword">while</span>(!path.empty())&#123;</div><div class="line">            path.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> temp = t;</div><div class="line">        <span class="keyword">while</span>(temp!=s)&#123;</div><div class="line">            path.push(temp);</div><div class="line">            temp = pre[temp];</div><div class="line">        &#125;</div><div class="line">        path.push(s);</div><div class="line">        <span class="keyword">int</span> len = path.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="keyword">int</span> temp = path.top();</div><div class="line">            path.pop();</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp);</div><div class="line">        &#125;</div><div class="line">        temp = path.top();</div><div class="line">        path.pop();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, temp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="模拟整除"><a href="#模拟整除" class="headerlink" title="模拟整除"></a>模拟整除</h1><p>然后积累一下怎么模拟加法和减法吧<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> ans[<span class="number">1001</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, len=<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>, num=<span class="number">1</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">while</span>(len++)&#123;</div><div class="line">        <span class="keyword">if</span>(pos||num/n)&#123;</div><div class="line">            ans[pos++] = num/n+<span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">        num %= n;</div><div class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</div><div class="line">            ans[pos] = <span class="string">'\0'</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s %d"</span>, ans, len<span class="number">-1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        num = num*<span class="number">10</span>+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="优先队列重新定义运算符号"><a href="#优先队列重新定义运算符号" class="headerlink" title="优先队列重新定义运算符号"></a>优先队列重新定义运算符号</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="keyword">int</span> top;</div><div class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Node a, Node b)&#123;</div><div class="line">        <span class="keyword">return</span> a.top&gt;b.top;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;Node&gt; pq;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="树状数组求中值，二分"><a href="#树状数组求中值，二分" class="headerlink" title="树状数组求中值，二分"></a>树状数组求中值，二分</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(i) ((i) &amp; (-i))</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt; maxn; i += lowbit(i))</div><div class="line">        c[i] += v;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &gt;= <span class="number">1</span>; i -= lowbit(i))</div><div class="line">        sum += c[i];</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PeekMedian</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">1</span>, right = maxn, mid, k = (s.size() + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</div><div class="line">        mid = (left + right) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(getsum(mid) &gt;= k)</div><div class="line">            right = mid;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            left = mid + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, left);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, temp;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">char</span> str[<span class="number">15</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</div><div class="line">        <span class="keyword">if</span>(str[<span class="number">1</span>] == <span class="string">'u'</span>) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</div><div class="line">            s.push(temp);</div><div class="line">            update(temp, <span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">1</span>] == <span class="string">'o'</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(!s.empty()) &#123;</div><div class="line">                update(s.top(), <span class="number">-1</span>);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s.top());</div><div class="line">                s.pop();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Invalid\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(!s.empty())</div><div class="line">                PeekMedian();</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Invalid\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="前序到后续"><a href="#前序到后续" class="headerlink" title="前序到后续"></a>前序到后续</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> isMirror;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; post;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getpost</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> tail)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(root &gt; tail) <span class="keyword">return</span> ;</div><div class="line">    <span class="keyword">int</span> i = root + <span class="number">1</span>, j = tail;</div><div class="line">    <span class="keyword">if</span>(!isMirror) &#123;</div><div class="line">        <span class="keyword">while</span>(i &lt;= tail &amp;&amp; pre[root] &gt; pre[i]) i++;</div><div class="line">        <span class="keyword">while</span>(j &gt; root &amp;&amp; pre[root] &lt;= pre[j]) j--;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">while</span>(i &lt;= tail &amp;&amp; pre[root] &lt;= pre[i]) i++;</div><div class="line">        <span class="keyword">while</span>(j &gt; root &amp;&amp; pre[root] &gt; pre[j]) j--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(i - j != <span class="number">1</span>) <span class="keyword">return</span> ;</div><div class="line">    getpost(root + <span class="number">1</span>, j);<span class="comment">///左</span></div><div class="line">    getpost(i, tail);<span class="comment">///右</span></div><div class="line">    post.push_back(pre[root]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    pre.resize(n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pre[i]);</div><div class="line">    getpost(<span class="number">0</span>, n - <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span>(post.size() != n) &#123;</div><div class="line">        isMirror = <span class="literal">true</span>;</div><div class="line">        post.clear();</div><div class="line">        getpost(<span class="number">0</span>, n - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(post.size() == n) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"YES\n%d"</span>, post[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>, post[i]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"NO"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>#<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">double</span> z;</div><div class="line"><span class="keyword">double</span> r;</div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; child[maxn];</div><div class="line"><span class="keyword">double</span> sum = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">double</span> z)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(val[u]) &#123;</div><div class="line">        sum += val[u]*z;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;child[u].size(); i++)&#123;</div><div class="line">        solve(child[u][i], z*r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="keyword">sizeof</span>(val));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) child[i].clear();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;z&gt;&gt;r;</div><div class="line">    r = (<span class="number">100</span>-r)/<span class="number">100.0</span>;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> k;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;k;</div><div class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">int</span> temp;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;temp;</div><div class="line">            val[i] = temp;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;k; j++)&#123;</div><div class="line">                <span class="keyword">int</span> temp;</div><div class="line">                <span class="built_in">cin</span>&gt;&gt;temp;</div><div class="line">                child[i].push_back(temp);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    solve(<span class="number">0</span>, z);</div><div class="line">    <span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = sum;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> heap[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">downadjust</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i=low, j=low*<span class="number">2</span>;</div><div class="line">    <span class="keyword">while</span>(j&lt;=high)&#123;</div><div class="line">        <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=high&amp;&amp;heap[j]&lt;heap[j+<span class="number">1</span>]) j++;</div><div class="line">        <span class="keyword">if</span>(heap[i]&lt;heap[j])&#123;</div><div class="line">            swap(heap[i], heap[j]);</div><div class="line">            i=j;</div><div class="line">            j = i*<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatheap</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>; i&gt;=<span class="number">1</span>; i--)&#123;</div><div class="line">        creatheap(i, n);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">upadjust</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = high, j=i/<span class="number">2</span>;</div><div class="line">    <span class="keyword">while</span>(j&gt;=low)&#123;</div><div class="line">        <span class="keyword">if</span>(heap[j]&lt;heap[i])&#123;</div><div class="line">            swap(heap[j], heap[i]);</div><div class="line">            i=j;</div><div class="line">            j=i/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;heap[i];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 最长上升序列</div><div class="line"></div><div class="line">``` c++</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> g[maxn];</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)<span class="built_in">cin</span>&gt;&gt;d[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) g[i]= INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> k=lower_bound(g+<span class="number">1</span>,g+n+<span class="number">1</span>, d[i])-g;</div><div class="line">        g[k] = d[i];</div><div class="line">        d[i] = k;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;d[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>```</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>scc</title>
      <link href="/2018/03/06/scc/"/>
      <url>/2018/03/06/scc/</url>
      <content type="html"><![CDATA[<p>scc模板<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>求解强联通块的时候，运用两次dfs</p><ol><li>第一次dfs的时候求出后序遍历的顺序。</li><li>第二次dfs的时候通过反向图，求出每一个连通块。</li></ol><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://poj.org/problem?id=2186" target="_blank" rel="external">poj 2186Popular Cows</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><ul><li>若A认为B是红牛，B认为C是红牛，那么A也认为C是红牛。这样具有传递的关系。</li><li>求出被所有的牛公认的红牛的个数。</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>一个强联通块内，所有牛都相互认为是红牛。</li><li>有向图中，最后一个强联通块内的红牛被公认为红牛。因此只需要求最后一个强联通块内牛的只数就行了</li><li>最后注意判断是否有不连通的情况，即从最后一个块中的红牛出发，反向遍历整张图，看是否所有的点都可达。</li></ul><h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">12 16</span></div><div class="line"><span class="comment">12 11</span></div><div class="line"><span class="comment">11 8</span></div><div class="line"><span class="comment">11 10</span></div><div class="line"><span class="comment">8 10</span></div><div class="line"><span class="comment">10 9</span></div><div class="line"><span class="comment">9 8</span></div><div class="line"><span class="comment">9 7</span></div><div class="line"><span class="comment">7 6</span></div><div class="line"><span class="comment">6 5</span></div><div class="line"><span class="comment">5 7</span></div><div class="line"><span class="comment">6 3</span></div><div class="line"><span class="comment">6 4</span></div><div class="line"><span class="comment">4 3</span></div><div class="line"><span class="comment">3 2</span></div><div class="line"><span class="comment">2 3</span></div><div class="line"><span class="comment">4 1</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rG[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> index[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vs;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    G[u].push_back(v);</div><div class="line">    rG[v].push_back(u);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[G[u][i]]) dfs(G[u][i]);</div><div class="line">    &#125;</div><div class="line">    vs.push_back(u);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rdfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    vis[v] = <span class="literal">true</span>;</div><div class="line">    index[v] = k;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;rG[v].size(); i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[rG[v][i]])rdfs(rG[v][i], k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">scc</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    vs.clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[i]) dfs(i);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=vs.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[vs[i]])&#123;</div><div class="line">            rdfs(vs[i], k++);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> u=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(index[i] == k<span class="number">-1</span>)&#123;</div><div class="line">            u = i;</div><div class="line">            ans++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    rdfs(u, <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[i])&#123;</div><div class="line">            ans = <span class="number">0</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            G[i].clear();</div><div class="line">            rG[i].clear();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            add_edge(u<span class="number">-1</span>, v<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        scc();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="tarjan算法来求有向图的强联通分量"><a href="#tarjan算法来求有向图的强联通分量" class="headerlink" title="tarjan算法来求有向图的强联通分量"></a>tarjan算法来求有向图的强联通分量</h1><p>时间复杂度是线性的，常数比前面的Kosaraju的算法小一点，所以更推荐这个算法</p><p>算法的思想和求割点有点像<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> pre[maxn], low[maxn], sccno[maxn];</div><div class="line"><span class="keyword">int</span> dfs_clock, scc_cnt;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    pre[u] = low[u] = ++dfs_clock;</div><div class="line">    S.push(u);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i];</div><div class="line">        <span class="keyword">if</span>(!pre[v])&#123;</div><div class="line">            dfs(v);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!sccno[v])&#123;</div><div class="line">            low[u] = min(low[u], pre[v]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[u] == pre[u])&#123;</div><div class="line">        ++scc_cnt;</div><div class="line">        <span class="keyword">while</span>(!S.empty())&#123;</div><div class="line">            <span class="keyword">int</span> temp = S.top();</div><div class="line">            S.pop();</div><div class="line">            sccno[temp] = scc_cnt;</div><div class="line">            <span class="keyword">if</span>(temp == u) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_scc</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(pre, <span class="number">0</span> ,<span class="keyword">sizeof</span>(pre));</div><div class="line">    <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span>(low));</div><div class="line">    <span class="built_in">memset</span>(sccno, <span class="number">0</span>, <span class="keyword">sizeof</span>(sccno));</div><div class="line">    dfs_clock = scc_cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!pre[i])&#123;</div><div class="line">            dfs(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) G[i].clear();</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u<span class="number">-1</span>].push_back(v<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        find_scc();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, sccno[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1><p>如何进行相应的缩点。<br>能进行释放点吗？<br><del>有时间学习一波tarjan的算法<a href="http://blog.csdn.net/txl199106/article/details/38616309" target="_blank" rel="external">tarjan算法求有向图的强联通分量</a></del></p>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>poj2763(dfs序+BIT+LCA)</title>
      <link href="/2018/03/05/poj2763-dfs%E5%BA%8F-BIT-LCA/"/>
      <url>/2018/03/05/poj2763-dfs%E5%BA%8F-BIT-LCA/</url>
      <content type="html"><![CDATA[<p>挑战程序设计里面的一道题目，然而调整很长的时间，结果T了emmmm<br>其中的思想还是相当的重要的</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="http://poj.org/problem?id=2763" target="_blank" rel="external">poj2763</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一张树形图，n个节点，n-1条边。<br>有两个种类的询问：</p><ol><li>从这个点到目标点路径的权值</li><li>改变某条边的权值</li></ol><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ol><li>针对第一种操作，我们先预处理出来LCA, 然后求出每个点到root点的路径权重和(为什么算出来的是一条路径的呢？因为回边会相互抵消。)。<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sum(id[v])+sum(id[u])<span class="number">-2</span>*sum(id[p])</div></pre></td></tr></table></figure></li></ol><p><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1fp258iej5cj30k00fzt9j.jpg" alt=""></p><ol><li>对第二种操作，只要改变相应的边权，然后在BIT中进行相应的更新就可以了</li></ol><p>dfs序的说明：<br>vs[k] = v: 表示的是dfs第k次访问的时候，到达的顶点是v<br>depth[k] = d: 表示的是dfs第k次访问的时候, 所在节点的深度为d<br>id[v]=k: 表示节点v第一次被访问的时候访问的编号，这个非常的有用<br>假设我们在id[u]~id[v]之间， dfs访问了很多个节点，这样就能形成了一个链，将树形的结构转变为线性的结构。</p><h2 id="T了的代码"><a href="#T了的代码" class="headerlink" title="T了的代码"></a>T了的代码</h2><p>期间遇到了：</p><ul><li>数组开的太小RE了</li><li>开的ll, 输出为d的表达错误，一度怀疑人生。</li><li>好不容易调好了，结果T了。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">int</span> a[maxv], b[maxv], weight[maxv];</div><div class="line"><span class="keyword">int</span> n, q, s;</div><div class="line"><span class="keyword">int</span> type[maxv];</div><div class="line"><span class="comment">//max_q == max_v</span></div><div class="line"><span class="keyword">int</span> x[maxv], t[maxv];</div><div class="line"><span class="keyword">int</span> root;</div><div class="line"><span class="keyword">int</span> vs[maxv*<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> depth[maxv*<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> id[maxv];</div><div class="line"><span class="keyword">int</span> es[maxv*<span class="number">2</span>];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> id, to, cost;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxv];</div><div class="line"></div><div class="line"><span class="comment">//c数组怎么初始化.在dfs的时候初始化了。</span></div><div class="line">ll c[maxv*<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(i&lt;=maxv*<span class="number">2</span>)&#123;</div><div class="line">        c[i] += val;</div><div class="line">        i += i&amp;(-i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">    ll ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</div><div class="line">        ans += c[i];</div><div class="line">        i -= i&amp;(-i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> p, <span class="keyword">int</span> d, <span class="keyword">int</span>&amp; k)</span></span>&#123;</div><div class="line"><span class="comment">//    printf("depth: %d\n", d);</span></div><div class="line"><span class="comment">//    printf("%d %d\n", v, k);</span></div><div class="line">    id[v] = k;</div><div class="line">    vs[k] = v;</div><div class="line">    depth[k++] = d;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[v].size(); i++)&#123;</div><div class="line">        Edge &amp;e = G[v][i];</div><div class="line">        <span class="keyword">if</span>(e.to!=p)&#123;</div><div class="line">            add(k, e.cost);</div><div class="line">            es[e.id*<span class="number">2</span>] = k;</div><div class="line">            dfs(e.to, v, d+<span class="number">1</span>, k);</div><div class="line">            vs[k] = v;</div><div class="line">            depth[k++] = d;</div><div class="line">            add(k, -e.cost);</div><div class="line">            es[e.id*<span class="number">2</span>+<span class="number">1</span>] = k;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxv*<span class="number">2</span>][<span class="number">21</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min_index</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> depth[i]&lt;depth[j]?i:j;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rmq_init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        d[i][<span class="number">0</span>] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j)&lt;=n; j++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; (i+(<span class="number">1</span>&lt;&lt;j))&lt;n; i++)&#123;</div><div class="line">            d[i][j] = min_index(d[i][j<span class="number">-1</span>], d[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l ,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k = <span class="built_in">floor</span>(log2(r-l+<span class="number">1</span>));</div><div class="line">    <span class="comment">//printf("value: %d\n", k);</span></div><div class="line">    <span class="keyword">return</span> min_index(d[l][k], d[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l = min(id[u], id[v]);</div><div class="line">    <span class="keyword">int</span> r = max(id[u], id[v]);</div><div class="line">   <span class="comment">// printf("lr:%d %d\n", l, r);</span></div><div class="line">    <span class="keyword">int</span> val = query(l, r);</div><div class="line">    <span class="comment">//printf("val: %d\n", val);</span></div><div class="line">    <span class="keyword">return</span> vs[val];</div><div class="line">    <span class="comment">//return -1;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> d = <span class="number">0</span>, k =<span class="number">0</span>;</div><div class="line">    dfs(root, <span class="number">-1</span>, d, k);</div><div class="line">    rmq_init(n*<span class="number">2</span><span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    root = n/<span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">        G[i].clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">        G[a[i]<span class="number">-1</span>].push_back(Edge&#123;i, b[i]<span class="number">-1</span>, weight[i]&#125;);</div><div class="line">        G[b[i]<span class="number">-1</span>].push_back(Edge&#123;i, a[i]<span class="number">-1</span>, weight[i]&#125;);</div><div class="line">    &#125;</div><div class="line">    init(n);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> v = s<span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;q; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(type[i] == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">int</span> u = x[i]<span class="number">-1</span>;</div><div class="line">            <span class="keyword">int</span> p = lca(v, u);</div><div class="line">            <span class="comment">//printf("the lca is:%d %d--%d\n", p, u, v);</span></div><div class="line">            <span class="comment">//printf("%d %d %d\n",sum(id[u]), sum(id[v]), sum(id[p]) );</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum(id[v])+sum(id[u])<span class="number">-2</span>*sum(id[p]));</div><div class="line">            v = u;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> k = x[i]<span class="number">-1</span>;</div><div class="line">            add(es[k*<span class="number">2</span>], t[i]-weight[k]);</div><div class="line">            add(es[k*<span class="number">2</span>+<span class="number">1</span>], weight[k]-t[i]);</div><div class="line">            weight[k] = t[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;q, &amp;s))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a[i], &amp;b[i], &amp;weight[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;q; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;type[i]);</div><div class="line">            <span class="keyword">if</span>(type[i] == <span class="number">0</span>)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x[i], &amp;t[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        solve();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>二分和三分</title>
      <link href="/2018/02/28/%E4%BA%8C%E5%88%86%E5%92%8C%E4%B8%89%E5%88%86/"/>
      <url>/2018/02/28/%E4%BA%8C%E5%88%86%E5%92%8C%E4%B8%89%E5%88%86/</url>
      <content type="html"><![CDATA[<p>希望能整理出二分和三分的模板<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="整数的二分"><a href="#整数的二分" class="headerlink" title="整数的二分"></a>整数的二分</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3276" target="_blank" rel="external">Uva</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><ul><li>有n件物品，每件物品有四个参数type, name, price, quality</li><li>每一个type中挑选一个物品，并且所有type的price之和不能超过预算b。</li><li>满足上述条件的基础之上，似的quality最大。</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>二分quality</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; id;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ID</span><span class="params">(<span class="built_in">string</span> name)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!id.count(name)) <span class="keyword">return</span> id[name] = cnt++;</div><div class="line">    <span class="keyword">return</span> id[name];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> quality;</div><div class="line">    <span class="keyword">int</span> price;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, b;</div><div class="line"><span class="built_in">vector</span>&lt;Node&gt; comp[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> q)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cnt; i++)&#123;</div><div class="line">        <span class="keyword">int</span> sz = comp[i].size();</div><div class="line">        <span class="keyword">int</span> price = b+<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;sz; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(comp[i][j].quality&gt;=q)&#123;</div><div class="line">                price = min(price, comp[i][j].price);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(price == b+<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        sum+=price;</div><div class="line">        <span class="keyword">if</span>(sum&gt;b) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;b);</div><div class="line">        cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) comp[i].clear();</div><div class="line">        id.clear();</div><div class="line">        <span class="keyword">int</span> maxq;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">char</span> name[<span class="number">30</span>], type[<span class="number">30</span>];</div><div class="line">            <span class="keyword">int</span> price, quality;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%s%d%d"</span>, type, name, &amp;price, &amp;quality);</div><div class="line">            maxq = max(maxq, quality);</div><div class="line">            comp[ID(type)].push_back((Node)&#123;quality, price&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> L = <span class="number">0</span>, R = maxq;</div><div class="line">        <span class="keyword">while</span>(L&lt;R)&#123;</div><div class="line">            <span class="keyword">int</span> M = L + (R-L+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(ok(M))L = M;</div><div class="line">            <span class="keyword">else</span> R = M<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, L);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="小数的二分"><a href="#小数的二分" class="headerlink" title="小数的二分"></a>小数的二分</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><a href=""></a></p><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><ul><li>n个蛋糕， f个朋友</li><li>将n个蛋糕分成f+1份，每份不能拼凑。</li><li>问每个人分得最大的蛋糕的面积</li></ul><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>二分面积即可</p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><p>一开始吧PI定义为float WA成傻逼。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, f;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> number[maxn];</div><div class="line"><span class="keyword">double</span> area[maxn];</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">double</span> s)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        sum += <span class="built_in">floor</span>(area[i]/s);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(sum&gt;=f+<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="comment">//freopen("data.out","w",stdout);</span></div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;f);</div><div class="line">        <span class="keyword">double</span> max_area = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;number[i]);</div><div class="line">            area[i] = number[i]*number[i]*PI;</div><div class="line">            max_area = max(max_area, area[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> L=<span class="number">0</span>, R = max_area;</div><div class="line">        <span class="keyword">while</span>(R-L&gt;<span class="number">1e-7</span>)&#123;</div><div class="line">            <span class="keyword">double</span> M = (R+L)/<span class="number">2.0</span>;</div><div class="line">            <span class="keyword">if</span>(ok(M))L = M;</div><div class="line">            <span class="keyword">else</span> R = M;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>, L);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="三分求峰值函数的极值或者整数的值"><a href="#三分求峰值函数的极值或者整数的值" class="headerlink" title="三分求峰值函数的极值或者整数的值"></a>三分求峰值函数的极值或者整数的值</h1><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分、三分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RMQ</title>
      <link href="/2018/02/28/RMQ/"/>
      <url>/2018/02/28/RMQ/</url>
      <content type="html"><![CDATA[<p>RMQ(range maximum/minimum query),可以用线段树或者ST实现<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h1><p>使用动态规划的思想，不断的更新区间的最值。<br>d[i][j]表示以i为起点，区间的长度为\(2_j\)的最值。<br>首先枚举区间的长度，然后枚举区间的起点，不断的更新d[][]的值。</p><p>当我们查询区间[l, r]的最值的时候，我们首先求出\(2^k\le r-l+1\)最大的k值，例如：[5, 11], 最大的k值为2， 那么min(5, 11) =min(min(5, 8), min(11-2^2+1, 11))</p><p>结合代码</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> d[maxn][<span class="number">21</span>];</div><div class="line"><span class="keyword">int</span> number[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_rmq</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        d[i][<span class="number">0</span>] = number[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j)&lt;=n; j++)&#123;<span class="comment">//枚举长度</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n; i++)&#123;<span class="comment">//枚举起点</span></div><div class="line">            d[i][j] = min(d[i][j<span class="number">-1</span>], d[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmq_min</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">floor</span>(log2(r-l+<span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> min(d[l][len], d[r-(<span class="number">1</span>&lt;&lt;len)+<span class="number">1</span>][len]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;number[i]);</div><div class="line">        &#125;</div><div class="line">        init_rmq();</div><div class="line">        <span class="keyword">int</span> q, l, r;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;q; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;rmq_min(l, r)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="用rmq来求LCA"><a href="#用rmq来求LCA" class="headerlink" title="用rmq来求LCA"></a>用rmq来求LCA</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxv];</div><div class="line"><span class="keyword">int</span> root;</div><div class="line"></div><div class="line"><span class="keyword">int</span> vs[maxv*<span class="number">2</span>+<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> depth[maxv+<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> id[maxv];</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxv][<span class="number">21</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> p, <span class="keyword">int</span> d, <span class="keyword">int</span> &amp;k)</span></span>&#123;</div><div class="line">    id[v] = k;</div><div class="line">    vs[k] = v;</div><div class="line">    depth[k++] = d;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[v].size(); i++)&#123;</div><div class="line">        <span class="keyword">if</span>(G[v][i]!=p)&#123;</div><div class="line">            dfs(G[v][i], v, d+<span class="number">1</span>, k);</div><div class="line">            vs[k] = v;</div><div class="line">            depth[k++] = d;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rmq_init</span><span class="params">(<span class="keyword">int</span>* depth, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        d[i][<span class="number">0</span>] = depth[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j)&lt;=n; j++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i+(<span class="number">1</span>&lt;&lt;j)&lt;=n; i++)&#123;</div><div class="line">            d[i][j] = min(d[i][j<span class="number">-1</span>], d[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmq_min</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(id[u]&lt;id[v])&#123;</div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">floor</span>(log2(id[v]-id[u]+<span class="number">1</span>));</div><div class="line">        <span class="keyword">int</span> val = min(d[id[u]][len], d[id[v]-(<span class="number">1</span>&lt;&lt;len)+<span class="number">1</span>][len]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=id[u]; i&lt;=id[v]; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(depth[i] == val)</div><div class="line">                <span class="keyword">return</span> vs[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">floor</span>(log2(id[u]-id[v]+<span class="number">1</span>));</div><div class="line">        <span class="keyword">int</span> val = min(d[id[v]][len], d[id[u]-(<span class="number">1</span>&lt;&lt;len)+<span class="number">1</span>][len]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=id[v]; i&lt;=id[u]; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(depth[i] == val)</div><div class="line">                <span class="keyword">return</span> vs[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> d = <span class="number">0</span>, k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> root = <span class="number">1</span>;</div><div class="line">    dfs(root, <span class="number">-1</span>, d, k);</div><div class="line">    rmq_init(depth, n*<span class="number">2</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d -- %d: %d\n"</span>, i, j, rmq_min(i, j));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMQ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数独</title>
      <link href="/2018/02/28/%E6%95%B0%E7%8B%AC/"/>
      <url>/2018/02/28/%E6%95%B0%E7%8B%AC/</url>
      <content type="html"><![CDATA[<p>本文将由浅入深的讲解数独的求解。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://poj.org/problem?id=2676" target="_blank" rel="external">poj2676 Sudoku</a><br><a href="http://poj.org/problem?id=2918" target="_blank" rel="external">poj2918 Tudoku</a><br>爱数社面试题目，今天终于可以解决了，居然还是最简单的数独类型，当年太智障了。<br><img src="https://t1.picb.cc/uploads/2018/03/03/diUcD.png" alt=""></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>运用深度优先搜索就行了。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> mp[maxn][maxn];</div><div class="line"><span class="keyword">int</span> T;</div><div class="line"><span class="keyword">bool</span> stat1[maxn][maxn];<span class="comment">//行的9个数字</span></div><div class="line"><span class="keyword">bool</span> stat2[maxn][maxn];<span class="comment">//列的9个数字</span></div><div class="line"><span class="keyword">bool</span> stat3[maxn][maxn];<span class="comment">//小块的9个数字</span></div><div class="line"><span class="keyword">int</span> sx, sy;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> number)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(stat1[x][number] || stat2[y][number]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span>(stat3[<span class="number">3</span>*<span class="keyword">int</span>(x/<span class="number">3</span>)+<span class="keyword">int</span>(y/<span class="number">3</span>)][number]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> number)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x == <span class="number">9</span> &amp;&amp; y == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>(mp[x][y] != <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(dfs(<span class="keyword">int</span>(x+<span class="keyword">int</span>(y/<span class="number">8</span>)), y==<span class="number">8</span>?<span class="number">0</span>:y+<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=number; k&lt;=<span class="number">9</span>; k++)&#123;</div><div class="line">        <span class="keyword">if</span>(judge(x, y, k))&#123;</div><div class="line">            mp[x][y] = k;</div><div class="line">            stat1[x][k] = stat2[y][k] = stat3[<span class="number">3</span>*<span class="keyword">int</span>(x/<span class="number">3</span>)+<span class="keyword">int</span>(y/<span class="number">3</span>)][k] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span>(dfs(<span class="keyword">int</span>(x+(y==<span class="number">8</span>?<span class="number">1</span>:<span class="number">0</span>)), y==<span class="number">8</span>?<span class="number">0</span>:y+<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                mp[x][y] = <span class="number">-1</span>;</div><div class="line">                stat1[x][k] = stat2[y][k] = stat3[<span class="number">3</span>*<span class="keyword">int</span>(x/<span class="number">3</span>)+<span class="keyword">int</span>(y/<span class="number">3</span>)][k] = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="built_in">string</span> number;</div><div class="line">    <span class="keyword">int</span> row = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;T; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(stat1, <span class="number">0</span>, <span class="keyword">sizeof</span>(stat1));</div><div class="line">        <span class="built_in">memset</span>(stat2, <span class="number">0</span>, <span class="keyword">sizeof</span>(stat2));</div><div class="line">        <span class="built_in">memset</span>(stat3, <span class="number">0</span>, <span class="keyword">sizeof</span>(stat3));</div><div class="line">        row = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;<span class="number">9</span>; m++)&#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;number;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">9</span>; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(number[j] == <span class="string">'0'</span>)&#123;</div><div class="line">                    mp[row][j] = <span class="number">-1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    mp[row][j] = number[j] - <span class="string">'0'</span>;</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            row++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">bool</span> flag_start = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">9</span>; j++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">9</span>; k++)&#123;</div><div class="line">                <span class="keyword">if</span>(mp[j][k] == <span class="number">-1</span>&amp;&amp;!flag_start)&#123;</div><div class="line">                    sx = j, sy = k;</div><div class="line">                    flag_start = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                stat1[j][mp[j][k]] = <span class="literal">true</span>;</div><div class="line">                stat2[k][mp[j][k]] = <span class="literal">true</span>;</div><div class="line">                stat3[(j/<span class="number">3</span>)*<span class="number">3</span>+(k/<span class="number">3</span>)][mp[j][k]] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">9</span>; j++)&#123;</div><div class="line">            <span class="comment">//printf("%d %d", sx, sy);</span></div><div class="line">            <span class="keyword">if</span>(dfs(sx, sy, j))&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">9</span>; j++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">9</span>; k++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, mp[j][k]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="16·16的数独"><a href="#16·16的数独" class="headerlink" title="16·16的数独"></a>16·16的数独</h1><p>运用的是跳舞链这种数据结构，当然还有的题解是运用了合理的寻找的策略，优先寻找那些选择个数少的格子，从而减小深度优先搜索的复杂度。<br><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=580&amp;page=show_problem&amp;problem=4055" target="_blank" rel="external">1309 - Sudoku</a></p><p>还没有完成的题目，只需要很小的剪枝就可以了。<br><a href="http://poj.org/problem?id=3074" target="_blank" rel="external">poj3074</a></p><p>下面的代码是跳舞链来实现的，网上有很多这方面的教程，希望有时间多学一学吧。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// LA2659 Sudoku</span></div><div class="line"><span class="comment">// Rujia Liu</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxr = <span class="number">5000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxnode = <span class="number">20000</span>;</div><div class="line"></div><div class="line"><span class="comment">// 行编号从1开始，列编号为1~n，结点0是表头结点; 结点1~n是各列顶部的虚拟结点</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> n, sz; <span class="comment">// 列数，结点总数</span></div><div class="line">  <span class="keyword">int</span> S[maxn]; <span class="comment">// 各列结点数</span></div><div class="line"></div><div class="line">  <span class="keyword">int</span> row[maxnode], col[maxnode]; <span class="comment">// 各结点行列编号</span></div><div class="line">  <span class="keyword">int</span> L[maxnode], R[maxnode], U[maxnode], D[maxnode]; <span class="comment">// 十字链表</span></div><div class="line"></div><div class="line">  <span class="keyword">int</span> ansd, ans[maxr]; <span class="comment">// 解</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// n是列数</span></div><div class="line">    <span class="keyword">this</span>-&gt;n = n;</div><div class="line"></div><div class="line">    <span class="comment">// 虚拟结点</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= n; i++) &#123;</div><div class="line">      U[i] = i; D[i] = i; L[i] = i<span class="number">-1</span>, R[i] = i+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    R[n] = <span class="number">0</span>; L[<span class="number">0</span>] = n;</div><div class="line"></div><div class="line">    sz = n + <span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(S, <span class="number">0</span>, <span class="keyword">sizeof</span>(S));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addRow</span><span class="params">(<span class="keyword">int</span> r, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; columns)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> first = sz;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columns.size(); i++) &#123;</div><div class="line">      <span class="keyword">int</span> c = columns[i];</div><div class="line">      L[sz] = sz - <span class="number">1</span>; R[sz] = sz + <span class="number">1</span>; D[sz] = c; U[sz] = U[c];</div><div class="line">      D[U[c]] = sz; U[c] = sz;</div><div class="line">      row[sz] = r; col[sz] = c;</div><div class="line">      S[c]++; sz++;</div><div class="line">    &#125;</div><div class="line">    R[sz - <span class="number">1</span>] = first; L[first] = sz - <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 顺着链表A，遍历除s外的其他元素</span></div><div class="line">  <span class="meta">#<span class="meta-keyword">define</span> FOR(i,A,s) for(int i = A[s]; i != s; i = A[i]) </span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">    L[R[c]] = L[c];</div><div class="line">    R[L[c]] = R[c];</div><div class="line">    FOR(i,D,c)</div><div class="line">      FOR(j,R,i) &#123; U[D[j]] = U[j]; D[U[j]] = D[j]; --S[col[j]]; &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">restore</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">    FOR(i,U,c)</div><div class="line">      FOR(j,L,i) &#123; ++S[col[j]]; U[D[j]] = j; D[U[j]] = j; &#125;</div><div class="line">    L[R[c]] = c;</div><div class="line">    R[L[c]] = c;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// d为递归深度</span></div><div class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (R[<span class="number">0</span>] == <span class="number">0</span>) &#123; <span class="comment">// 找到解</span></div><div class="line">      ansd = d; <span class="comment">// 记录解的长度</span></div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 找S最小的列c</span></div><div class="line">    <span class="keyword">int</span> c = R[<span class="number">0</span>]; <span class="comment">// 第一个未删除的列</span></div><div class="line">    FOR(i,R,<span class="number">0</span>) <span class="keyword">if</span>(S[i] &lt; S[c]) c = i;</div><div class="line"></div><div class="line">    remove(c); <span class="comment">// 删除第c列</span></div><div class="line">    FOR(i,D,c) &#123; <span class="comment">// 用结点i所在行覆盖第c列</span></div><div class="line">      ans[d] = row[i];</div><div class="line">      FOR(j,R,i) remove(col[j]); <span class="comment">// 删除结点i所在行能覆盖的所有其他列</span></div><div class="line">      <span class="keyword">if</span>(dfs(d+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      FOR(j,L,i) restore(col[j]); <span class="comment">// 恢复结点i所在行能覆盖的所有其他列</span></div><div class="line">    &#125;</div><div class="line">    restore(c); <span class="comment">// 恢复第c列</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span> </span>&#123;</div><div class="line">    v.clear();</div><div class="line">    <span class="keyword">if</span>(!dfs(<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ansd; i++) v.push_back(ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">////////////// 题目相关</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"></div><div class="line">DLX solver;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> SLOT = <span class="number">0</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> ROW = <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> COL = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> SUB = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// 行/列的统一编解码函数。从1开始编号</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> a*<span class="number">256</span>+b*<span class="number">16</span>+c+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">int</span> code, <span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b, <span class="keyword">int</span>&amp; c)</span> </span>&#123;</div><div class="line">  code--;</div><div class="line">  c = code%<span class="number">16</span>; code /= <span class="number">16</span>;</div><div class="line">  b = code%<span class="number">16</span>; code /= <span class="number">16</span>;</div><div class="line">  a = code;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> puzzle[<span class="number">16</span>][<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, puzzle[i]) != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(read()) &#123;</div><div class="line">    <span class="keyword">if</span>(++kase != <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    solver.init(<span class="number">1024</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">16</span>; r++)</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">16</span>; c++) </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; <span class="number">16</span>; v++)</div><div class="line">          <span class="keyword">if</span>(puzzle[r][c] == <span class="string">'-'</span> || puzzle[r][c] == <span class="string">'A'</span>+v) &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; columns;</div><div class="line">            columns.push_back(encode(SLOT, r, c));</div><div class="line">            columns.push_back(encode(ROW, r, v));</div><div class="line">            columns.push_back(encode(COL, c, v));</div><div class="line">            columns.push_back(encode(SUB, (r/<span class="number">4</span>)*<span class="number">4</span>+c/<span class="number">4</span>, v));</div><div class="line">            solver.addRow(encode(r, c, v), columns);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">    assert(solver.solve(ans));</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++) &#123;</div><div class="line">      <span class="keyword">int</span> r, c, v;</div><div class="line">      decode(ans[i], r, c, v);</div><div class="line">      puzzle[r][c] = <span class="string">'A'</span>+v;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, puzzle[i]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数独 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二维线段树</title>
      <link href="/2018/02/28/%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2018/02/28/%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>直接粘贴书上的代码，就当一个积累吧。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="所解决的问题"><a href="#所解决的问题" class="headerlink" title="所解决的问题"></a>所解决的问题</h1><p>给定一个n·m的矩阵：</p><ul><li>查询\(x_1\le x\le x_2, y_1\le y \le y_2\)中的最大值和最小值</li><li>将(x, y)的值改编为value</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Census, Uva11297</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UVa11297 Census</span></div><div class="line"><span class="comment">// Rujia Liu</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span> + <span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IntervalTree2D</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> Max[maxn][maxn], Min[maxn][maxn], n, m;</div><div class="line">  <span class="keyword">int</span> xo, xleaf, x1, y1, x2, y2, x, y, v, vmax, vmin; <span class="comment">// 参数、查询结果和中间变量</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">query1D</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(y1 &lt;= L &amp;&amp; R &lt;= y2) &#123;</div><div class="line">      vmax = max(Max[xo][o], vmax); vmin = min(Min[xo][o], vmin);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</div><div class="line">      <span class="keyword">if</span>(y1 &lt;= M) query1D(o*<span class="number">2</span>, L, M);</div><div class="line">      <span class="keyword">if</span>(M &lt; y2) query1D(o*<span class="number">2</span>+<span class="number">1</span>, M+<span class="number">1</span>, R);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">query2D</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x1 &lt;= L &amp;&amp; R &lt;= x2) &#123; xo = o; query1D(<span class="number">1</span>, <span class="number">1</span>, m); &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</div><div class="line">      <span class="keyword">if</span>(x1 &lt;= M) query2D(o*<span class="number">2</span>, L, M);</div><div class="line">      <span class="keyword">if</span>(M &lt; x2) query2D(o*<span class="number">2</span>+<span class="number">1</span>, M+<span class="number">1</span>, R);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">modify1D</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(L == R) &#123;</div><div class="line">      <span class="keyword">if</span>(xleaf) &#123; Max[xo][o] = Min[xo][o] = v; <span class="keyword">return</span>; &#125;</div><div class="line">      Max[xo][o] = max(Max[xo*<span class="number">2</span>][o], Max[xo*<span class="number">2</span>+<span class="number">1</span>][o]);</div><div class="line">      Min[xo][o] = min(Min[xo*<span class="number">2</span>][o], Min[xo*<span class="number">2</span>+<span class="number">1</span>][o]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</div><div class="line">      <span class="keyword">if</span>(y &lt;= M) modify1D(o*<span class="number">2</span>, L, M);</div><div class="line">      <span class="keyword">else</span> modify1D(o*<span class="number">2</span>+<span class="number">1</span>, M+<span class="number">1</span>, R);</div><div class="line">      Max[xo][o] = max(Max[xo][o*<span class="number">2</span>], Max[xo][o*<span class="number">2</span>+<span class="number">1</span>]);</div><div class="line">      Min[xo][o] = min(Min[xo][o*<span class="number">2</span>], Min[xo][o*<span class="number">2</span>+<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">modify2D</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(L == R) &#123; xo = o; xleaf = <span class="number">1</span>; modify1D(<span class="number">1</span>, <span class="number">1</span>, m); &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</div><div class="line">      <span class="keyword">if</span>(x &lt;= M) modify2D(o*<span class="number">2</span>, L, M);</div><div class="line">      <span class="keyword">else</span> modify2D(o*<span class="number">2</span>+<span class="number">1</span>, M+<span class="number">1</span>, R);</div><div class="line">      xo = o; xleaf = <span class="number">0</span>; modify1D(<span class="number">1</span>, <span class="number">1</span>, m);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line">    vmax = -INF; vmin = INF;</div><div class="line">    query2D(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span>&#123;</div><div class="line">    modify2D(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">IntervalTree2D t;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> n, m, Q, x1, y1, x2, y2, x, y, v;</div><div class="line">  <span class="keyword">char</span> op[<span class="number">10</span>];</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">  t.n = n; t.m = m;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t.v);</div><div class="line">      t.x = i; t.y = j;</div><div class="line">      t.modify();</div><div class="line">    &#125;</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</div><div class="line">  <span class="keyword">while</span>(Q--) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, op);</div><div class="line">    <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'q'</span>) &#123;</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;t.x1, &amp;t.y1, &amp;t.x2, &amp;t.y2);</div><div class="line">      t.query();</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, t.vmax, t.vmin);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;t.x, &amp;t.y, &amp;t.v);</div><div class="line">      t.modify();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="带build的代码"><a href="#带build的代码" class="headerlink" title="带build的代码"></a>带build的代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UVa11297 Census：带build的版本</span></div><div class="line"><span class="comment">// Rujia Liu</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> A[maxn][maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IntervalTree2D</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> Max[maxn][maxn], Min[maxn][maxn], n, m;</div><div class="line">  <span class="keyword">int</span> xo, xleaf, row, x1, y1, x2, y2, x, y, v, vmax, vmin; <span class="comment">// 参数、查询结果和中间变量</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">query1D</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(y1 &lt;= L &amp;&amp; R &lt;= y2) &#123;</div><div class="line">      vmax = max(Max[xo][o], vmax); vmin = min(Min[xo][o], vmin);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</div><div class="line">      <span class="keyword">if</span>(y1 &lt;= M) query1D(o*<span class="number">2</span>, L, M);</div><div class="line">      <span class="keyword">if</span>(M &lt; y2) query1D(o*<span class="number">2</span>+<span class="number">1</span>, M+<span class="number">1</span>, R);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">query2D</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(x1 &lt;= L &amp;&amp; R &lt;= x2) &#123; xo = o; query1D(<span class="number">1</span>, <span class="number">1</span>, m); &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</div><div class="line">      <span class="keyword">if</span>(x1 &lt;= M) query2D(o*<span class="number">2</span>, L, M);</div><div class="line">      <span class="keyword">if</span>(M &lt; x2) query2D(o*<span class="number">2</span>+<span class="number">1</span>, M+<span class="number">1</span>, R);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">modify1D</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(L == R) &#123;</div><div class="line">      <span class="keyword">if</span>(xleaf) &#123; Max[xo][o] = Min[xo][o] = v; <span class="keyword">return</span>; &#125;</div><div class="line">      Max[xo][o] = max(Max[xo*<span class="number">2</span>][o], Max[xo*<span class="number">2</span>+<span class="number">1</span>][o]);</div><div class="line">      Min[xo][o] = min(Min[xo*<span class="number">2</span>][o], Min[xo*<span class="number">2</span>+<span class="number">1</span>][o]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</div><div class="line">      <span class="keyword">if</span>(y &lt;= M) modify1D(o*<span class="number">2</span>, L, M);</div><div class="line">      <span class="keyword">else</span> modify1D(o*<span class="number">2</span>+<span class="number">1</span>, M+<span class="number">1</span>, R);</div><div class="line">      Max[xo][o] = max(Max[xo][o*<span class="number">2</span>], Max[xo][o*<span class="number">2</span>+<span class="number">1</span>]);</div><div class="line">      Min[xo][o] = min(Min[xo][o*<span class="number">2</span>], Min[xo][o*<span class="number">2</span>+<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">modify2D</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(L == R) &#123; xo = o; xleaf = <span class="number">1</span>; modify1D(<span class="number">1</span>, <span class="number">1</span>, m); &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</div><div class="line">      <span class="keyword">if</span>(x &lt;= M) modify2D(o*<span class="number">2</span>, L, M);</div><div class="line">      <span class="keyword">else</span> modify2D(o*<span class="number">2</span>+<span class="number">1</span>, M+<span class="number">1</span>, R);</div><div class="line">      xo = o; xleaf = <span class="number">0</span>; modify1D(<span class="number">1</span>, <span class="number">1</span>, m);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 只构建xo为叶子（即x1=x2）的y树</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">build1D</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(L == R) Max[xo][o] = Min[xo][o] = A[row][L];</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</div><div class="line">      build1D(o*<span class="number">2</span>, L, M);</div><div class="line">      build1D(o*<span class="number">2</span>+<span class="number">1</span>, M+<span class="number">1</span>, R);</div><div class="line">      Max[xo][o] = max(Max[xo][o*<span class="number">2</span>], Max[xo][o*<span class="number">2</span>+<span class="number">1</span>]);</div><div class="line">      Min[xo][o] = min(Min[xo][o*<span class="number">2</span>], Min[xo][o*<span class="number">2</span>+<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">build2D</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(L == R) &#123; xo = o; row = L; build1D(<span class="number">1</span>, <span class="number">1</span>, m); &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</div><div class="line">      build2D(o*<span class="number">2</span>, L, M);</div><div class="line">      build2D(o*<span class="number">2</span>+<span class="number">1</span>, M+<span class="number">1</span>, R);</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m*<span class="number">4</span>; i++) &#123;</div><div class="line">        Max[o][i] = max(Max[o*<span class="number">2</span>][i], Max[o*<span class="number">2</span>+<span class="number">1</span>][i]);</div><div class="line">        Min[o][i] = min(Min[o*<span class="number">2</span>][i], Min[o*<span class="number">2</span>+<span class="number">1</span>][i]);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line">    vmax = -INF; vmin = INF;</div><div class="line">    query2D(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span>&#123;</div><div class="line">    modify2D(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">    build2D(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">IntervalTree2D t;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> n, m, Q, x1, y1, x2, y2, x, y, v;</div><div class="line">  <span class="keyword">char</span> op[<span class="number">10</span>];</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">  t.n = n; t.m = m;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i][j]);</div><div class="line">  t.build();</div><div class="line"></div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</div><div class="line">  <span class="keyword">while</span>(Q--) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, op);</div><div class="line">    <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'q'</span>) &#123;</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;t.x1, &amp;t.y1, &amp;t.x2, &amp;t.y2);</div><div class="line">      t.query();</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, t.vmax, t.vmin);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;t.x, &amp;t.y, &amp;t.v);</div><div class="line">      t.modify();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hash</title>
      <link href="/2018/02/27/hash/"/>
      <url>/2018/02/27/hash/</url>
      <content type="html"><![CDATA[<p>一维的hash，二维hash， 康拓展开<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="一般的hash函数的定义"><a href="#一般的hash函数的定义" class="headerlink" title="一般的hash函数的定义"></a>一般的hash函数的定义</h1><p>\(C = c_1c_2c_3\dotsc_m\), C代表的是一个长度为m的字符串。<br>hash函数的目的是用一个数字唯一的表示一个字符串。<br><img src="http://latex.codecogs.com/gif.latex?H(C)&space;=&space;c_1b^{m-1}&plus;c_2b^{m-2}&plus;\dots&plus;c_mb^0" title="H(C) = c_1b^{m-1}+c_2b^{m-2}+\dots+c_mb^0"></p><p>下面就要进行递推的计算长度为m的子串的hash值了。<br><img src="http://latex.codecogs.com/gif.latex?H(C)&space;=&space;c_1b^{m-1}&plus;c_2b^{m-2}&plus;\dots&plus;c_mb^0&space;\\&space;H(C_1)&space;=&space;c_2b^{m-1}&plus;c_3b^{m-2}&plus;\dots&plus;c_{m&plus;1}b^0={\color{DarkOrange}&space;H(C)*b-c_1b^m&plus;c_{m&plus;1}b^0}&space;\\&space;generalize-the-formula:\\&space;H(S[k&plus;1,\dots,&space;k&plus;m&plus;1])&space;=&space;{\color{Red}&space;H(S[k,&space;\dots,&space;k&plus;m]*b-S[k]b^m&plus;S[k&plus;m&plus;1])}" title="H(C) = c_1b^{m-1}+c_2b^{m-2}+\dots+c_mb^0 \\ H(C_1) = c_2b^{m-1}+c_3b^{m-2}+\dots+c_{m+1}b^0={\color{DarkOrange} H(C)*b-c_1b^m+c_{m+1}b^0} \\ generalize-the-formula:\\ H(S[k+1,\dots, k+m+1]) = {\color{Red} H(S[k, \dots, k+m]*b-S[k]b^m+S[k+m+1])}"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>运用了unsigned long long 自动溢出的特性，就不需要进行取模了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</div><div class="line"><span class="keyword">const</span> ull base = <span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> len_a = a.length();</div><div class="line">    <span class="keyword">int</span> len_b = b.length();</div><div class="line">    <span class="keyword">if</span>(len_a&gt;len_b) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    ull t = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len_a; i++)&#123;</div><div class="line">        t*=base;</div><div class="line">    &#125;</div><div class="line">    ull ha, hb;</div><div class="line">    ha = hb = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len_a; i++)&#123;</div><div class="line">        ha = ha*base+a[i];</div><div class="line">        hb = hb*base+b[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i+len_a&lt;=len_b; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(ha == hb) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(i+len_a&lt;len_b)&#123;</div><div class="line">            hb = hb*base+b[i+len_a]-t*b[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">string</span> a, b;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)&#123;</div><div class="line">        <span class="keyword">if</span>(solve(a, b))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="二维hash"><a href="#二维hash" class="headerlink" title="二维hash"></a>二维hash</h1><h1 id="康拓展开-amp-八数码问题"><a href="#康拓展开-amp-八数码问题" class="headerlink" title="康拓展开&amp;八数码问题"></a>康拓展开&amp;八数码问题</h1><p>首先需要知道康拓展开是什么？<br>康拓展开的本质也是hash.不同之处在它hash的初始变量是一个有排列顺序的组合。具体的原理见博文。<br><a href="http://blog.csdn.net/u010372095/article/details/9904497" target="_blank" rel="external">康拓展开</a><br><img src="http://latex.codecogs.com/gif.latex?hash\_value=a_n*(n-1)!&plus;a_{n-1}*(n-2)!&plus;\dots&plus;a_1*0!" title="hash\_value=a_n*(n-1)!+a_{n-1}*(n-2)!+\dots+a_1*0!"><br>其中\(a_n\)表示它比后面的的值大的个数。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1430" target="_blank" rel="external">hdu1430 魔板</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有三种变换，问怎么样从初态经过三种变换变成末态。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这个题目有个小技巧就是打表。<br>先把所有的初始状态装化为标准状态(1, 2, 3, 4, 5, 6, 7, 8).这就相当于原来这个人交张三，现在叫李四， 人还是这个人。下面用一个例子来说明。<br><img src="https://t1.picb.cc/uploads/2018/03/02/Ys9tR.jpg" alt=""></p><p>这样就缩小了搜索的范围，一共有8!种状态。<br>然后用康拓展开来进行hash搜索就行了，把每一种状态编码成一个唯一的数字，从而进行搜索。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> fact[<span class="number">8</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>, <span class="number">720</span>, <span class="number">5040</span>&#125;;</div><div class="line"><span class="keyword">char</span> op[maxn];</div><div class="line"><span class="keyword">char</span> ed[maxn];</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line"><span class="keyword">int</span> terminal[maxn];</div><div class="line"><span class="keyword">int</span> change[<span class="number">3</span>][<span class="number">8</span>] = &#123;&#123;<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</div><div class="line">                    &#123;<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>&#125;,</div><div class="line">                    &#123;<span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>&#125;&#125;;</div><div class="line"><span class="built_in">string</span> ans[<span class="number">40320</span>+<span class="number">10</span>];</div><div class="line"><span class="keyword">bool</span> vis[<span class="number">40320</span>+<span class="number">10</span>];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> num[maxn];</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_hash</span><span class="params">(<span class="keyword">int</span>* num)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> h_value = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)&#123;</div><div class="line">        cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;<span class="number">8</span>; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(num[j]&lt;num[i]) cnt++;</div><div class="line">        &#125;</div><div class="line">        h_value += cnt*fact[<span class="number">7</span>-i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> h_value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">    Node s;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">8</span>; i++)&#123;</div><div class="line">        s.num[i<span class="number">-1</span>] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> init_value = get_hash(s.num);</div><div class="line">    vis[init_value] = <span class="literal">true</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</div><div class="line">    q.push(s);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        Node temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</div><div class="line">            Node cur;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; j++)&#123;</div><div class="line">                cur.num[j] = temp.num[change[i][j]];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> pre_value = get_hash(temp.num);</div><div class="line">            <span class="keyword">int</span> h_value = get_hash(cur.num);</div><div class="line">            <span class="keyword">if</span>(!vis[h_value])&#123;</div><div class="line">                q.push(cur);</div><div class="line">                vis[h_value] = <span class="literal">true</span>;</div><div class="line">                ans[h_value] = ans[pre_value]+<span class="keyword">char</span>(<span class="string">'A'</span>+i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">   </div><div class="line">    bfs();</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, op, ed))&#123;</div><div class="line">        mp.clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)&#123;</div><div class="line">            mp.insert(make_pair(op[i]-<span class="string">'0'</span>, i+<span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)&#123;</div><div class="line">            terminal[i] = mp[ed[i]-<span class="string">'0'</span>];</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        for(int i=0; i&lt;8; i++)&#123;</span></div><div class="line"><span class="comment">//            printf("%d ", terminal[i]);</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        <span class="keyword">int</span> h_value = get_hash(terminal);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans[h_value]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>素数表</title>
      <link href="/2018/02/26/%E7%B4%A0%E6%95%B0%E8%A1%A8/"/>
      <url>/2018/02/26/%E7%B4%A0%E6%95%B0%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>我对素数一无所知<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本来今天打比赛的时候，一心想要打出1e9范围内的素数表，直到后来用python打了出来。。。</p><blockquote><p>pip install primesieve</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> primesieve <span class="keyword">import</span> *</div><div class="line">ans = primes(<span class="number">1e9</span>)</div><div class="line"><span class="keyword">with</span> open(<span class="string">'data.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> ans:</div><div class="line">        f.write(str(number)+<span class="string">','</span>)</div></pre></td></tr></table></figure><p>1e9范围内有50847534个素数，符合\(\frac{n}{ln(n)}\)的规律。<br>打出来的素数表的txt文本大小有478Mb之大。我真是一个智障，还痴心想要把打的表粘上去。<br>明天给自己的数论加一点技能点。。。<br>一般的素数表打在1e5的范围之内，因为可以采用平方枚举的方法，超过1e5的质数(任意的数都可以拆成若干个质数的乘积)就要暴力的进行计算了。<br>学习如何减小筛选素数的范围，比如今天做的那个二分求等比数列的和的小技巧，其实还不是很懂。<br>1e9范围内的素数的最大的间隔为282<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> primesieve <span class="keyword">import</span> *</div><div class="line">ans = primes(<span class="number">1e9</span>)</div><div class="line">tot = count_primes(<span class="number">1</span>, <span class="number">1e9</span>)</div><div class="line">print(tot)</div><div class="line">interval = <span class="number">-1</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, tot):</div><div class="line">    interval = max(interval, ans[i]-ans[i<span class="number">-1</span>])</div><div class="line">print(interval)</div></pre></td></tr></table></figure></p><p>所以昨天的B题倒着枚举就行了。。。菜醒</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 素数表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>等比数列的二分求和</title>
      <link href="/2018/02/25/%E7%AD%89%E6%AF%94%E6%95%B0%E5%88%97%E7%9A%84%E4%BA%8C%E5%88%86%E6%B1%82%E5%92%8C/"/>
      <url>/2018/02/25/%E7%AD%89%E6%AF%94%E6%95%B0%E5%88%97%E7%9A%84%E4%BA%8C%E5%88%86%E6%B1%82%E5%92%8C/</url>
      <content type="html"><![CDATA[<p>qsc视频中一道水题引发的一系列的知识<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="等比二分求和"><a href="#等比二分求和" class="headerlink" title="等比二分求和"></a>等比二分求和</h1><p>一个很不错讲解原理的博客，我就直接搬运了<br><a href="http://blog.csdn.net/acdreamers/article/details/7851144" target="_blank" rel="external">二分求解等比数列的和</a></p><h2 id="二分求解等比数列的和"><a href="#二分求解等比数列的和" class="headerlink" title="二分求解等比数列的和"></a>二分求解等比数列的和</h2><p>注意这个等比式的第一项为a, 不是1.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll n)</span></span>&#123;</div><div class="line">    ll ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(n)&#123;</div><div class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</div><div class="line">            ans = ans*a%mod;</div><div class="line">        &#125;</div><div class="line">        a = a*a;</div><div class="line">        n&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll a, ll n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> a;</div><div class="line">    ll half_sum = sum(a, n/<span class="number">2</span>);</div><div class="line">    ll ans;</div><div class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</div><div class="line">        ll a1 = <span class="built_in">pow</span>(a, n/<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">        ans = (half_sum+half_sum*a1%mod)%mod;</div><div class="line">        ans = (ans+a1)%mod;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        ll a1 = <span class="built_in">pow</span>(a, n/<span class="number">2</span>);</div><div class="line">        ans = (half_sum+half_sum*a1%mod)%mod;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line">ll a, n;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>, &amp;a, &amp;n))&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, sum(a, n));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="二分求解等比矩阵的和"><a href="#二分求解等比矩阵的和" class="headerlink" title="二分求解等比矩阵的和"></a>二分求解等比矩阵的和</h2><p><a href="http://poj.org/problem?id=3233" target="_blank" rel="external">poj3233 Matrix Power Series</a><br>本题也可以采用构造的方式进行求解，但是我已经忘了怎么构造递推的矩阵了，我好菜啊。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">35</span>;</div><div class="line"><span class="keyword">int</span> n, k, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span>&#123;</span></div><div class="line">    ll mat[maxn][maxn];<span class="comment">//以后一定用ll,不适时的进行取模就会导致错误。</span></div><div class="line">    Mat()&#123;</div><div class="line">        <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="keyword">sizeof</span>(mat));</div><div class="line">   &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function">Mat <span class="title">mul</span><span class="params">(Mat a, Mat b, <span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span></span>&#123;</div><div class="line">    Mat ans;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                ans.mat[i][j]+=(a.mat[i][k]*b.mat[k][j])%mod;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Mat <span class="title">pow</span><span class="params">(Mat a, <span class="keyword">int</span> b, <span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span></span>&#123;</div><div class="line">    Mat ans;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) ans.mat[i][i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)&#123;</div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</div><div class="line">            ans = mul(ans, a, n, mod);</div><div class="line">        &#125;</div><div class="line">        a = mul(a, a, n, mod);</div><div class="line">        b &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Mat <span class="title">add</span><span class="params">(Mat a, Mat b, <span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span></span>&#123;</div><div class="line">    Mat ans;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">            ans.mat[i][j] = (a.mat[i][j]+b.mat[i][j])%mod;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Mat <span class="title">sum</span><span class="params">(Mat a, <span class="keyword">int</span> k, <span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>) <span class="keyword">return</span> a;</div><div class="line">    Mat half_sum = sum(a, k/<span class="number">2</span>, n, mod);</div><div class="line">    Mat ans;</div><div class="line">    <span class="keyword">if</span>(k&amp;<span class="number">1</span>)&#123;</div><div class="line">        Mat a1 = <span class="built_in">pow</span>(a, k/<span class="number">2</span>+<span class="number">1</span>, n, mod);</div><div class="line">        ans = add(half_sum, mul(half_sum, a1, n, mod), n, mod);</div><div class="line">        ans = add(ans, a1, n, mod);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        Mat a1 = <span class="built_in">pow</span>(a, k/<span class="number">2</span>, n, mod);</div><div class="line">        ans = add(half_sum, mul(half_sum, a1, n, mod), n, mod);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n, &amp;k, &amp;m))&#123;</div><div class="line">        Mat ma;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ma.mat[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Mat ans = sum(ma, k, n, m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n<span class="number">-1</span>; j++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans.mat[i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.mat[i][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>前面的都是为这做铺垫<br><a href="http://poj.org/problem?id=1845" target="_blank" rel="external">poj1845 Subdiv</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ol><li>先用唯一分解定理分解该数<br><img src="http://latex.codecogs.com/gif.latex?number&space;=&space;p_1^{k_1}*p_2^{k_2}*\dots*p_n^{k_n},&space;(p_1,&space;p_2,&space;\dots,&space;p_n\in&space;primes)" title="number = p_1^{k_1}*p_2^{k_2}*\dots*p_n^{k_n}, (p_1, p_2, \dots, p_n\in primes)"></li><li>约数和定理<br><img src="http://latex.codecogs.com/gif.latex?sum\quad&space;factors&space;=&space;(1&plus;p_1&plus;p_1^2&plus;\dots&plus;p_1^{k_1})*(1&plus;p_2&plus;p_2^2&plus;\dots&plus;p_2^{k_2})*\dots*(1&plus;p_n&plus;p_n^2&plus;\dots&plus;p_n^{k_n})&space;\\&space;\\&space;=&space;\frac{1-p_1^{k_1&plus;1}}{1-p_1}&space;&plus;&space;\frac{1-p_2^{k_2&plus;1}}{1-p_2}&plus;\dots&space;&plus;&space;\frac{1-p_n^{k_n&plus;1}}{1-p_n}" title="sum\quad factors = (1+p_1+p_1^2+\dots+p_1^{k_1})*(1+p_2+p_2^2+\dots+p_2^{k_2})*\dots*(1+p_n+p_n^2+\dots+p_n^{k_n}) \\ \\ = \frac{1-p_1^{k_1+1}}{1-p_1} + \frac{1-p_2^{k_2+1}}{1-p_2}+\dots + \frac{1-p_n^{k_n+1}}{1-p_n}"><br>第一个式子可以用二分求和来继续的求解，第二个化简的分式的形式可以用逆元来求解。</li><li>然后使用二分求等比数列的和(或者使用逆元来求解)</li></ol><p>当然这一道题还可以用逆元来做，具体等以后的实现。<br><a href="http://blog.csdn.net/acdreamers/article/details/8220787" target="_blank" rel="external">逆元的实现</a></p><p>若枚举5e7之间的所有的素数，那么结果就是T.<br>我觉的其中的缩小数字的搜索范围那一块处理的很奇妙，可以积累一下这个技巧。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; p[i]*p[i]&lt;a&amp;&amp;i&lt;cnt; i++)&#123;</div><div class="line">        <span class="keyword">int</span> tot=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(a%p[i] == <span class="number">0</span>)&#123;</div><div class="line">            tot++;</div><div class="line">            a /= p[i];</div><div class="line">        &#125;</div><div class="line">        ans *= (sum(p[i], tot*b)%mod);</div><div class="line">        ans %= mod;<span class="comment">//注意及时的模数</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(a &gt; <span class="number">1</span>)&#123;</div><div class="line">        ans *= (sum(a, b)%mod);</div><div class="line">        ans %= mod;<span class="comment">//注意及时的模数</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">9901</span>;</div><div class="line"><span class="keyword">int</span> A, B;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">bool</span> prime[maxn];</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(prime[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+i; j&lt;maxn; j+=i)&#123;</div><div class="line">                prime[j] = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    ll ans = <span class="number">1</span>;</div><div class="line">    a = a%mod;</div><div class="line">    <span class="keyword">while</span>(n)&#123;</div><div class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</div><div class="line">            ans = ans*a%mod;</div><div class="line">        &#125;</div><div class="line">        a = a*a%mod;</div><div class="line">        n&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    ll half_sum = sum(a, (n<span class="number">-1</span>)/<span class="number">2</span>);</div><div class="line">    ll ans;</div><div class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</div><div class="line">        ll a1 = pow_mod(a, (n+<span class="number">1</span>)/<span class="number">2</span>);</div><div class="line">        ans = (half_sum+half_sum%mod*a1%mod)%mod;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        ll a1 = pow_mod(a, (n+<span class="number">1</span>)/<span class="number">2</span>);</div><div class="line">        ans = (half_sum+half_sum%mod*a1%mod)%mod;</div><div class="line">        ans = (ans + pow_mod(a, n))%mod;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    ll ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> temp = a;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; p[i]*p[i]&lt;a&amp;&amp;i&lt;cnt; i++)&#123;</div><div class="line">        <span class="keyword">int</span> tot=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(a%p[i] == <span class="number">0</span>)&#123;</div><div class="line">            tot++;</div><div class="line">            a /= p[i];</div><div class="line">        &#125;</div><div class="line">        ans *= (sum(p[i], tot*b)%mod);</div><div class="line">        ans %= mod;<span class="comment">//注意及时的模数</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(a &gt; <span class="number">1</span>)&#123;</div><div class="line">        ans *= (sum(a, b)%mod);</div><div class="line">        ans %= mod;<span class="comment">//注意及时的模数</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) prime[i] = <span class="literal">true</span>;</div><div class="line">    cnt = <span class="number">0</span>;</div><div class="line">    get_prime();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;A, &amp;B))&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve(A, B));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="逆元AC代码"><a href="#逆元AC代码" class="headerlink" title="逆元AC代码"></a>逆元AC代码</h2><blockquote><p>ll solve(ll a, ll b)</p></blockquote><p>这个一开始没有使用ll类型害死人。<br><img src="http://latex.codecogs.com/gif.latex?\frac{p_i^{k_i*B&plus;1}-1}{p_i-1}\%p=\frac{(p_i^{k_i*B&plus;1}-1)\%(p*(p_i-1))}{p_i-1}=\frac{p_i^{k_i*B&plus;1}\%(p*(p_i-1))&plus;{\color{Red}&space;(-1\%p*(p_i-1))}}{p_i-1}=\frac{p_i^{k_i*B&plus;1}\%p*(p_i-1))&plus;{\color{Red}p*(p_i-1)-1}}{p_i-1}" title="\frac{p_i^{k_i*B+1}-1}{p_i-1}\%p=\frac{(p_i^{k_i*B+1}-1)\%(p*(p_i-1))}{p_i-1}=\frac{p_i^{k_i*B+1}\%(p*(p_i-1))+{\color{Red} (-1\%p*(p_i-1))}}{p_i-1}=\frac{p_i^{k_i*B+1}\%p*(p_i-1))+{\color{Red}p*(p_i-1)-1}}{p_i-1}"></p><p>其中快速幂的时候使用了二分乘积。<br>因为mod·b的范围超过了int,a的范围在[0, mod·b]之间， 乘积的话会溢出long long ,而加法不会，所以要用乘积的快速幂。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">9901</span>;<span class="comment">//9901 is a prime number.</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line">ll a, b;</div><div class="line"><span class="keyword">bool</span> primes[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">is_prime</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(primes[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*i; j&lt;=maxn; j+=i)&#123;</div><div class="line">                primes[j] = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a, ll b, ll mod)</span></span>&#123;</div><div class="line">    ll ans = <span class="number">0</span>;</div><div class="line">    <span class="comment">//a%=mod;</span></div><div class="line">    <span class="keyword">while</span>(b)&#123;</div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</div><div class="line">            ans = (ans+a)%mod;</div><div class="line">        &#125;</div><div class="line">        b&gt;&gt;=<span class="number">1</span>;</div><div class="line">        a = (a+a)%mod;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll n, ll p)</span></span>&#123;</div><div class="line">    ll ans = <span class="number">1</span>;</div><div class="line">    <span class="comment">//a = a%p;</span></div><div class="line">    <span class="keyword">while</span>(n)&#123;</div><div class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</div><div class="line">            ans = mul(ans, a, p);</div><div class="line">        &#125;</div><div class="line">        a = mul(a, a, p);</div><div class="line">        n&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll a, ll b)</span></span>&#123;</div><div class="line">    ll ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; p[i]*p[i]&lt;=a&amp;&amp;i&lt;cnt; i++)&#123;</div><div class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(a%p[i] == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">while</span>(a%p[i] == <span class="number">0</span>)&#123;</div><div class="line">                num++;</div><div class="line">                a/=p[i];</div><div class="line">            &#125;</div><div class="line">            ll p_mod = (p[i]<span class="number">-1</span>)*mod;</div><div class="line">            ans *= ll(pow_mod(p[i], num*b+<span class="number">1</span>, p_mod)+(p_mod<span class="number">-1</span>))/(p[i]<span class="number">-1</span>);</div><div class="line">            ans %= mod;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(a&gt;<span class="number">1</span>)&#123;</div><div class="line">        ll p_mod = (a<span class="number">-1</span>)*mod;</div><div class="line">        ans *= ll(pow_mod(a, b+<span class="number">1</span>, p_mod)+(p_mod<span class="number">-1</span>))/(a<span class="number">-1</span>);</div><div class="line">        ans %= mod;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) primes[i] = <span class="literal">true</span>;</div><div class="line">    is_prime();</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;a, &amp;b))&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve(a, b));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1><ul><li>等比矩阵的和的构造方法</li><li>逆元来实现poj1845.(solved)</li></ul>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>莫队算法</title>
      <link href="/2018/02/19/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"/>
      <url>/2018/02/19/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>莫队算法只能离线的进行查询，不能在线的进行修改。通过改变查询的顺序，从而降低算法的时间复杂度。<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://codeforces.com/contest/617/problem/E" target="_blank" rel="external">XOR and Favorite Number</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><ul><li>给定n个数，然后给出m个询问，每一个询问为[L, R]区间内的询问。问区间内有多少对数，使得它们连续的亦或为k.</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ol><li>我们可以预处理亦或的前缀和pre[]，那么当求[l, r]区间内的亦或和时，直接用pre[l-1]^pre[r]来求一个区间的亦或和。</li><li>用莫队的思想，对查询进行排序，从而降低算法的时间复杂度。\(O(n\sqrt{n})\)</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line">LL a[maxn];<span class="comment">//记录亦或的前缀和</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l ,r, id;</div><div class="line">&#125;Q[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> pos[maxn];<span class="comment">//分块的编号</span></div><div class="line">LL ans[maxn];</div><div class="line">LL flag[maxn];<span class="comment">//每一个前缀出现的次数</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a, Node b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(pos[a.l] == pos[b.l])&#123;</div><div class="line">        <span class="keyword">return</span> a.r&lt;b.r;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pos[a.l] &lt; pos[b.l];</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="keyword">int</span> L = <span class="number">1</span>, R = <span class="number">0</span>;</div><div class="line">LL Ans = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">    flag[a[index]]--;<span class="comment">//a[index]可能等于a[index]^k</span></div><div class="line">    Ans -= flag[a[index]^k];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">    Ans += flag[a[index]^k];</div><div class="line">    flag[a[index]]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k))&#123;</div><div class="line">        L = <span class="number">1</span>, R = <span class="number">0</span>, Ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</div><div class="line">        a[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> sz = <span class="built_in">sqrt</span>(n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">            a[i] ^= a[i<span class="number">-1</span>];</div><div class="line">            pos[i] = i/sz;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;Q[i].l, &amp;Q[i].r);</div><div class="line">            Q[i].id = i;</div><div class="line">        &#125;</div><div class="line">        sort(Q+<span class="number">1</span>, Q+m+<span class="number">1</span>, cmp);</div><div class="line">        flag[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</div><div class="line">            <span class="keyword">while</span>(Q[i].l&gt;L)&#123;</div><div class="line">                del(L<span class="number">-1</span>);</div><div class="line">                L++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(Q[i].l&lt;L)&#123;</div><div class="line">                L--;</div><div class="line">                add(L<span class="number">-1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(Q[i].r&gt;R)&#123;</div><div class="line">                R++;</div><div class="line">                add(R);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(Q[i].r&lt;R)&#123;</div><div class="line">                del(R);</div><div class="line">                R--;</div><div class="line">            &#125;</div><div class="line">            ans[Q[i].id] = Ans;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莫队算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017~2018流水账</title>
      <link href="/2018/02/13/2017-2018%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
      <url>/2018/02/13/2017-2018%E6%B5%81%E6%B0%B4%E8%B4%A6/</url>
      <content type="html"><![CDATA[<p>与2018年2月13日19:14:59上的火车的记录</p><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><p>很平凡的上完了大一的课程，一直认真的学习自己感兴趣的科目，而对一些无关紧要的水课或者是不感兴趣的事情毫无感觉， 奉行60分万岁的态度。</p><p>就是一种这样的世界观，我的学科均分依旧还是相对比较的高，甚至拿到了国家奖学金（逃，</p><p>虽然说这8k的钱数很是令人诱惑？但是我还是觉得，如果能真真的接触到我感兴趣的知识，并且能从事其一生，那么将何乐而不为呢？<br>8月初，我就早早来到了西安。一个月高强度的代码量，使得我有信心去进一步深入的学习计算机编程的相关知识。我觉得acm是一个巩固自己编码能力的过程。<br>在闲暇的时刻，我会自主的去学习之前从未接触过的算法。在自己心烦意乱，难以静心学习的时候，哪怕是敲一敲键盘，就能够让我静下心来。</p><p>这个博客是我10初的时候开始维护的，它更多的记录了我一个学习的过程。虽然访问的人数寥寥无几，但是我依旧享受这种将学习东西写下来的过程。为了全心全意的去维护这个博客，我基本上不怎么更新了自己的QQ空间，更多的是在凌晨夜深人静的时候，去整理自己这一天算法所学。</p><p>令我映象最深的应该是胡建伟的网络对抗原理吧。虽然老师每节课都会留下相当一部分有难度的作业，但是认真完成的人寥寥无几。很多人都有一颗认真学习，追求上进的心，但是在执行的过程中却总是缺席。这门课程让我接触到很多新的东西，比如网页编程语言html.我想好好的学习，然后做一个表白的网站。</p><p>进一步的巩固了Python的相关的知识，希望能用Python进行科学计算和网络爬虫。<br>这学期也学了概率论和数理统计，感觉自己可以开新坑了。</p><p>重拾了溜冰，每周六晚上都会很惬意飞翔的享受这一段惬意的时光。</p><p>想想自己暑假就早早的到学校了，寒假又因为数模比赛而迟迟回家。非常的想念自己的父母很很久没有联络的朋友。<br>也许在追寻的途中必定会得到自己想要的东西，也会逐渐的淡化一些东西吧。</p><p>今天在火车站的时候，阳光很温暖。一个人坐在行李箱上，观察身边的每个人的情感的变化，不带有意思的杂念和思考，甚是惬意。很享受这种放空自我的感觉，也许平时把自己的那根弦崩的太紧了。</p><p>未来还是想先好好的学习传统的算法。机器学习这方面虽然很诱人，但是我更想有一个扎实的基础，而不是一个调包侠。<br>明天就能到家呢，开心</p><p>2018年3月15日23:55:27更新<br>本来不想把这篇博文发布到自己的个人博客上，不过想想之前已经写了这么多的博客，大概不会有什么人看吧。2333333<br>就算有人看，那也是真爱吧，遂于此时将原来备份的博客迁移到了发布的文件夹中。</p>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数模算法的整理</title>
      <link href="/2018/02/06/%E6%95%B0%E6%A8%A1%E7%AE%97%E6%B3%95%E7%9A%84%E6%95%B4%E7%90%86/"/>
      <url>/2018/02/06/%E6%95%B0%E6%A8%A1%E7%AE%97%E6%B3%95%E7%9A%84%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>比赛前的整理<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="无约束优化问题"><a href="#无约束优化问题" class="headerlink" title="无约束优化问题"></a>无约束优化问题</h1><h2 id="编写目标函数"><a href="#编写目标函数" class="headerlink" title="编写目标函数"></a>编写目标函数</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">rosenbrock</span><span class="params">(x)</span></span></div><div class="line">y=<span class="number">100</span>*(x(<span class="number">2</span>)-x(<span class="number">1</span>).^<span class="number">2</span>).^<span class="number">2</span>+(<span class="number">1</span>-x(<span class="number">1</span>)).^<span class="number">2</span>;</div></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">clear all</div><div class="line"><span class="comment">%无约束优化的经典算法与非经典算法比较</span></div><div class="line"><span class="comment">%使用rosenbrock函数,理论极值为0</span></div><div class="line"><span class="keyword">if</span> exist(<span class="string">'rosenbrock.m'</span>)==<span class="number">0</span>                                       </div><div class="line">   <span class="built_in">disp</span>(<span class="string">'没有为方程创建名为rosenbrock.m的函数文件,请建立它'</span>);</div><div class="line"><span class="keyword">end</span> </div><div class="line"></div><div class="line"><span class="comment">%画图</span></div><div class="line">[x,y]=<span class="built_in">meshgrid</span>(<span class="number">-1</span>:<span class="number">0.05</span>:<span class="number">1</span>,<span class="number">-1</span>:<span class="number">0.05</span>:<span class="number">1</span>);</div><div class="line">z=<span class="number">100</span>*(y-x.^<span class="number">2</span>).^<span class="number">2</span>+(<span class="number">1</span>-x).^<span class="number">2</span>;</div><div class="line">surf(x,y,z)</div><div class="line"></div><div class="line"><span class="comment">%经典算法:</span></div><div class="line">[x1,fval1,exitflag1,output1]=fminunc(<span class="string">'rosenbrock'</span>,[<span class="number">0</span>,<span class="number">0</span>]);<span class="comment">%初始点为(0,0)</span></div><div class="line"><span class="comment">%x为解</span></div><div class="line"><span class="comment">%fval为目标函数x处的值</span></div><div class="line"><span class="comment">%exitflag&gt;0表示函数已收敛到x处</span></div><div class="line"><span class="comment">%output中:Iterations表示迭代次数</span></div><div class="line"><span class="comment">%         Algorithm表示采用算法</span></div><div class="line"><span class="comment">%         FuncCount表示函数评价次数</span></div><div class="line"></div><div class="line"><span class="comment">%遗传算法</span></div><div class="line"><span class="comment">%调整最大允许的代数1万代,种群规模为200</span></div><div class="line">options=gaoptimset(<span class="string">'Generations'</span>,<span class="number">10000</span>,<span class="string">'PopulationSize'</span>,<span class="number">200</span>);</div><div class="line"><span class="comment">%设置两个变量,限制0&lt;=x1,x2&lt;=2</span></div><div class="line">[x2,fval2,exitflag2,output2]=ga(@rosenbrock,<span class="number">2</span>,[<span class="number">1</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">1</span>;<span class="number">-1</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">-1</span>],[<span class="number">2</span>;<span class="number">2</span>;<span class="number">0</span>;<span class="number">0</span>],[],[],[],[],[],options);</div><div class="line"><span class="comment">%exiflag&gt;0表示求解成功</span></div></pre></td></tr></table></figure><h1 id="定积分的计算"><a href="#定积分的计算" class="headerlink" title="定积分的计算"></a>定积分的计算</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%一重积分</span></div><div class="line"><span class="comment">%求利用符号函数求理论值</span></div><div class="line">syms x;</div><div class="line">y=<span class="built_in">exp</span>(-x^<span class="number">2</span>);                  <span class="comment">%被积函数</span></div><div class="line">s=int(y,x,<span class="number">0</span>,<span class="number">1</span>);               <span class="comment">%调用int函数</span></div><div class="line">v=vpa(s);                     <span class="comment">%将符号表达式转化为数值</span></div><div class="line"><span class="comment">%利用quad函数进行数值积分</span></div><div class="line">f1=inline(<span class="string">'exp(-x.^2)'</span>,<span class="string">'x'</span>);   <span class="comment">%被积函数</span></div><div class="line">y1=quad(f1,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">%二重积分</span></div><div class="line">f2=inline(<span class="string">'exp((-x.^2)/2).*sin(x.^2+y)'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>);</div><div class="line">y2=dblquad(f2,<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">%三重积分</span></div><div class="line">f3=inline(<span class="string">'4*x.*z.*exp(-(x.^2).*y-z.^2)'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>);</div><div class="line">y3=triplequad(f3,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="built_in">pi</span>,<span class="number">0</span>,<span class="built_in">pi</span>);</div></pre></td></tr></table></figure><h1 id="方程的求解"><a href="#方程的求解" class="headerlink" title="方程的求解"></a>方程的求解</h1><h2 id="等式方程的求解，约束方程的不等式最值问题"><a href="#等式方程的求解，约束方程的不等式最值问题" class="headerlink" title="等式方程的求解，约束方程的不等式最值问题"></a>等式方程的求解，约束方程的不等式最值问题</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">f = inline(<span class="string">'x.^2-1'</span>);</div><div class="line"><span class="comment">%求解靠近0的解，然而只返回一个值，还是有很大的局限性。</span></div><div class="line">answer = fzero(f, <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment">% 接一个方程组，具体的使用方式可以看官方的文档</span></div><div class="line">fsolve(<span class="function"><span class="keyword">function</span>, <span class="title">start</span> <span class="title">point</span> <span class="title">vector</span>);</span></div><div class="line"></div><div class="line"><span class="comment">%解决多解的方式</span></div><div class="line">solve(<span class="string">'x^2-1=0'</span>, <span class="string">'x'</span>);</div><div class="line">syms a b r x y </div><div class="line">solve(<span class="string">'(x-a)^2+(y-b)^2=r^2'</span>,<span class="string">'x'</span>) </div><div class="line">solve(<span class="string">'(x-a)^2+(y-b)^2=r^2'</span>,<span class="string">'y'</span>)</div></pre></td></tr></table></figure><p>相关的命令：</p><ol><li>非线性方程组的求解: fzero, fsolve</li><li>求函数极值(无约束条件): fmin, fmins, fminu</li><li>求解线性规划问题: lp</li><li>求解非线性规划问题: constr</li></ol><h1 id="matlab中神经网络工具箱的使用的实例–运动运成绩的预测"><a href="#matlab中神经网络工具箱的使用的实例–运动运成绩的预测" class="headerlink" title="matlab中神经网络工具箱的使用的实例–运动运成绩的预测"></a>matlab中神经网络工具箱的使用的实例–运动运成绩的预测</h1><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://www.cnblogs.com/sallybin/p/3169572.html" target="_blank" rel="external">BP神经网络的预测</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% 样本集</span></div><div class="line">P=[<span class="number">3.2</span> <span class="number">3.2</span> <span class="number">3</span> <span class="number">3.2</span> <span class="number">3.2</span> <span class="number">3.4</span> <span class="number">3.2</span> <span class="number">3</span> <span class="number">3.2</span> <span class="number">3.2</span> <span class="number">3.2</span> <span class="number">3.9</span> <span class="number">3.1</span> <span class="number">3.2</span>;</div><div class="line"><span class="number">9.6</span> <span class="number">10.3</span> <span class="number">9</span> <span class="number">10.3</span> <span class="number">10.1</span> <span class="number">10</span> <span class="number">9.6</span> <span class="number">9</span> <span class="number">9.6</span> <span class="number">9.2</span> <span class="number">9.5</span> <span class="number">9</span> <span class="number">9.5</span> <span class="number">9.7</span>;</div><div class="line"><span class="number">3.45</span> <span class="number">3.75</span> <span class="number">3.5</span> <span class="number">3.65</span> <span class="number">3.5</span> <span class="number">3.4</span> <span class="number">3.55</span> <span class="number">3.5</span> <span class="number">3.55</span> <span class="number">3.5</span> <span class="number">3.4</span> <span class="number">3.1</span> <span class="number">3.6</span> <span class="number">3.45</span>;</div><div class="line"><span class="number">2.15</span> <span class="number">2.2</span> <span class="number">2.2</span> <span class="number">2.2</span> <span class="number">2</span> <span class="number">2.15</span> <span class="number">2.14</span> <span class="number">2.1</span> <span class="number">2.1</span> <span class="number">2.1</span> <span class="number">2.15</span> <span class="number">2</span> <span class="number">2.1</span> <span class="number">2.15</span>;</div><div class="line"><span class="number">140</span> <span class="number">120</span> <span class="number">140</span> <span class="number">150</span> <span class="number">80</span> <span class="number">130</span> <span class="number">130</span> <span class="number">100</span> <span class="number">130</span> <span class="number">140</span> <span class="number">115</span> <span class="number">80</span> <span class="number">90</span> <span class="number">130</span>;</div><div class="line"><span class="number">2.8</span> <span class="number">3.4</span> <span class="number">3.5</span> <span class="number">2.8</span> <span class="number">1.5</span> <span class="number">3.2</span> <span class="number">3.5</span> <span class="number">1.8</span> <span class="number">3.5</span> <span class="number">2.5</span> <span class="number">2.8</span> <span class="number">2.2</span> <span class="number">2.7</span> <span class="number">4.6</span>;</div><div class="line"><span class="number">11</span> <span class="number">10.9</span> <span class="number">11.4</span> <span class="number">10.8</span> <span class="number">11.3</span> <span class="number">11.5</span> <span class="number">11.8</span> <span class="number">11.3</span> <span class="number">11.8</span> <span class="number">11</span> <span class="number">11.9</span> <span class="number">13</span> <span class="number">11.1</span> <span class="number">10.85</span>;</div><div class="line"><span class="number">50</span> <span class="number">70</span> <span class="number">50</span> <span class="number">80</span> <span class="number">50</span> <span class="number">60</span> <span class="number">65</span> <span class="number">40</span> <span class="number">65</span> <span class="number">50</span> <span class="number">50</span> <span class="number">50</span> <span class="number">70</span> <span class="number">70</span>];</div><div class="line"><span class="comment">% 训练的目标数据</span></div><div class="line">T=[<span class="number">2.24</span> <span class="number">2.33</span> <span class="number">2.24</span> <span class="number">2.32</span> <span class="number">2.2</span> <span class="number">2.27</span> <span class="number">2.2</span> <span class="number">2.26</span> <span class="number">2.2</span> <span class="number">2.24</span> <span class="number">2.24</span> <span class="number">2.2</span> <span class="number">2.2</span> <span class="number">2.35</span>];</div><div class="line"><span class="comment">% 归一化</span></div><div class="line">[p1,minp,maxp,t1,mint,maxt]=premnmx(P,T);</div><div class="line">net=newff(minmax(P),[<span class="number">8</span>,<span class="number">6</span>,<span class="number">1</span>],&#123;<span class="string">'tansig'</span>,<span class="string">'tansig'</span>,<span class="string">'purelin'</span>&#125;,<span class="string">'trainlm'</span>);</div><div class="line">net.trainParam.epochs = <span class="number">5000</span>;</div><div class="line">net.trainParam.goal=<span class="number">0.0000001</span>;</div><div class="line">[net,tr]=train(net,p1,t1);</div><div class="line">a=[<span class="number">3.0</span>;<span class="number">9.3</span>;<span class="number">3.3</span>;<span class="number">2.05</span>;<span class="number">100</span>;<span class="number">2.8</span>;<span class="number">11.2</span>;<span class="number">50</span>];</div><div class="line">a=premnmx(a);</div><div class="line">b=sim(net,a);</div><div class="line">c=postmnmx(b,mint,maxt);</div><div class="line">c</div></pre></td></tr></table></figure><h1 id="python中识别手写字体的设计"><a href="#python中识别手写字体的设计" class="headerlink" title="python中识别手写字体的设计"></a>python中识别手写字体的设计</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="string">""" 本代码来源于YouTube中的教程 """</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</div><div class="line"></div><div class="line">digits = datasets.load_digits()</div><div class="line">clf = svm.SVC(gamma = <span class="number">0.0001</span>, C = <span class="number">100</span>)</div><div class="line">print(len(digits.data))</div><div class="line">x, y = digits.data[:<span class="number">-10</span>], digits.target[:<span class="number">-10</span>]</div><div class="line">clf.fit(x, y)</div><div class="line"></div><div class="line">print(<span class="string">"prediction:"</span>, clf.predict(digits.data[<span class="number">-1</span>]))</div><div class="line">plt.imshow(digits.images[<span class="number">-1</span>], cmap = plt.cm.gray_r, interpolation = <span class="string">"nearest"</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><h1 id="GM-1-1-模型来预测单值"><a href="#GM-1-1-模型来预测单值" class="headerlink" title="GM(1, 1)模型来预测单值"></a>GM(1, 1)模型来预测单值</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">clear</div><div class="line"><span class="comment">%注意其中的数据是以列来保存的。</span></div><div class="line">han1=[<span class="number">1</span></div><div class="line">    <span class="number">2</span></div><div class="line">    <span class="number">3</span></div><div class="line">    <span class="number">4</span></div><div class="line">    <span class="number">5</span></div><div class="line">    <span class="number">6</span></div><div class="line">    <span class="number">7</span></div><div class="line">    <span class="number">8</span></div><div class="line">    <span class="number">9</span></div><div class="line">    <span class="number">10</span>];    <span class="comment">%数据，建议十行以上的数据</span></div><div class="line">han1(<span class="keyword">end</span>,:)=[];</div><div class="line">m=<span class="built_in">size</span>(han1,<span class="number">2</span>);</div><div class="line">x0=mean(han1,<span class="number">2</span>);    <span class="comment">%平均每行的数据</span></div><div class="line">x1=cumsum(x0);       <span class="comment">%累加x0</span></div><div class="line">alpha=<span class="number">0.5</span>;</div><div class="line">n=<span class="built_in">length</span>(x0);    <span class="comment">%x0中元素个数</span></div><div class="line">z1=alpha*x1(<span class="number">2</span>:n)+(<span class="number">1</span>-alpha)*x1(<span class="number">1</span>:n<span class="number">-1</span>)<span class="comment">%x1的邻值生成数列</span></div><div class="line">Y=x0(<span class="number">2</span>:n);</div><div class="line">B=[-z1,ones(n<span class="number">-1</span>,<span class="number">1</span>)];</div><div class="line">ab=B\Y      <span class="comment">%a,b的值</span></div><div class="line">c=ab(<span class="number">2</span>)/ab(<span class="number">1</span>)   </div><div class="line">xhat=(x0(<span class="number">1</span>)-c)*(<span class="built_in">exp</span>(-ab(<span class="number">1</span>)*n)-<span class="built_in">exp</span>(-ab(<span class="number">1</span>)*(n<span class="number">-1</span>)))<span class="comment">%预测值方程</span></div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习大杂烩collection</title>
      <link href="/2018/02/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99collection/"/>
      <url>/2018/02/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99collection/</url>
      <content type="html"><![CDATA[<p>机器学习资源整理<br><a id="more"></a><br><a href="http://www.cnblogs.com/jasonfreak/p/5448385.html" target="_blank" rel="external">对初始的数据的处理步骤</a><br><a href="http://open.163.com/special/opencourse/machinelearning.html" target="_blank" rel="external">andrew N.G的课程</a><br><a href="https://zhuanlan.zhihu.com/p/26704424" target="_blank" rel="external">知乎经验的帖子</a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python读写数据</title>
      <link href="/2018/02/01/python%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/02/01/python%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>python数据的读写<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="Python数据的写入"><a href="#Python数据的写入" class="headerlink" title="Python数据的写入"></a>Python数据的写入</h1><h2 id="写入txt文本文件"><a href="#写入txt文本文件" class="headerlink" title="写入txt文本文件"></a>写入txt文本文件</h2><p>with…open…语句有自动的打开、关闭功能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">    length = len(x)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">        f.write(str(x[i])+<span class="string">'\n'</span>)</div></pre></td></tr></table></figure></p><h2 id="写入Excel文件"><a href="#写入Excel文件" class="headerlink" title="写入Excel文件"></a>写入Excel文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">book = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>, style_compression=<span class="number">0</span>)</div><div class="line">sheet = book.add_sheet(<span class="string">'test'</span>, cell_overwrite_ok=<span class="keyword">True</span>)</div><div class="line">row = <span class="number">0</span></div><div class="line">col = <span class="number">0</span></div><div class="line">length = len(x)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">    sheet.write(i, col, x[i])</div><div class="line">book.save(<span class="string">r'e:\test.xls'</span>)</div></pre></td></tr></table></figure><h1 id="python数据的读取"><a href="#python数据的读取" class="headerlink" title="python数据的读取"></a>python数据的读取</h1><h2 id="Python的txt文本文件的读取"><a href="#Python的txt文本文件的读取" class="headerlink" title="Python的txt文本文件的读取"></a>Python的txt文本文件的读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">    ls = line.strip(<span class="string">'\n'</span>)</div><div class="line">    ls = ls.split(<span class="string">' '</span>)</div><div class="line">    print(ls)</div></pre></td></tr></table></figure><h2 id="python读取excel的数据"><a href="#python读取excel的数据" class="headerlink" title="python读取excel的数据"></a>python读取excel的数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xlrd</div><div class="line">data = xlrd.open_workbook(<span class="string">r'E:\数模比赛\2016美赛C\data1\problem1.xlsx'</span>)</div><div class="line">table = data.sheets()[<span class="number">0</span>]</div><div class="line">nrows = table.nrows </div><div class="line">ncols = table.ncols</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,nrows):</div><div class="line">    rowValues= table.row_values(i)</div><div class="line">    <span class="comment">#然后对rowValues进行性相应的操作，rowValues是列表类型的数据。</span></div></pre></td></tr></table></figure><h1 id="matlab数据的读取"><a href="#matlab数据的读取" class="headerlink" title="matlab数据的读取"></a>matlab数据的读取</h1><h2 id="matlab将数据读入excel"><a href="#matlab将数据读入excel" class="headerlink" title="matlab将数据读入excel"></a>matlab将数据读入excel</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xlswrite(<span class="string">'test.xlsx'</span>, x, <span class="number">1</span>, <span class="string">'A1:I1'</span>)</div></pre></td></tr></table></figure><h2 id="matlab读取excel中的数据"><a href="#matlab读取excel中的数据" class="headerlink" title="matlab读取excel中的数据"></a>matlab读取excel中的数据</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%score仅保存数字， head仅保存相应的字符串， raw所有的信息都会保存</span></div><div class="line">[score head raw] = xlsread(<span class="string">'score.xlsx'</span>)</div></pre></td></tr></table></figure><h2 id="matlab将数据写入text"><a href="#matlab将数据写入text" class="headerlink" title="matlab将数据写入text"></a>matlab将数据写入text</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">20</span>:<span class="built_in">pi</span>;</div><div class="line">u = <span class="built_in">sin</span>(x);</div><div class="line">fid = fopen(<span class="string">'data.txt'</span>,<span class="string">'w'</span>);</div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">21</span>,</div><div class="line">fprintf(fid,<span class="string">'%5.3f %8.4f\r\n'</span>,x(<span class="built_in">i</span>),u(<span class="built_in">i</span>));</div><div class="line"><span class="keyword">end</span>;</div><div class="line">fclose(fid);</div></pre></td></tr></table></figure><h2 id="matlab将数据写入text文本文件"><a href="#matlab将数据写入text文本文件" class="headerlink" title="matlab将数据写入text文本文件"></a>matlab将数据写入text文本文件</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data = load(<span class="string">'test.txt'</span>)</div></pre></td></tr></table></figure><h2 id="将c-数据读入读出txt"><a href="#将c-数据读入读出txt" class="headerlink" title="将c++数据读入读出txt"></a>将c++数据读入读出txt</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">freopen(<span class="string">"data.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);  </div><div class="line"></div><div class="line">freopen(<span class="string">"data.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div></pre></td></tr></table></figure><h3 id="一些字符串的小技巧"><a href="#一些字符串的小技巧" class="headerlink" title="一些字符串的小技巧"></a>一些字符串的小技巧</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%字符串的拼接</span></div><div class="line">first_name = <span class="string">'tian'</span>;</div><div class="line">second_name = <span class="string">'baolin'</span></div><div class="line">strcat(first_name, second_name)</div><div class="line"><span class="comment">%method 1</span></div><div class="line">strcat(&#123;first_name, second_name&#125;, &#123;<span class="string">'baby'</span>, <span class="string">'dragon'</span>&#125;)</div><div class="line"><span class="comment">%method 2</span></div><div class="line">sprintf(<span class="string">'%s%s'</span>, first_name, second_name)</div><div class="line"><span class="comment">%method 3</span></div><div class="line">str = [first_name, second_name];</div><div class="line">str</div><div class="line"></div><div class="line"><span class="comment">%数字转化为字符串</span></div><div class="line">number = <span class="number">23333</span>;</div><div class="line">num2str(number)</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>画复杂的网络图像</title>
      <link href="/2018/01/28/%E7%94%BB%E5%A4%8D%E6%9D%82%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F/"/>
      <url>/2018/01/28/%E7%94%BB%E5%A4%8D%E6%9D%82%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F/</url>
      <content type="html"><![CDATA[<p>复杂网络的可视化<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><a href="http://www.bio-info-trainee.com/1357.html" target="_blank" rel="external">资料的来源</a><br><a href="http://bl.ocks.org/mbostock/2706022" target="_blank" rel="external">d3js</a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    .link &#123;</span></div><div class="line"><span class="undefined">        fill: none;</span></div><div class="line"><span class="undefined">        stroke: #666;</span></div><div class="line"><span class="undefined">        stroke-width: 1.5px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    .node circle &#123;</span></div><div class="line"><span class="undefined">        fill: #ccc;</span></div><div class="line"><span class="undefined">        stroke: #fff;</span></div><div class="line"><span class="undefined">        stroke-width: 1.5px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    text &#123;</span></div><div class="line"><span class="undefined">        font: 10px sans-serif;</span></div><div class="line"><span class="undefined">        pointer-events: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//d3js.org/d3.v3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// http://blog.thomsonreuters.com/index.php/mobile-patent-suits-graphic-of-the-day/</span></span></div><div class="line"><span class="javascript">    <span class="comment">//主要在这里面改参数就可以了，非常的优秀</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> links = [</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Microsoft"</span>, <span class="attr">target</span>: <span class="string">"Amazon"</span>, <span class="attr">type</span>: <span class="string">"licensing"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Microsoft"</span>, <span class="attr">target</span>: <span class="string">"HTC"</span>, <span class="attr">type</span>: <span class="string">"licensing"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Samsung"</span>, <span class="attr">target</span>: <span class="string">"Apple"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Motorola"</span>, <span class="attr">target</span>: <span class="string">"Apple"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Nokia"</span>, <span class="attr">target</span>: <span class="string">"Apple"</span>, <span class="attr">type</span>: <span class="string">"resolved"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"HTC"</span>, <span class="attr">target</span>: <span class="string">"Apple"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Kodak"</span>, <span class="attr">target</span>: <span class="string">"Apple"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Microsoft"</span>, <span class="attr">target</span>: <span class="string">"Barnes &amp; Noble"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Microsoft"</span>, <span class="attr">target</span>: <span class="string">"Foxconn"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Oracle"</span>, <span class="attr">target</span>: <span class="string">"Google"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Apple"</span>, <span class="attr">target</span>: <span class="string">"HTC"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Microsoft"</span>, <span class="attr">target</span>: <span class="string">"Inventec"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Samsung"</span>, <span class="attr">target</span>: <span class="string">"Kodak"</span>, <span class="attr">type</span>: <span class="string">"resolved"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"LG"</span>, <span class="attr">target</span>: <span class="string">"Kodak"</span>, <span class="attr">type</span>: <span class="string">"resolved"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"RIM"</span>, <span class="attr">target</span>: <span class="string">"Kodak"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Sony"</span>, <span class="attr">target</span>: <span class="string">"LG"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Kodak"</span>, <span class="attr">target</span>: <span class="string">"LG"</span>, <span class="attr">type</span>: <span class="string">"resolved"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Apple"</span>, <span class="attr">target</span>: <span class="string">"Nokia"</span>, <span class="attr">type</span>: <span class="string">"resolved"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Qualcomm"</span>, <span class="attr">target</span>: <span class="string">"Nokia"</span>, <span class="attr">type</span>: <span class="string">"resolved"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Apple"</span>, <span class="attr">target</span>: <span class="string">"Motorola"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Microsoft"</span>, <span class="attr">target</span>: <span class="string">"Motorola"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Motorola"</span>, <span class="attr">target</span>: <span class="string">"Microsoft"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Huawei"</span>, <span class="attr">target</span>: <span class="string">"ZTE"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Ericsson"</span>, <span class="attr">target</span>: <span class="string">"ZTE"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Kodak"</span>, <span class="attr">target</span>: <span class="string">"Samsung"</span>, <span class="attr">type</span>: <span class="string">"resolved"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Apple"</span>, <span class="attr">target</span>: <span class="string">"Samsung"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Kodak"</span>, <span class="attr">target</span>: <span class="string">"RIM"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Nokia"</span>, <span class="attr">target</span>: <span class="string">"Qualcomm"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"tian"</span>, <span class="attr">target</span>: <span class="string">"bao"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"tian"</span>, <span class="attr">target</span>: <span class="string">"Google"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"Oracle"</span>, <span class="attr">target</span>: <span class="string">"ZTE"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="javascript">        &#123;<span class="attr">source</span>: <span class="string">"ZTE"</span>, <span class="attr">target</span>: <span class="string">"HTC"</span>, <span class="attr">type</span>: <span class="string">"suit"</span>&#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ];</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> nodes = &#123;&#125;;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// Compute the distinct nodes from the links.</span></span></div><div class="line"><span class="javascript">    links.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">link</span>) </span>&#123;</span></div><div class="line"><span class="undefined">        link.source = nodes[link.source] || (nodes[link.source] = &#123;name: link.source&#125;);</span></div><div class="line"><span class="undefined">        link.target = nodes[link.target] || (nodes[link.target] = &#123;name: link.target&#125;);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> width = <span class="number">960</span>,</span></div><div class="line"><span class="undefined">        height = 500;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> force = d3.layout.force()</span></div><div class="line"><span class="undefined">        .nodes(d3.values(nodes))</span></div><div class="line"><span class="undefined">        .links(links)</span></div><div class="line"><span class="undefined">        .size([width, height])</span></div><div class="line"><span class="undefined">        .linkDistance(60)</span></div><div class="line"><span class="undefined">        .charge(-300)</span></div><div class="line"><span class="javascript">        .on(<span class="string">"tick"</span>, tick)</span></div><div class="line"><span class="undefined">        .start();</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>).append(<span class="string">"svg"</span>)</span></div><div class="line"><span class="javascript">        .attr(<span class="string">"width"</span>, width)</span></div><div class="line"><span class="javascript">        .attr(<span class="string">"height"</span>, height);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> link = svg.selectAll(<span class="string">".link"</span>)</span></div><div class="line"><span class="undefined">        .data(force.links())</span></div><div class="line"><span class="javascript">        .enter().append(<span class="string">"line"</span>)</span></div><div class="line"><span class="javascript">        .attr(<span class="string">"class"</span>, <span class="string">"link"</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> node = svg.selectAll(<span class="string">".node"</span>)</span></div><div class="line"><span class="undefined">        .data(force.nodes())</span></div><div class="line"><span class="javascript">        .enter().append(<span class="string">"g"</span>)</span></div><div class="line"><span class="javascript">        .attr(<span class="string">"class"</span>, <span class="string">"node"</span>)</span></div><div class="line"><span class="javascript">        .on(<span class="string">"mouseover"</span>, mouseover)</span></div><div class="line"><span class="javascript">        .on(<span class="string">"mouseout"</span>, mouseout)</span></div><div class="line"><span class="undefined">        .call(force.drag);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    node.append(<span class="string">"circle"</span>)</span></div><div class="line"><span class="javascript">        .attr(<span class="string">"r"</span>, <span class="number">8</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    node.append(<span class="string">"text"</span>)</span></div><div class="line"><span class="javascript">        .attr(<span class="string">"x"</span>, <span class="number">12</span>)</span></div><div class="line"><span class="javascript">        .attr(<span class="string">"dy"</span>, <span class="string">".35em"</span>)</span></div><div class="line"><span class="javascript">        .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.name; &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">        link</span></div><div class="line"><span class="javascript">            .attr(<span class="string">"x1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.source.x; &#125;)</span></div><div class="line"><span class="javascript">            .attr(<span class="string">"y1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.source.y; &#125;)</span></div><div class="line"><span class="javascript">            .attr(<span class="string">"x2"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.target.x; &#125;)</span></div><div class="line"><span class="javascript">            .attr(<span class="string">"y2"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.target.y; &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        node</span></div><div class="line"><span class="javascript">            .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> <span class="string">"translate("</span> + d.x + <span class="string">","</span> + d.y + <span class="string">")"</span>; &#125;);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">mouseover</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        d3.select(<span class="keyword">this</span>).select(<span class="string">"circle"</span>).transition()</span></div><div class="line"><span class="undefined">            .duration(750)</span></div><div class="line"><span class="javascript">            .attr(<span class="string">"r"</span>, <span class="number">16</span>);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">mouseout</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        d3.select(<span class="keyword">this</span>).select(<span class="string">"circle"</span>).transition()</span></div><div class="line"><span class="undefined">            .duration(750)</span></div><div class="line"><span class="javascript">            .attr(<span class="string">"r"</span>, <span class="number">8</span>);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模板</title>
      <link href="/2018/01/20/%E6%A8%A1%E6%9D%BF/"/>
      <url>/2018/01/20/%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p>模板积累<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ul><li>绝大部分的RE错误来源于数组开的过小</li><li>注意整数除以整数的时候乘以1.0,除非要是用整除的含义(拓展欧几里得)</li><li>使用并查集的时候最后要扫一遍,使路径压缩。</li><li>时刻注意数字的范围，如果题目中出现了long long 一定要高度的重视，因为很有可能会被坑</li><li>开比较大的栈:#pragma comment(linker, “/STACK:102400000,102400000”)</li></ul><h1 id="快速读入挂"><a href="#快速读入挂" class="headerlink" title="快速读入挂"></a>快速读入挂</h1><p>有时候并不一定就很快emmm</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function">ll <span class="title">readll</span><span class="params">()</span></span>&#123;</div><div class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">readint</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line">    <span class="keyword">return</span> f*x;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="读取带有空格的字符串"><a href="#读取带有空格的字符串" class="headerlink" title="读取带有空格的字符串"></a>读取带有空格的字符串</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//method 1</div><div class="line">string str;</div><div class="line">getline(cin, str);</div><div class="line"></div><div class="line">//method 2</div><div class="line">char str[maxn];</div><div class="line">    gets(str);</div></pre></td></tr></table></figure><h1 id="adptive-Simpson’s-rule"><a href="#adptive-Simpson’s-rule" class="headerlink" title="adptive Simpson’s rule"></a>adptive Simpson’s rule</h1><p>为什么求sin(x)/x就会挂掉啊不知道MATLAB能不能求出来这种形式的积分，明天试试。<br>还有三重积分球体积怎么用数值分析的方法来求？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">F</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sin</span>(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">simpson</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> c = a+(b-a)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> (F(a)+<span class="number">4</span>*F(c)+F(b))*(b-a)/<span class="number">6</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">asr</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> eps, <span class="keyword">double</span> A)</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> c = a+(b-a)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">double</span> L = simpson(a, c), R = simpson(c, b);</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(L+R-A) &lt;= <span class="number">15</span>*eps) <span class="keyword">return</span> L+R+(L+R-A)/<span class="number">15.0</span>;</div><div class="line">    <span class="keyword">return</span> asr(a, c, eps/<span class="number">2</span>, L)+asr(c, b, eps/<span class="number">2</span>, R);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">asr</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> eps)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> asr(a, b, eps, simpson(a, b));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">double</span> s = asr(<span class="number">0</span>, PI, <span class="number">1e-5</span>);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Dinic算法求最大流"><a href="#Dinic算法求最大流" class="headerlink" title="Dinic算法求最大流"></a>Dinic算法求最大流</h1><blockquote><p>接口<br>n:节点的个数<br>m:边的个数<br>s:起始点(源点)<br>t:终点(汇点)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, cap, rev;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> cnt[maxn];</div><div class="line"><span class="keyword">int</span> level[maxn];</div><div class="line"><span class="keyword">int</span> s, t;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> cap)</span></span>&#123;</div><div class="line">    G[u].push_back(Edge&#123;v, cap, G[v].size()&#125;);</div><div class="line">    G[v].push_back(Edge&#123;u, <span class="number">0</span>, G[u].size()<span class="number">-1</span>&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(level, <span class="number">-1</span>, <span class="keyword">sizeof</span>(level));</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    q.push(s);</div><div class="line">    level[s] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> v = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[v].size(); i++)&#123;</div><div class="line">            Edge&amp; e = G[v][i];</div><div class="line">            <span class="keyword">if</span>(e.cap&gt;<span class="number">0</span>&amp;&amp;level[e.to]&lt;<span class="number">0</span>)&#123;</div><div class="line">                level[e.to] = level[v]+<span class="number">1</span>;</div><div class="line">                q.push(e.to);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(v == t) <span class="keyword">return</span> flow;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>&amp; i=cnt[v]; i&lt;G[v].size(); i++)&#123;</div><div class="line">        Edge&amp; e = G[v][i];</div><div class="line">        <span class="keyword">if</span>(e.cap&gt;<span class="number">0</span>&amp;&amp;level[v]&lt;level[e.to])&#123;</div><div class="line">            <span class="keyword">int</span> d = dfs(e.to, t, min(flow, e.cap));</div><div class="line">            <span class="keyword">if</span>(d&gt;<span class="number">0</span>)&#123;</div><div class="line">                e.cap -= d;</div><div class="line">                G[e.to][e.rev].cap += d;</div><div class="line">                <span class="keyword">return</span> d;<span class="comment">//一旦有一条路径满足就立即返回！</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(;;)&#123;</div><div class="line">        <span class="comment">//构造层次图</span></div><div class="line">        bfs(s);</div><div class="line">        <span class="comment">//无法连通终点，结束访问</span></div><div class="line">        <span class="keyword">if</span>(level[t]&lt;<span class="number">0</span>) <span class="keyword">return</span> flow;</div><div class="line">        <span class="keyword">int</span> f;</div><div class="line">        <span class="comment">//cnt数组记录在递归的过程中的边的顺序。</span></div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</div><div class="line">        <span class="comment">//当存在增广路的时候不断的进行增广</span></div><div class="line">        <span class="keyword">while</span>((f = dfs(s, t, INF))&gt;<span class="number">0</span>)&#123;</div><div class="line">            flow+=f;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) G[i].clear();</div><div class="line">        <span class="keyword">int</span> u, v, cap;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;cap);</div><div class="line">            add_edge(u, v, cap);</div><div class="line">        &#125;</div><div class="line">        s = <span class="number">1</span>;</div><div class="line">        t = n;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max_flow(s, t));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="链式前向星来存图"><a href="#链式前向星来存图" class="headerlink" title="链式前向星来存图"></a>链式前向星来存图</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e5</span>+<span class="number">100</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, next, weight;</div><div class="line">&#125;edge[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> head[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> weight)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    edge[cnt].to = v;</div><div class="line">    edge[cnt].weight = weight;</div><div class="line">    edge[cnt].next = head[u];</div><div class="line">    head[u] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</div><div class="line">        cnt=<span class="number">0</span>, <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v, weight;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;weight;</div><div class="line">            add(u, v, weight);</div><div class="line">            add(v, u, weight);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=head[i]; j!=<span class="number">-1</span>; j = edge[j].next)&#123;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;edge[j].to&lt;&lt;<span class="string">" "</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><h2 id="快速幂-1"><a href="#快速幂-1" class="headerlink" title="快速幂"></a>快速幂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line">ll a, b, c;</div><div class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b, ll mod)</span></span>&#123;</div><div class="line">    ll ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)&#123;</div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</div><div class="line">            ans = ans*a%mod;</div><div class="line">        &#125;</div><div class="line">        a = a*a%mod;</div><div class="line">        b&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d"</span>, &amp;a, &amp;b, &amp;c))&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, pow_mod(a, b, c));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><p><a href="https://vjudge.net/contest/177599#problem" target="_blank" rel="external">斐波那契数列</a><br><img src="https://t1.picb.cc/uploads/2018/02/25/KRG9a.gif" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">7</span>;</div><div class="line"><span class="keyword">int</span> A, B, n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> mat[maxn][maxn];</div><div class="line">    Mat()&#123;</div><div class="line">        <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="keyword">sizeof</span>(mat));</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function">Mat <span class="title">mul</span><span class="params">(Mat a, Mat b, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    Mat ans;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                ans.mat[i][j] = (ans.mat[i][j]+a.mat[i][k]*b.mat[k][j])%mod;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Mat <span class="title">pow_mat</span><span class="params">(Mat a, <span class="keyword">int</span> b, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    Mat ans;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)ans.mat[i][i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)&#123;</div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</div><div class="line">            ans = mul(a, ans, n);</div><div class="line">        &#125;</div><div class="line">        a = mul(a, a, n);</div><div class="line">        b&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;A, &amp;B, &amp;n)&amp;&amp;A+B+n!=<span class="number">0</span>)&#123;</div><div class="line">        Mat a;</div><div class="line">        a.mat[<span class="number">0</span>][<span class="number">0</span>] = A, a.mat[<span class="number">0</span>][<span class="number">1</span>] = B, a.mat[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>, a.mat[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            Mat ans = pow_mat(a, n<span class="number">-2</span>, <span class="number">2</span>);</div><div class="line">            <span class="keyword">int</span> temp = (ans.mat[<span class="number">0</span>][<span class="number">0</span>]+ans.mat[<span class="number">0</span>][<span class="number">1</span>])%mod;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, temp);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="求逆元"><a href="#求逆元" class="headerlink" title="求逆元"></a>求逆元</h1><h2 id="拓展欧几里德求解逆元"><a href="#拓展欧几里德求解逆元" class="headerlink" title="拓展欧几里德求解逆元"></a>拓展欧几里德求解逆元</h2><p>用拓展欧几里德来求解逆元的时候，需要\(gcd(b, mod)=1\)。<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1576" target="_blank" rel="external">拓展欧几里德的模板题</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span>  <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">9973</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">extgcd</span><span class="params">(ll a,ll b,ll&amp; d,ll&amp; x,ll&amp; y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!b)&#123; d=a; x=<span class="number">1</span>; y=<span class="number">0</span>;&#125;</div><div class="line">    <span class="keyword">else</span>&#123; extgcd(b,a%b,d,y,x); y-=x*(a/b); &#125;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">inverse</span><span class="params">(ll a,ll n)</span></span>&#123;</div><div class="line">    ll d,x,y;</div><div class="line">    extgcd(a,n,d,x,y);</div><div class="line">    <span class="keyword">return</span> d==<span class="number">1</span>?(x+n)%n:<span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> T;</div><div class="line"><span class="keyword">int</span> n, b;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;T; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;b);</div><div class="line">        ll inver = inverse(b, mod);</div><div class="line">        <span class="keyword">int</span> ans = inver*n%mod;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="费马小定理求解逆元"><a href="#费马小定理求解逆元" class="headerlink" title="费马小定理求解逆元"></a>费马小定理求解逆元</h2><p>若被摸的数p为素数的时候，有拓展费马小定理证明：<br>\(a^{p-1}\equiv 1mod p\)</p><p>那么a的逆元就为\(a^{p-2}\).<br>快速幂搞一下就行了</p><h2 id="一般的求解。"><a href="#一般的求解。" class="headerlink" title="一般的求解。"></a>一般的求解。</h2><p><img src="http://latex.codecogs.com/gif.latex?\frac{a}{b}\%p" title="\frac{a}{b}\%p"><br>一般求解方法：<br><img src="http://latex.codecogs.com/gif.latex?\frac{a}{b}\%p=\frac{a\%(p*b)}{b}" title="\frac{a}{b}\%p=\frac{a\%(p*b)}{b}"><br>但是p*b的值往往是比较的大的，有时候会溢出就不知道怎么弄了。(看后面的有关的一道数论的题目)</p><h1 id="c-中一些优秀的函数"><a href="#c-中一些优秀的函数" class="headerlink" title="c++中一些优秀的函数"></a>c++中一些优秀的函数</h1><h2 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h2><p>可以部分的取代kmp算法，但是不能统计子串的个数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">//在串中查找模式串第一次出现的位置。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> pattern[maxn];</div><div class="line"><span class="keyword">char</span> text[maxn&lt;&lt;<span class="number">4</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> *ptr;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, pattern, text))&#123;</div><div class="line">        ptr = <span class="built_in">strstr</span>(text, pattern);</div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(pattern);</div><div class="line">        <span class="keyword">if</span>(ptr != <span class="literal">NULL</span>)&#123;</div><div class="line">            <span class="keyword">char</span> ans[maxn];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">                ans[i] = ptr[i];</div><div class="line">            &#125;</div><div class="line">            ans[len] = <span class="string">'\0'</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h2><p>使用unique之前要先对数组进行相应的排序，然后求得不同数字的个数。<br>unique不改变原来数组<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> num[<span class="number">20</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">        num[i] = i+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>; i&lt;<span class="number">20</span>; i++)&#123;</div><div class="line">        num[i] = i<span class="number">-9</span>;</div><div class="line">    &#125;</div><div class="line">    sort(num, num+<span class="number">20</span>);</div><div class="line">    <span class="keyword">int</span> sz = unique(num, num+<span class="number">20</span>)-num;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;sz&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound()"></a>lower_bound()</h2><p>返回第一个<font color="#FF303"><strong>大于等于</strong></font>这个值的下标（下标是从0开始的）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> num[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lower_bound(num, num+<span class="number">10</span>, <span class="number">5</span>)-num);</div></pre></td></tr></table></figure></p><h2 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound()"></a>upper_bound()</h2><p>返回第一个<font color="#FF3030"><strong>大于</strong></font>这个值的下标<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> num[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, upper_bound(num, num+<span class="number">10</span>, <span class="number">5</span>)-num);</div></pre></td></tr></table></figure></p><h2 id="make-heap-amp-amp-distance"><a href="#make-heap-amp-amp-distance" class="headerlink" title="make_heap&amp;&amp;distance"></a>make_heap&amp;&amp;distance</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; heap;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</div><div class="line">        heap.push_back(num[i]);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    make_heap(heap.begin(), heap.end(), greater&lt;<span class="keyword">int</span>&gt;() );</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = heap.begin(); it!=heap.end(); it++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, *it);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> distance(num.begin(), find(num.begin(), num.end(), number));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)&#123;</div><div class="line">        num.push_back(i);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;dis(<span class="number">5</span>)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h2><p><a href="https://www.cnblogs.com/RabbitHu/p/bitset.html" target="_blank" rel="external">bitset的各种操作</a><br>高中OIer真的是惹不起，太强了。初中就已经到达了我现在的水平，真的是好惭愧啊。<br>bitset的长度在刚开始的时候就已经定义好了<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">bitset</span>&lt;20&gt; test;</div></pre></td></tr></table></figure></p><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><p><a href="http://blog.csdn.net/whyglinux/article/details/602329" target="_blank" rel="external">符号重载后面加const的原因</a><br>简单来说在这个函数里面不能修改任何的数据，否则就会报错，降低错误率。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="keyword">int</span> top;</div><div class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Node a, Node b)&#123;</div><div class="line">        <span class="keyword">return</span> a.top&gt;b.top;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;Node&gt; pq;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(Node a, Node b)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(a.top!=b.top) <span class="keyword">return</span> a.top&gt;b.top;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">priority_queue&lt;Node, <span class="built_in">vector</span>&lt;Node&gt;, cmp&gt; pq2;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    pq2.push(Node&#123;<span class="string">"tian"</span>, <span class="number">2</span>&#125;);</div><div class="line">    pq2.push(Node&#123;<span class="string">"bao"</span>, <span class="number">1</span>&#125;);</div><div class="line">    pq2.push(Node&#123;<span class="string">"lin"</span>, <span class="number">3</span>&#125;);</div><div class="line">    Node temp = pq2.top();</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;temp.name&lt;&lt;<span class="string">" "</span>&lt;&lt;temp.top&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x&amp;-x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(x&lt;=n)&#123;</div><div class="line">        c[x] += val;</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</div><div class="line">        ans += c[x];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            update(i, num[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d: %d\n"</span>, i, sum(i));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> nexT[maxn];</div><div class="line"><span class="keyword">char</span> text[maxn];</div><div class="line"><span class="keyword">char</span> pattern[maxn];</div><div class="line"><span class="keyword">int</span> len1, len2;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">()</span></span>&#123;</div><div class="line">    nexT[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;len2; i++)&#123;</div><div class="line">        <span class="keyword">while</span>(j!=<span class="number">-1</span>&amp;&amp;pattern[i]!=pattern[j+<span class="number">1</span>])&#123;</div><div class="line">            j = nexT[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(pattern[i] == pattern[j+<span class="number">1</span>])&#123;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        nexT[i] = j;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">()</span></span>&#123;</div><div class="line">    get_next();</div><div class="line">    <span class="keyword">int</span> j=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len1; i++)&#123;</div><div class="line">        <span class="keyword">while</span>(j!=<span class="number">-1</span>&amp;&amp;text[i]!=pattern[j+<span class="number">1</span>])&#123;</div><div class="line">            j = nexT[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(text[i] == pattern[j+<span class="number">1</span>])&#123;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(j == len2<span class="number">-1</span>)&#123;</div><div class="line">            ans++;</div><div class="line">            j = nexT[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, text, pattern))&#123;</div><div class="line">        len1 = <span class="built_in">strlen</span>(text);</div><div class="line">        len2 = <span class="built_in">strlen</span>(pattern);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, KMP());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="二分图的染色问题"><a href="#二分图的染色问题" class="headerlink" title="二分图的染色问题"></a>二分图的染色问题</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> color[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bipartite</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i];</div><div class="line">        <span class="keyword">if</span>(color[v]&amp;&amp;color[v] == color[u]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(!color[v])&#123;</div><div class="line">            color[v] = <span class="number">3</span> - color[u];</div><div class="line">            <span class="keyword">if</span>(!bipartite(v)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) G[i].clear();</div><div class="line">        <span class="built_in">memset</span>(color, <span class="number">0</span>, <span class="keyword">sizeof</span>(color));</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">            G[v].push_back(u);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(bipartite(<span class="number">0</span>))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="割顶"><a href="#割顶" class="headerlink" title="割顶"></a>割顶</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> dfs_clock;</div><div class="line"><span class="keyword">int</span> pre[maxn], low[maxn];</div><div class="line"><span class="keyword">bool</span> iscut[maxn];</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">5 5</span></div><div class="line"><span class="comment">0 1</span></div><div class="line"><span class="comment">1 2</span></div><div class="line"><span class="comment">1 3</span></div><div class="line"><span class="comment">2 4</span></div><div class="line"><span class="comment">4 0</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> lowu = pre[u] = ++dfs_clock;</div><div class="line">    <span class="keyword">int</span> child = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i];</div><div class="line">        <span class="keyword">if</span>(!pre[v])&#123;</div><div class="line">            child++;</div><div class="line">            <span class="keyword">int</span> lowv = dfs(v, u);</div><div class="line">            lowu = min(lowv, lowu);</div><div class="line">            <span class="keyword">if</span>(lowv&gt;=pre[u])&#123;</div><div class="line">                iscut[u] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pre[u]&gt;pre[v]&amp;&amp;fa!=v)&#123;</div><div class="line">            lowu = min(lowu, pre[v]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(fa&lt;<span class="number">0</span> &amp;&amp;child == <span class="number">1</span>) iscut[u] = <span class="literal">false</span>;</div><div class="line">    low[u] = lowu;</div><div class="line">    <span class="keyword">return</span> lowu;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) G[i].clear();</div><div class="line">        <span class="built_in">memset</span>(iscut, <span class="number">0</span>, <span class="keyword">sizeof</span>(iscut));</div><div class="line">        <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="keyword">sizeof</span>(pre));</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">            G[v].push_back(u);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(!pre[i]) dfs(i, <span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, iscut[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="树的三序"><a href="#树的三序" class="headerlink" title="树的三序"></a>树的三序</h1><p>还差一个层序遍历<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">7</span></div><div class="line"><span class="comment">4 1 3 2 6 5 7</span></div><div class="line"><span class="comment">1 2 3 4 5 6 7</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="comment">//post order</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">7</span></div><div class="line"><span class="comment">2 3 1 5 7 6 4</span></div><div class="line"><span class="comment">1 2 3 4 5 6 7</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> in[maxn];</div><div class="line"><span class="keyword">int</span> post[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> data;</div><div class="line">    Node* lchild;</div><div class="line">    Node* rchild;</div><div class="line">    Node()&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;data = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">this</span>-&gt;lchild = <span class="keyword">this</span>-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">build_post</span><span class="params">(<span class="keyword">int</span> prel, <span class="keyword">int</span> prer, <span class="keyword">int</span> inl, <span class="keyword">int</span> inr)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(prer&lt;prel) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    Node* root = <span class="keyword">new</span> Node;</div><div class="line">    root-&gt;data = pre[prel];</div><div class="line">    <span class="keyword">int</span> temp = pre[prel];</div><div class="line">    <span class="keyword">int</span> k;</div><div class="line">    <span class="keyword">for</span>(k=inl; k&lt;=inr; k++)&#123;</div><div class="line">        <span class="keyword">if</span>(temp == in[k]) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> numleft = k-inl;</div><div class="line">    root-&gt;lchild = build_post(prel+<span class="number">1</span>, prel+numleft, inl, k<span class="number">-1</span>);</div><div class="line">    root-&gt;rchild = build_post(prel+numleft+<span class="number">1</span>, prer, k+<span class="number">1</span>, inr);</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"><span class="function">Node* <span class="title">build_pre</span><span class="params">(<span class="keyword">int</span> postl, <span class="keyword">int</span> postr, <span class="keyword">int</span> inl, <span class="keyword">int</span> inr)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(postr&lt;postl) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    Node* root = <span class="keyword">new</span> Node;</div><div class="line">    root-&gt;data = post[postr];</div><div class="line">    <span class="keyword">int</span> temp = pre[postr];</div><div class="line">    <span class="keyword">int</span> k;</div><div class="line">    <span class="keyword">for</span>(k=inl; k&lt;=inr; k++)&#123;</div><div class="line">        <span class="keyword">if</span>(temp == in[k]) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> numleft = k-inl;</div><div class="line">    root-&gt;lchild = build_pre(postl, postl+numleft<span class="number">-1</span>, inl, k<span class="number">-1</span>);</div><div class="line">    root-&gt;rchild = build_pre(postl+numleft, postr<span class="number">-1</span>, k+<span class="number">1</span>, inr);</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">post_order</span><span class="params">(Node* root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    post_order(root-&gt;lchild);</div><div class="line">    post_order(root-&gt;rchild);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, root-&gt;data);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_order</span><span class="params">(Node* root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, root-&gt;data);</div><div class="line">    pre_order(root-&gt;lchild);</div><div class="line">    pre_order(root-&gt;rchild);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">layer_order</span><span class="params">(Node *root)</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;Node*&gt; q;</div><div class="line">    q.push(root);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        Node *temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp-&gt;data);</div><div class="line">        <span class="keyword">if</span>(temp-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">            q.push(temp-&gt;lchild);</div><div class="line">        <span class="keyword">if</span>(temp-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">            q.push(temp-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> type;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"请输入个数n以及所得到的序列:\n1.先序和中序\n2.中序和后序\n"</span>);</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;type))&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"请输入数组的大小\n"</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">if</span>(type == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pre[i]);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;in[i]);</div><div class="line">            Node* root = build_post(<span class="number">0</span>, n<span class="number">-1</span>, <span class="number">0</span>, n<span class="number">-1</span>);</div><div class="line">            post_order(root);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;post[i]);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;in[i]);</div><div class="line">            Node* root = build_pre(<span class="number">0</span>, n<span class="number">-1</span>, <span class="number">0</span>, n<span class="number">-1</span>);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"444\n"</span>);</div><div class="line">            pre_order(root);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"你是不是想捣乱！\n"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h1><p>要求\(a\lt n\), 并且gcd(a, n) == 1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="function">ll <span class="title">ex_gcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(a==<span class="number">0</span> &amp;&amp; b==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</div><div class="line">        x=<span class="number">1</span>, y=<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    ll d = ex_gcd(b, a%b, y, x);</div><div class="line">    y -= a/b*x;<span class="comment">//这里是整除</span></div><div class="line">    <span class="keyword">return</span> d;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll n)</span></span>&#123;</div><div class="line">    ll x, y;</div><div class="line">    ll d = ex_gcd(a, n, x, y);</div><div class="line">    <span class="keyword">if</span>(d == <span class="number">1</span>) <span class="keyword">return</span> (x%n+n)%n;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="求组合数"><a href="#求组合数" class="headerlink" title="求组合数"></a>求组合数</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">67</span>;</div><div class="line">ll res[maxn][maxn];</div><div class="line"><span class="function">ll <span class="title">Comb</span><span class="params">(ll n, ll m)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>|| n == m) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(res[n][m]!=<span class="number">0</span>) <span class="keyword">return</span> res[n][m];</div><div class="line">    <span class="keyword">return</span> res[n][m] = C(n<span class="number">-1</span>, m<span class="number">-1</span>)+C(n<span class="number">-1</span>, m);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Lucas定理"><a href="#Lucas定理" class="headerlink" title="Lucas定理"></a>Lucas定理</h1><p>p要求为素数，p&lt;=1e5, n, m&lt;=1e18<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n, m, p;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">ex_gcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(a == <span class="number">0</span>&amp;&amp;b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span>(b ==<span class="number">0</span>)&#123;</div><div class="line">        x=<span class="number">1</span>, y=<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    ll d=ecx_gcd(b, a%b, y, x);</div><div class="line">    y -= a/b*x;</div><div class="line">    <span class="keyword">return</span> d;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll n)</span></span>&#123;</div><div class="line">    ll x, y;</div><div class="line">    ll d = ex_gcd(a, n, x, y);</div><div class="line">    <span class="keyword">if</span>(d!=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (x%n+n)%n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//O(mlogm)</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</div><div class="line">        ans = ans*(n-m+i)%p;</div><div class="line">        ans = ans*inv(i, p)%p;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lucas</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> C(n%p, m%p)*lucas(n/p, m/p)%p;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="p不为质数的组合数求解"><a href="#p不为质数的组合数求解" class="headerlink" title="p不为质数的组合数求解"></a>p不为质数的组合数求解</h1><p>先将分子分母进行相应的质因子分解，然后消去分母，最后进行快速幂。</p><h1 id="4C默写"><a href="#4C默写" class="headerlink" title="4C默写"></a>4C默写</h1><p>搞完就删</p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> heap[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">10</span></div><div class="line"><span class="comment">85 55 82 57 68 92 99 98 66 56</span></div><div class="line"><span class="comment">99 98 92 66 68 85 82 57 55 56</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">downAdjust</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i=low, j=<span class="number">2</span>*i;</div><div class="line">    <span class="keyword">while</span>(j&lt;=high)&#123;</div><div class="line">        <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=high&amp;&amp;heap[j+<span class="number">1</span>]&gt;heap[j])&#123;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(heap[j]&gt;heap[i])&#123;</div><div class="line">            swap(heap[i], heap[j]);</div><div class="line">            i = j;</div><div class="line">            j = i*<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">creat_heap</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>; i&gt;=<span class="number">1</span>; i--)&#123;</div><div class="line">        downAdjust(i, n);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletetop</span><span class="params">()</span></span>&#123;</div><div class="line">    heap[<span class="number">1</span>] = heap[n--];</div><div class="line">    downAdjust(<span class="number">1</span>, n);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">upAdjust</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i=high, j=i/<span class="number">2</span>;</div><div class="line">    <span class="keyword">while</span>(j&gt;=low)&#123;</div><div class="line">        <span class="keyword">if</span>(heap[j]&lt;heap[i])&#123;</div><div class="line">            swap(heap[i], heap[j]);</div><div class="line">            i = j;</div><div class="line">            j = i/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_heap</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    heap[++n] = x;</div><div class="line">    upAdjust(<span class="number">1</span>, n);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapsort</span><span class="params">()</span></span>&#123;</div><div class="line">    creat_heap();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;=<span class="number">1</span>; i--)&#123;</div><div class="line">        swap(heap[i], heap[<span class="number">1</span>]);</div><div class="line">        downAdjust(<span class="number">1</span>, i<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;heap[i]);</div><div class="line">    &#125;</div><div class="line">    creat_heap();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, heap[i]);</div><div class="line">    &#125;</div><div class="line">    heapsort();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, heap[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="树的层序遍历"><a href="#树的层序遍历" class="headerlink" title="树的层序遍历"></a>树的层序遍历</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">        4</span></div><div class="line"><span class="comment">    1        6</span></div><div class="line"><span class="comment">       3   5    7</span></div><div class="line"><span class="comment">     2</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> data;</div><div class="line">    Node *lchild, *rchild;</div><div class="line">    Node()&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;data = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">this</span>-&gt;lchild = <span class="keyword">this</span>-&gt;rchild = <span class="literal">NULL</span>;</div><div class="line">   &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> in[maxn];</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">build</span><span class="params">(<span class="keyword">int</span> prel, <span class="keyword">int</span> prer, <span class="keyword">int</span> inl, <span class="keyword">int</span> inr)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(prel&gt;prer) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    Node *root = <span class="keyword">new</span> Node;</div><div class="line">    root-&gt;data = pre[prel];</div><div class="line">    <span class="keyword">int</span> k;</div><div class="line">    <span class="keyword">for</span>(k=inl; k&lt;=inr; k++)&#123;</div><div class="line">        <span class="keyword">if</span>(pre[prel] == in[k]) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> num = k-inl;</div><div class="line">    root-&gt;lchild = build(prel+<span class="number">1</span>, prel+num, inl, k<span class="number">-1</span>);</div><div class="line">    root-&gt;rchild = build(prel+num+<span class="number">1</span>, prer, k+<span class="number">1</span>, inr);</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">post_order</span><span class="params">(Node *root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    post_order(root-&gt;lchild);</div><div class="line">    post_order(root-&gt;rchild);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, root-&gt;data);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">layer_order</span><span class="params">(Node *root)</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;Node*&gt; q;</div><div class="line">    q.push(root);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        Node *temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp-&gt;data);</div><div class="line">        <span class="keyword">if</span>(temp-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">            q.push(temp-&gt;lchild);</div><div class="line">        <span class="keyword">if</span>(temp-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">            q.push(temp-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pre[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;in[i]);</div><div class="line">    Node *root = build(<span class="number">0</span>, n<span class="number">-1</span>, <span class="number">0</span>, n<span class="number">-1</span>);</div><div class="line">    post_order(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    layer_order(root);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="最长回文串"><a href="#最长回文串" class="headerlink" title="最长回文串"></a>最长回文串</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">string</span> str;</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn];</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    getline(<span class="built_in">cin</span>, str);</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    <span class="keyword">int</span> len = str.length();</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">        dp[i][i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(i+<span class="number">1</span>&lt;len)&#123;</div><div class="line">            <span class="keyword">if</span>(str[i] == str[i+<span class="number">1</span>])&#123;</div><div class="line">                dp[i][i+<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">                ans = <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">3</span>; l&lt;=len; l++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i+l<span class="number">-1</span>&lt;len; i++)&#123;</div><div class="line">            <span class="keyword">int</span> j = i+l<span class="number">-1</span>;</div><div class="line">            <span class="keyword">if</span>(str[i] == str[j] &amp;&amp;dp[i+<span class="number">1</span>][j<span class="number">-1</span>])&#123;</div><div class="line">                dp[i][j] = <span class="number">1</span>;</div><div class="line">                ans = l;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="scc"><a href="#scc" class="headerlink" title="scc"></a>scc</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">12 16</span></div><div class="line"><span class="comment">12 11</span></div><div class="line"><span class="comment">11 8</span></div><div class="line"><span class="comment">11 10</span></div><div class="line"><span class="comment">8 10</span></div><div class="line"><span class="comment">10 9</span></div><div class="line"><span class="comment">9 8</span></div><div class="line"><span class="comment">9 7</span></div><div class="line"><span class="comment">7 6</span></div><div class="line"><span class="comment">6 5</span></div><div class="line"><span class="comment">5 7</span></div><div class="line"><span class="comment">6 3</span></div><div class="line"><span class="comment">6 4</span></div><div class="line"><span class="comment">4 3</span></div><div class="line"><span class="comment">3 2</span></div><div class="line"><span class="comment">2 3</span></div><div class="line"><span class="comment">4 1</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rG[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> index[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vs;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    G[u].push_back(v);</div><div class="line">    rG[v].push_back(u);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[G[u][i]]) dfs(G[u][i]);</div><div class="line">    &#125;</div><div class="line">    vs.push_back(u);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rdfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    vis[v] = <span class="literal">true</span>;</div><div class="line">    index[v] = k;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;rG[v].size(); i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[rG[v][i]])rdfs(rG[v][i], k);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">scc</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    vs.clear();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[i]) dfs(i);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=vs.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[vs[i]])&#123;</div><div class="line">            rdfs(vs[i], k++);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k);</div><div class="line">    <span class="keyword">return</span> k;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            G[i].clear();</div><div class="line">            rG[i].clear();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            add_edge(u<span class="number">-1</span>, v<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        scc();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d: %d\n"</span>, i, index[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h1><p>感觉运用了贪心的细想，不断的更新最长的子序列。<br>用二分查找的方法找到一个位置，使得\(num\gt b[i-1] 并且num\lt b[i],并用num代替b[i]\)<br>注意二分的总结<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> a[maxn], b[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">5</span></div><div class="line"><span class="comment">7 2 3 1 4 8</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bi</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> L=<span class="number">1</span>, R=len;</div><div class="line">    <span class="comment">//用二分查找的方法找到一个位置，使得num&gt;b[i-1] 并且num&lt;b[i],并用num代替b[i]</span></div><div class="line">    <span class="keyword">while</span>(L&lt;=R)&#123;</div><div class="line">        <span class="keyword">int</span> M = (L+R)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(num&gt;=b[M]) L = M<span class="number">-1</span>;</div><div class="line">        <span class="keyword">else</span> R = M<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"len: %d\n"</span>, L);</div><div class="line">    <span class="keyword">return</span> L;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">        len=<span class="number">1</span>;</div><div class="line">        b[<span class="number">1</span>] = a[<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(a[i]&gt;=b[len])&#123;</div><div class="line">                b[++len] = a[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">int</span> pos = bi(a[i]);</div><div class="line">                b[pos] = a[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, len);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, b[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>线段树模板</title>
      <link href="/2018/01/17/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
      <url>/2018/01/17/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p>好多的知识都忘了，想当年随手撸主席树的，现在敲个裸线段树卡两小时。。。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1166" target="_blank" rel="external">hdu1166敌兵布阵</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定n个数，我们有下面的三中操作：</p><ul><li>查询一个区间内的和</li><li>一个点加上一个数</li><li>一个点减去一个数</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>裸的线段树，也可以用树状数组，树状数组更加的简洁。</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    <span class="keyword">int</span> sum;</div><div class="line">    Node():sum(<span class="number">0</span>)&#123;&#125;</div><div class="line">&#125;node[maxn&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> T, n;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    node[o].sum = node[o&lt;&lt;<span class="number">1</span>].sum+node[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l ,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    node[rt].l = l;</div><div class="line">    node[rt].r = r;</div><div class="line">    <span class="keyword">if</span>(l == r)&#123;</div><div class="line">        node[rt].sum = num[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</div><div class="line">    build(rt&lt;&lt;<span class="number">1</span>, l, mid);</div><div class="line">    build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</div><div class="line">    push_up(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> val, <span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(node[rt].l == node[rt].r)&#123;</div><div class="line">        node[rt].sum += val;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = (node[rt].l+node[rt].r)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(pos&lt;=mid)&#123;</div><div class="line">        update(rt&lt;&lt;<span class="number">1</span>, val, pos);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> update(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, val, pos);</div><div class="line">    push_up(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(l&lt;=node[rt].l &amp;&amp;r&gt;=node[rt].r)&#123;</div><div class="line">        <span class="keyword">return</span> node[rt].sum;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = (node[rt].l + node[rt].r)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="comment">//printf("%d\n", mid);</span></div><div class="line">    <span class="keyword">if</span>(l&lt;=mid)&#123;</div><div class="line">        ret+=query(rt&lt;&lt;<span class="number">1</span>, l, r);<span class="comment">//注意这里区间的位置，不用修改。</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(r&gt;mid)&#123;</div><div class="line">        ret+=query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, l, r);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</div><div class="line">        <span class="keyword">char</span> s[<span class="number">10</span>];</div><div class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line"><span class="comment">//        for(int i=1; i&lt;=30; i++)&#123;</span></div><div class="line"><span class="comment">//            printf("%d %d %d\n", node[i].l, node[i].r, node[i].sum);</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, tot++);</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s)&amp;&amp;<span class="built_in">strcmp</span>(s, <span class="string">"End"</span>)!=<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">int</span> a, b;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'Q'</span>)&#123;</div><div class="line">                <span class="comment">//printf("test: %d %d\n", a, b);</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(<span class="number">1</span>, a, b));</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'A'</span>)&#123;</div><div class="line">                update(<span class="number">1</span>, b, a);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> update(<span class="number">1</span>, b*(<span class="number">-1</span>), a);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="树状数组代码"><a href="#树状数组代码" class="headerlink" title="树状数组代码"></a>树状数组代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络爬虫</title>
      <link href="/2017/12/31/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
      <url>/2017/12/31/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<p>爬取有规则的数据结构，主要运用的是requests库，想学scrapy来爬。<br>下一个目标是爬取教务系统的成绩。<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="学习的来源"><a href="#学习的来源" class="headerlink" title="学习的来源"></a>学习的来源</h1><p><a href="https://github.com/wanshicheng/spider-tour" target="_blank" rel="external">一些项目的源代码</a><br><a href="http://www.cnblogs.com/barrier/p/5716209.html#3661072" target="_blank" rel="external">教务系统爬取成绩</a><br><a href="http://scapy.readthedocs.io/en/latest/#interactive-tutorial" target="_blank" rel="external">scrapy官方文档</a></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>一些需要注意的小示例：<br><a href="https://docs.python.org/2/library/re.html" target="_blank" rel="external">re模块的官方文档</a></p><h3 id="贪婪模式下的匹配"><a href="#贪婪模式下的匹配" class="headerlink" title="贪婪模式下的匹配"></a>贪婪模式下的匹配</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    str = <span class="string">'&lt;a&gt; b &lt;c&gt;'</span></div><div class="line">    pattern = re.compile(<span class="string">'&lt;.*&gt;'</span>, re.S)</div><div class="line">    items = re.findall(pattern, str)</div><div class="line">    print(items)</div><div class="line">    <span class="comment">#结果是&lt;a&gt;　b &lt;c&gt;，会尽可能的匹配长的结果</span></div><div class="line">``` </div><div class="line"><span class="comment">### 非贪婪模式下的匹配</span></div><div class="line">``` python</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    str = <span class="string">'&lt;a&gt; b &lt;c&gt;'</span></div><div class="line">    pattern = re.compile(<span class="string">'&lt;.*?&gt;'</span>, re.S)</div><div class="line">    items = re.findall(pattern, str)</div><div class="line">    print(items)</div><div class="line">    <span class="comment">#结果是的&lt;a&gt;</span></div></pre></td></tr></table></figure><h1 id="爬取最简单的网页信息"><a href="#爬取最简单的网页信息" class="headerlink" title="爬取最简单的网页信息"></a>爬取最简单的网页信息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(url)</span>:</span></div><div class="line">    response = requests.get(url)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</div><div class="line">            <span class="keyword">return</span> response.text</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    <span class="keyword">except</span> RequestException:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(html)</span>:</span></div><div class="line">    pattern = re.compile(<span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(\d+)&lt;/i&gt;.*?&lt;p class="name"&gt;.*?'</span></div><div class="line">                         <span class="string">'data-val=.*?&gt;(.*?)&lt;/a&gt;&lt;/p&gt;.*?class="star"&gt;(.*?)&lt;/p&gt;'</span>, re.S)</div><div class="line">    items = re.findall(pattern, html)</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</div><div class="line">        <span class="keyword">yield</span> &#123;</div><div class="line">            <span class="string">"rank"</span>: item[<span class="number">0</span>],</div><div class="line">            <span class="string">"name"</span>: item[<span class="number">1</span>].strip(),</div><div class="line">            <span class="string">"star"</span>: item[<span class="number">2</span>].strip()[<span class="number">3</span>:]</div><div class="line">        &#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></div><div class="line">    url = <span class="string">'http://maoyan.com/board/4?offset='</span>+str(offset)</div><div class="line">    html = get_page(url)</div><div class="line">    <span class="keyword">if</span> html == <span class="keyword">None</span>:</div><div class="line">        print(<span class="string">'haha\n'</span>)</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_page(html):</div><div class="line">        print(item)</div><div class="line">        write_to_file(item)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span><span class="params">(content)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(json.dumps(content, ensure_ascii=<span class="keyword">False</span>)+<span class="string">'\n'</span>)</div><div class="line">        f.close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        main(i*<span class="number">10</span>)</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 网络爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bitcoin</title>
      <link href="/2017/12/28/bitcoin/"/>
      <url>/2017/12/28/bitcoin/</url>
      <content type="html"><![CDATA[<p>我可能错过了发财的好机会了(微笑脸)<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br>今年五月的一段聊天记录。<br><img src="http://ww3.sinaimg.cn/large/0060lm7Tly1fmxkfcajf6j30mi17yqa8.jpg" alt=""></p><h1 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h1><p>一句话的概况：既能加密，又能解密。是一个<font color="#FF3030"><strong>互逆的过程</strong></font>。</p><h2 id="产生的背景"><a href="#产生的背景" class="headerlink" title="产生的背景"></a>产生的背景</h2><p>在网络上，我们要确定一起交易的记录，那么怎么来确定交易不是伪造的呢？还有的应用场景就是电子邮件的发送，http的通信等等发面，需要确认信息的来源是真是的而不是伪造的。</p><h3 id="真实的世界中的认证"><a href="#真实的世界中的认证" class="headerlink" title="真实的世界中的认证"></a>真实的世界中的认证</h3><p>一开始的想法是，模拟人的手签的字迹，但是计算机可以复制粘贴。于是这种方法不可行。</p><h3 id="数字世界中的认证"><a href="#数字世界中的认证" class="headerlink" title="数字世界中的认证"></a>数字世界中的认证</h3><p>于是，我们需要一些加密的算法，来确定这个交易确实是本人来做的。<br>每一个人在通信的时候，都会有一对数字<br>假设Alice手中有这样的数字\(P_A, S_A\),分别代表Alice的公钥和私钥，公钥可以给任何一个人，但是私钥是绝对的保密的。<br>同理，Bob为\(P_B, S_B\).至于密钥的产生原理，稍后讲解。</p><p>下面，我们来展示加密和解密的过程。<br>\(M = S_A(P_A(M))\)(1)</p><p>\(M = P_A(S_A(M))\)(2)</p><p>M代表的是信息（在处理的时候我们将其转化为二进制串）。\(S_A()和P_A()互为反函数\)，都可以通过两次函数的变换来得到原来的信息。但是上面的变换却有不同的用处。<br>(1)式的应用范围：<br>Bob想向Alice发送一封信息，并且只想让Alice读取。那么Bob先想办法得到Alice的公钥，然后用Alice的公钥进行加密。由于只有Alice有自己的密钥，因此只有自己才能解密。<br>(2)式的应用范围：<br>Alice想对其他人发送消息，怎么让别人相信就是她本人呢?用的就是第一个函数，Alice先对其进行加密。在信内容附上公钥，其他人就可以读取，并且确信这是Alice本人所写的了。<br>更多的应用：<br>在(2)的基础上,若<font color="#FF3030"><strong>Alice只想把信发给Bob</strong></font>该怎么办呢？方法很简单：<br>她先把数字签名加在信的末尾，这样能确定信是本人所写。然后对整体的内容用Bob的公钥进行加密，这样就只能Bob来读这样的一封信了。</p><h4 id="公钥与私钥的产生原理"><a href="#公钥与私钥的产生原理" class="headerlink" title="公钥与私钥的产生原理"></a>公钥与私钥的产生原理</h4><p>破解难度的核心：</p><blockquote><p>RSA加密系统的安全性主要来源于对大整数进行因式分解的困难性。</p></blockquote><p>公式的推导以及证明：<br>要设计一个函数，这个函数要满足上面得两个函数式子的性质就行了。由于涉及数论方面的很多的知识，等有时间或者心情好了再更新。</p><h4 id="hash-function和encrypt的区别"><a href="#hash-function和encrypt的区别" class="headerlink" title="hash function和encrypt的区别"></a>hash function和encrypt的区别</h4><p><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fmxkliyo9aj31hc0u07mz.jpg" alt=""><br>加密哈希函数：将任意长度的文本转化为固定长度的数字串，且稍有改动，整个数字串将发生巨大的变化，称为雪崩效应。<br>hash函数是<font color="#FF3030"><strong>不可逆</strong></font>的，将字符串作用与hash function之后，(将任意长度的文本串作用与hash function之后，得到固定长度的数字串)。得到数字之后，<font color="#FF3030"><strong>不能通过得到的结果推得原来的信息</strong></font>,正是因为它的不可逆，保证了后面nounce值的计算的复杂性。<br>而encrypt是一个可逆的过程，加密之后，可以通过另外的函数来解密。</p><h4 id="用Python的RSA模块来进行模拟通信"><a href="#用Python的RSA模块来进行模拟通信" class="headerlink" title="用Python的RSA模块来进行模拟通信"></a>用Python的RSA模块来进行模拟通信</h4><p>进行(1)式的模拟过程。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> rsa</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>(pa, sa) = rsa.newkeys(<span class="number">512</span>, poolsize = <span class="number">8</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pa</div><div class="line">PublicKey(<span class="number">7287399495366257413771058761739868049169593614102396165193288873805572387006976147311991494525422797626345758517789424374926210086557657000622100528243089</span>, <span class="number">65537</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sa</div><div class="line">PrivateKey(<span class="number">7287399495366257413771058761739868049169593614102396165193288873805572387006976147311991494525422797626345758517789424374926210086557657000622100528243089</span>, <span class="number">65537</span>, <span class="number">7027647519823044002742644381047673841884240749574828570675817478880418391900191613482469197184481730731244721399577942685962117567047869164370454616227493</span>, <span class="number">4450325811458253528888359581209252517270748630183017819682214575947560280752282431</span>, <span class="number">1637497972980627729843564573878420999729638817154052481198228091129519919</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>(pb, sb) = rsa.newkeys(<span class="number">512</span>, poolsize = <span class="number">8</span>) <span class="comment">#poolsize表示运算时的cpu的核心数。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">"Hello, Bob!"</span>;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>crypto = rsa.encrypt(message.encode(<span class="string">'utf-8'</span>), pb);<span class="comment">#加密的过程必须要将字符串转化为二进制的存储形式。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ans = rsa.decrypt(crypto, sb);</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ans.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">'Hello, Bob!'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pb.n</div><div class="line"><span class="number">8713105263433599534777847820591755626411909814336518766153432253803317287304054914848665740291595392716126580950997697917807332757088457074926547527045377</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pb.e</div><div class="line"><span class="number">65537</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sb.n</div><div class="line"><span class="number">8713105263433599534777847820591755626411909814336518766153432253803317287304054914848665740291595392716126580950997697917807332757088457074926547527045377</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = bin(sb.n);</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(str1)</div><div class="line"><span class="number">514</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(bin(sb.p))</div><div class="line"><span class="number">274</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(bin(sb.q))</div><div class="line"><span class="number">242</span></div></pre></td></tr></table></figure></p><p>说明：<br>可以看到公钥对\(P_B(n, e)\),n = (p-1)(q-1), e是一个较小的与n互质的数字。<br>私钥由\(S_B(n, e, p, q)\).<br>可以看出私钥可以推出公钥，但是公钥却不能推出私钥。原因就是大整数的因数分解的困难。<br>可以从后面看出n的二进制有514位，p,q位数差不多，都为两百多位。（这里说的位都是二进制下的位）</p><p>并且可以看出，当信息传输完成后，<font color="#FF3030"><strong>n值发生了改变</strong></font>，这种动态的处理方式是为了信息安全的考虑。</p><p>通信失败：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>crypto = crypto[:<span class="number">-1</span>] + <span class="string">b'X'</span>;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rsa.decrypt(crypto, sb)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"C:\python3\lib\site-packages\rsa\pkcs1.py"</span>, line <span class="number">237</span>, <span class="keyword">in</span> decrypt</div><div class="line">    <span class="keyword">raise</span> DecryptionError(<span class="string">'Decryption failed'</span>)</div><div class="line">rsa.pkcs1.DecryptionError: Decryption failed</div></pre></td></tr></table></figure></p><p>通过修改原理的加密的文件，结果自然是无法正常的解读了。</p><p>能传输的信息的限制：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">"longlongage_longlongage_longlongage_longlongage_longlongage_longlongage_longlongage_longlongage"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(message)</div><div class="line"><span class="number">95</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>crypto1 = rsa.encrypt(message.encode(<span class="string">'utf-8'</span>), pb)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"C:\python3\lib\site-packages\rsa\pkcs1.py"</span>, line <span class="number">170</span>, <span class="keyword">in</span> encrypt</div><div class="line">    padded = _pad_for_encryption(message, keylength)</div><div class="line">  File <span class="string">"C:\python3\lib\site-packages\rsa\pkcs1.py"</span>, line <span class="number">87</span>, <span class="keyword">in</span> _pad_for_encryption</div><div class="line">    <span class="string">' space for %i'</span> % (msglength, max_msglength))</div><div class="line">OverflowError: <span class="number">95</span> bytes needed <span class="keyword">for</span> message, but there <span class="keyword">is</span> only space <span class="keyword">for</span> <span class="number">53</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>可以看到我们的文本信息串是95个字节的，但是<font color="#FF3030"><strong>最多的传输串长为53个字节</strong></font>，剩余的11个字节用来存储其他的信息，所以无法进行传输。或者是更改密钥的长度，或者用其他的有效的方法，可以在后面的文档进行查阅。<a href="https://stuvel.eu/python-rsa-doc/usage.html#generating-keys" target="_blank" rel="external">文件内容的传输</a></p><p>进行(2)式的模拟: sign and verify<br>生动形象的原理图：<br><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1fmxclljxphj31hc0u0wr4.jpg" alt="sign and verify"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> rsa</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>(pubkey, prikey) = rsa.newkeys(<span class="number">512</span>);</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">"hello python, hello world"</span>;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>signature = rsa.sign(message.encode(<span class="string">'utf-8'</span>), prikey, <span class="string">'SHA-1'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rsa.verify(message.encode(<span class="string">'utf-8'</span>), signature, pubkey)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rsa.verify(<span class="string">"hello world"</span>.encode(<span class="string">'utf-8'</span>), signature, pubkey)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"C:\python3\lib\site-packages\rsa\pkcs1.py"</span>, line <span class="number">315</span>, <span class="keyword">in</span> verify</div><div class="line">    <span class="keyword">raise</span> VerificationError(<span class="string">'Verification failed'</span>)</div><div class="line">rsa.pkcs1.VerificationError: Verification failed</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rsa.verify(<span class="string">"hello python, hello world"</span>.encode(<span class="string">'utf-8'</span>), signature, pubkey)</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment">#数字签名生成的返回值是64个字节的字符串，即256位的二进制数。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>signature</div><div class="line"><span class="string">b'\x8c\xedy\xc6\xbb\x86\xa7f\x00\xc7\x8c\xdf\xc6Q\xfeE\xff\xcd\xba\x13iec\xaax\x1e2\x08\x83\x05\xd3\xdc&amp;jk\xc9\xfck\xe4\xb7\x0f\x985\x14\xfb=\\\xbd^b\xb3\xa5\x8829\xee\xed\x94~\x95\x181\xf3\xf0'</span></div><div class="line">len(signature)</div><div class="line"><span class="number">64</span></div><div class="line"></div><div class="line"><span class="comment">#传输的信息只用验证真假，因此任意长度的文本串都可以进行传输。因为加密哈希函数是将任意长度的文本串转化为固定长度的数字串，固定长度为256位。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"long_long_agolong_long_agolong_long_agolong_long_agolong_long_agolong_long_agolong_long_agolong_long_ago"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(str)</div><div class="line"><span class="number">104</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>signature = rsa.sign(str.encode(<span class="string">'utf-8'</span>), prikey, <span class="string">'SHA-256'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(signature)</div><div class="line"><span class="number">64</span></div></pre></td></tr></table></figure></p><p>注意仔细看代码里面的注释。sign and verify的概念在交易中十分的重要。</p><p>现在假设有黑客进行欺骗，他要得到正确的验证，并且传输给别人，让他人相信。由于持有私钥的人未进行相应的计算，黑客需要试\(2^{256}\)(signature有256位)种可能，才可能拿到正确的signature，这样的计算简直就是不可能。（具体可以看3blue1brown的视频）。因此，基于加密哈希函数的验证方式是十分的有效的。</p><h4 id="基于数字签名系统不足"><a href="#基于数字签名系统不足" class="headerlink" title="基于数字签名系统不足"></a>基于数字签名系统不足</h4><ul><li>可复制的：由于每一次的交易口令相同，那么就可以进行多次的复制，一个人原本只给一个人转账。但是经过多次的复制后，他就多次的给那个人转账。解决的方法是：将时间加入交易口令，进行密码哈希函数。或者是<font color="#FF3030"><strong>加入特殊的序列号，来证明交易的唯一性</strong></font>。</li><li>无法确认时间的先后顺序：一个人余额为0。他先收到100，后花了50.若不知到时间的先后顺序，那么别人怎么能让他花50呢？解决的方法：一个人要花50，必须要先经过一个中心，中心会收取的你的钱，然后在将钱发给接收方。然而这还是存在中心的管理，没有去中心化。</li><li>如何让他人相信这一笔交易的成立：这就需要第三方的信用中心的介入了。然而比特币的去中心化就是不希望依赖第三方。</li></ul><p>综合上面的问题，比特币的设计就是为了去解决上面的诸多的问题。比特币的设计简直就是精妙绝伦。<br>下面让我们走进比特币的世界，去感受它的精妙。</p><h2 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h2><blockquote><p>电子货币的本质就是交易的记录<br><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1fmxcna65m4j31340lg41s.jpg" alt=""></p></blockquote><h3 id="如何决定是否接受交易：工作量的证明"><a href="#如何决定是否接受交易：工作量的证明" class="headerlink" title="如何决定是否接受交易：工作量的证明"></a>如何决定是否接受交易：工作量的证明</h3><p>这其中就需要加密哈希函数了。每一个矿工都知道加密哈希函数，需要把为确认的交易收集起来放到一个块（block）中，一般块的交易记录不超过2400条。</p><p>提出的问题：每一个block的交易量都是变化的，怎么划分区块链的交易量？<br>是随机的划分吗，然后不断的改变nounce的值，一旦先确认，那么这些笔交易就会成立。交易量的大小和收入是成正比的。</p><p>这个时候在交易的列表的末尾加上一个nounce的东西。这个东西其实就是一个数，设为\(x\)。我们需要不断的改变这个数字，使之满足系统的条件，交易记录+nounce经过密码哈希函数处理后的固定长度的十六进制串中开通必须包含多少个0.</p><font color="#FF3030"><strong>一旦满足要求，就说明这个nounce值是满足要求的，那么这个矿工就会广而告之其他的矿工这个nounce值。因为密码哈希函数的计算是十分快的，那么其他的矿工通过广播，如果自己的账单加上对方的nounce值，满足系统的要求，相当于这个矿工的账单和广播的矿工的账单是一致的，并且进行了一次确认。</strong></font><p><img src="http://ww3.sinaimg.cn/large/0060lm7Tly1fmxd40wko9j31130g3aam.jpg" alt=""><br>可见上面的图，它的确认数为2，因为这个矿区是比较新的。确认数=后面接的block的个数，个数一般超过6个即可认为交易的准确性。（这笔交易没有小费）</p><h3 id="接受交易"><a href="#接受交易" class="headerlink" title="接受交易"></a>接受交易</h3><p>假若现在有一个黑客想要造假，那么他要不断的去维护那个最长的区块链，因为每一个人只相信那个区块链中最长的交易记录。<br>那么，他必须有足够的财力，最少拥有全网算力的50%，才有可能去随心所欲的去修改交易的记录。然而实际上这是不可能的，随着越来越多的网络矿工的出现，去中心化，这几乎是不可能的。全网最大的算力池是slushpool，它集成的是世界的计算机的计算。</p><h4 id="产币的时间间隔"><a href="#产币的时间间隔" class="headerlink" title="产币的时间间隔"></a>产币的时间间隔</h4><p><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fmxef4zw5aj31hc0u0nes.jpg" alt=""><br>一般为10分钟左右，因为全网的算力在不断的加强，因此系统会<font color="#FF3030"><strong>调整密码哈希函数得到的十六进制串前置0的个数</strong></font><br><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1fmxdl4csbsj311q0dw0td.jpg" alt=""><br>可以从这张图上看出，它是一个16进制的数字，要求有19个十六进制的0，需要猜\(16^{19}\)次才能得到正确的nounce值。我们可以查看区块一的值，发现只需要几个前置0就可以了，可见全网算力增加之多。<br>名词解释：<br>block reword:发现区块的奖励，每隔四年降为原来的一半，2009~2012:50BTC，2012~2016:25BTC，2016~2020:12.5BTC，依次类推<br>timestamp:基于时间戳的交易确认<br>Merkle Root:一种存储的树形结构，具体还不是很清楚<br>previous block, next block:形成链状<br>nounce：矿工们苦苦寻找的值</p><h3 id="如何确定交易的顺序-防止double-spending：区块链"><a href="#如何确定交易的顺序-防止double-spending：区块链" class="headerlink" title="如何确定交易的顺序,防止double-spending：区块链"></a>如何确定交易的顺序,防止double-spending：区块链</h3><blockquote><p>We define an electronic coin as a chain of digital signatures</p><p>要验证一次交易，他人是否透支，就需要知道所有的交易记录。</p></blockquote><p>第二条比特币是用区块链来完成的。</p><h4 id="区块链的构成"><a href="#区块链的构成" class="headerlink" title="区块链的构成"></a>区块链的构成</h4><p><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fmxe3vxt49j31hc0u0tmt.jpg" alt=""><br>从图中可以看出，一个区块中有前一块的hash value，交易的signature，nounce值。<br>好处：</p><ol><li>一旦某块的交易被更改，那么这一块的nounce值将会发生改变，这一块的hash value会发生改变，后面的块也要重新计算nounce值。这样的计算量是十分巨大的，因此黑客篡改根本是不可能。</li><li>若交换前后两块的顺序，也会发生连锁反应，这也是不可能发生的事情的。</li></ol><p>这样就很好的确定的交易的准确性，并且确认交易的顺序了。</p><h4 id="一笔交易中包含的信息："><a href="#一笔交易中包含的信息：" class="headerlink" title="一笔交易中包含的信息："></a>一笔交易中包含的信息：</h4><p><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fmxk8gz0fcj30qp0kxq3o.jpg" alt=""><br>区块链的设计很好的防止了double-spending的发生，<br>当你需要花钱的时候，你需要先将你账户中的比特币信息发送出去，这里的信息包含了：</p><ul><li>你得到的比特币的来源(发掘区块的奖励无来源)</li><li>之前交易信息（前一个拥有者）的电子签名。(in)</li><li>受币人的公钥,交易额等等(out)</li></ul><p>我们有必要说明交易的输入和输出，下面是我直接复制粘贴的说明：<br><a href="http://blog.csdn.net/taifei/article/details/73735289" target="_blank" rel="external">比特币交易得输入和输出</a></p><blockquote><p>当你支出(给)一笔钱的时候,首先在交易单中就要描述清楚你要支出(out)的钱的收入来源 (in),然后在支出(out)项中,指明要支出的金额,以及通过脚本的形式写明接收者的公钥,然后用自己的私钥签名(scriptSig)认可该笔交易,最后将交易单广播到网络.</p><p><strong>收入来源(in):</strong><br>Previous tx: 为收入来源交易单的散列值,也就是待支付的钱是谁给你的,经常会有多个收入来源被列在交易单中.<br>index: 指明是收入来源交易单中具体哪一个out,也就是Previous tx交易单中的out索引值(因为out也可以有多个)。<br>scriptSig: 拥有者对该交易的ECDSA签名认可。</p><p><strong>接收对象(out):</strong><br>Value: 发送的币值,以Satoshi 为单位,1BTC = 100,000,000 Satoshi<br>scriptPubKey: 接收方的公钥脚本。</p><p><strong>in与out的关系:</strong><br>每一笔交易,out的总额应该等于in的总额。但是,在这个交易单里,只会有out的Value,没有in的Value,而是通过in的Pervious与index,追溯到上一个交易单的某一个out,获得Value。</p><font color="#FF3030"><strong>一次send bitcoin,剩下的钱,应该out给自己,否则这个钱就丢了。</strong></font></blockquote><p>情况列举:</p><ul><li>我有10个BTC,是某一次交易获得的,我要送给朋友A,10个BTC。这时候,有一个in,一个out。</li><li>我有10个BTC,是某一次交易获得的,我要送给朋友A,5个BTC,这时候,有一个in,两个out,一个指向朋友5个BTC,一个指向我自己,得到剩下的5个BTC。</li><li>我有10个BTC,是以前的两次交易获得的,我要送给朋友A,10个BTC,这时候,有两个in,一个out。</li><li>我有10个BTC,是以前的两次交易获得的,其中一次获得了6个BTC,另一次获得了4个BTC,我要送给我的朋友7个BTC,这时候,有两个in,两个out。</li></ul><p>而这样的一笔交易将会被广播出去，等待矿工去验证，一旦验证成功，那么新的信息会加入到比特币的认证信息中，表明当前持有者，和之前的持有者的记录。这样就有效的避免了double-spending的发生，因为比特币的主人发生了改变，那么依附的信息也会发生改变。</p><h3 id="货币的流通"><a href="#货币的流通" class="headerlink" title="货币的流通"></a>货币的流通</h3><p>收益来源：<br>矿工发现新的矿区，系统奖励<br>确定交易，用户的小费，激励矿工开确认自己的交易信息。</p><h6 id="总额"><a href="#总额" class="headerlink" title="总额"></a>总额</h6><p>其中系统的小费每隔四年会降为原来的一半。<br>总的货币发行量：<br>\(6*24*365*4*(50+25+12.5+\cdots) = 210240*\frac{50*(1-(0.5)^n)}{1-0.5} = 21000000\)<br>即货币的发行量不超过2100万。</p><h6 id="停止产币的时间"><a href="#停止产币的时间" class="headerlink" title="停止产币的时间"></a>停止产币的时间</h6><p>比特币的最小的单位为\(10^{-8}\)BTC,因此进过33个4年就会不再产币，即\(2009+4*33=2141\)年不再产币.但是资金还是可以流通的，因为小费机制的存在。</p><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>前面仅仅模拟的是比特币之间的转账，然而比特币还有其他的功能，而这些功能是用比特币的脚本语言来完成的。</p><h1 id="比特币核心的总结"><a href="#比特币核心的总结" class="headerlink" title="比特币核心的总结"></a>比特币核心的总结</h1><p><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fmxkkpj5paj31hc0u0tjy.jpg" alt=""><br>我们再不厌其烦的整理一下思维：<br>1、 假如仅仅使用电子签名，我们可以确定交易确实是本人。但是，存在重复花一笔钱的危险，因为假设Alice几乎同时向Bob和Petter花了相同的一笔钱，那么到底这笔钱到底归谁呢？此刻，必须存在第三方，来确认交易的顺序，若先支付给Bob,那么就不能再支付给Petter了。<br>2、 能不能试图消除第三方的存在呢？可以，我们用区块链来确认交易的顺序，通过工作量的证明确认交易的有效性，这就产生了比特币。</p><h1 id="资料来源"><a href="#资料来源" class="headerlink" title="资料来源"></a>资料来源</h1><p><a href="https://stuvel.eu/python-rsa-doc/usage.html#generating-keys" target="_blank" rel="external">RSA模块文档</a><br><a href="https://segmentfault.com/q/1010000002769065" target="_blank" rel="external">RSA模块的实战</a><br><a href="http://www.michaelnielsen.org/ddi/how-the-bitcoin-protocol-actually-works/" target="_blank" rel="external">How the Bitcoin protocol actually works</a><br><a href="https://blockexplorer.com" target="_blank" rel="external">中本聪的最初的论文</a><br><a href="https://blockexplorer.com/blocks" target="_blank" rel="external">bitcoin实时交易的网站</a><br><a href="http://www.cmd5.com/hash.aspx" target="_blank" rel="external">各种加密哈希函数的加密解密</a><br><a href="http://www.wanbizu.com/baike/201610257752.html" target="_blank" rel="external">bitcoin交易的收费标准</a></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1><p>中间的公式推导过程<br>比特币划分block的交易量是怎么确认的？是随机产生的吗？<br>可能真的是随机化产生的：<br><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1fmz0vye28nj30u01hcdma.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bitcoin </tag>
            
            <tag> 数字签名 </tag>
            
            <tag> 密码哈希函数 </tag>
            
            <tag> 工作量证明 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>近期要做的事情</title>
      <link href="/2017/12/26/%E8%BF%91%E6%9C%9F%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/"/>
      <url>/2017/12/26/%E8%BF%91%E6%9C%9F%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/</url>
      <content type="html"><![CDATA[<p>一些自己的小提示而已，希望不要忘了。<br><a id="more"></a><br>algorithm<br><del>RMQ以及RMQ求解最近公共祖先</del><br><del>数独的四道题目</del><br><del>二维线段树</del><br>敲一遍图论的算法，顺便背一背模板<br><del>字符串的后缀数组复习</del><br><del>hash的补充，康拓展开</del><br>最近点对、最远点对</p><h1 id="待点亮的技能点"><a href="#待点亮的技能点" class="headerlink" title="待点亮的技能点"></a>待点亮的技能点</h1><h2 id="待补遗"><a href="#待补遗" class="headerlink" title="待补遗"></a>待补遗</h2><p>可并堆<br>双hash,hash测试<br>线段树合并</p><ul><li>Scapegoat Tree 替罪羊树<br>汀老师的三元环<br>分数规划<br>树链剖分<br>动态树（LCT）<br>虚树<br>容斥原理与莫比乌斯反演<br><strong>花式DP</strong><br>斯坦纳树<br>rope<br>cdq分治与整体二分<br>三分的总结</li></ul><h2 id="基本的算法"><a href="#基本的算法" class="headerlink" title="基本的算法"></a>基本的算法</h2><p>整体二分和CDQ分治(偏序问题，以及高维的偏序问题)<br>各种DP套路</p><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p>莫比乌斯反演<br>生成函数的应用<br>FFT加快计算（等信号填坑？）<br>单纯形算法<br>零和博弈论</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>树链剖分<br>替罪羊树、KDtree<br>跳舞链来解决数独问题<br>左偏数合并两个堆<br>动态查询区间的第k大的数字</p><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><p>网络流的各种变形（网络流24题）<br>汀老师中的三元环是个啥？</p><h2 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h2><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>拓展KMP</p><h1 id="临时加的一些训练提示"><a href="#临时加的一些训练提示" class="headerlink" title="临时加的一些训练提示"></a>临时加的一些训练提示</h1><blockquote><p>15计科张明远 2018/06/03 22:52:19<br>我觉得提升最快的还是争取把每套题的每道都搞定。<br>15计科张明远 2018/06/03 22:53:32<br>另一方面就是训练以及补题的时候，队里每个人都要把自己当 carry<br>15计科张明远 2018/06/03 22:53:52<br>每个题可以只有一个人补掉，但是其他人也都得会思路<br>15计科张明远 2018/06/03 22:54:12<br>很多题目都是多个方面结合的，需要配合着来做。<br>15计科张明远 2018/06/03 22:55:32<br>敝队就是，我一人写几乎所有题。。<br>15计科张明远 2018/06/03 22:55:34<br>那个团队配合看几场后的配合。<br>15计科张明远 2018/06/03 22:55:46<br>他们帮我想一些思路，然后我做些补充<br>15计科张明远 2018/06/03 22:55:49<br>然后我写<br>15计科张明远 2018/06/03 22:56:17<br>不同队伍可以有不同的打法。<br>15计科张明远 2018/06/03 22:56:33<br>去年我去西安邀请赛<br>15计科张明远 2018/06/03 22:56:34<br>打的是双核<br>15计科张明远 2018/06/03 22:56:48<br>就是有个能力极强的，国家队水平的<br>15计科张明远 2018/06/03 22:56:53<br>他一个人一条线做题<br>15计科张明远 2018/06/03 22:56:58<br>我和另一个人配合做题<br>14−计科−赤耳 2018/06/03 22:57:09<br>收到！<br>刘森 2018/06/03 22:57:21<br>最后的梦想就是cf冲分了 比赛是不能打了<br>15计科张明远 2018/06/03 22:57:31<br>相对稳的话，还是得有一个主代码手<br>15计科张明远 2018/06/03 22:57:41<br>然后有一个人非常擅长出数据<br>15计科张明远 2018/06/03 22:57:46<br>保证正确率<br>15计科张明远 2018/06/03 22:58:12<br>我们队去年暑期训多校的时候，基本平均每题WA 一道两回<br>15计科张明远 2018/06/03 22:58:16<br>之后的时候，就是<br>15计科张明远 2018/06/03 22:58:28<br>哪怕再简单，队友必须造一两组数据<br>15计科张明远 2018/06/03 22:58:34<br>过了再交<br>15计科张明远 2018/06/03 22:58:44<br>然后去年区域赛我们队的准确率久很恐怖了<br>15计科张明远 2018/06/03 22:58:56<br>我写的24题只wa了3发<br>15计科张明远 2018/06/03 22:59:00<br>队<br>15计科张明远 2018/06/03 22:59:01<br>对<br>15计科张明远 2018/06/03 22:59:10<br>另一个需要的能力是<br>15计科张明远 2018/06/03 22:59:16<br>极强的debug/辅助选手<br>15计科张明远 2018/06/03 22:59:22<br>如果核心做题卡题了<br>15计科张明远 2018/06/03 22:59:31<br>一种思路是，有另一个核心上去切题<br>15计科张明远 2018/06/03 22:59:47<br>另一种思路是，辅助上去debug，核心去切另一个题<br>15计科张明远 2018/06/03 23:00:08<br>我大二的时候定位是辅助。。<br>15计科张明远 2018/06/03 23:00:17<br>2016HK 区域赛<br>15计科张明远 2018/06/03 23:00:31<br>我们队就是每题都卡<br>15计科张明远 2018/06/03 23:00:53<br>然后我每篇代码都完整读一遍，把不理解的地方交流，然后构造数据，帮忙debug 了3 个题<br>15计科张明远 2018/06/03 23:01:14<br>这样主要的好处是，核心不怕卡题<br>15计科张明远 2018/06/03 23:01:25<br>可以继续往后做，不会受影响<br>15计科张明远 2018/06/03 23:01:35<br>相信辅助能帮自己找到错<br>15计科张明远 2018/06/03 23:01:42<br>这样不容易崩<br>15计科张明远 2018/06/03 23:03:17<br>另一个就是训练的时候敢于去信任队友。。训练是一个长期的过程<br>NE没队友 2018/06/03 23:03:29<br>15计科张明远 2018/06/03 23:03:29<br>不能只注重于当前的比赛结果<br>15计科张明远 2018/06/03 23:03:40<br>我大三换了个队友，大二那个队友出国了<br>NE没队友 2018/06/03 23:04:05<br>培养长期队友?<br>15计科张明远 2018/06/03 23:04:07<br>然后没人回计算几何，就培养的新队友<br>15计科张明远 2018/06/03 23:04:19<br>暑期训练前N场<br>NE没队友 2018/06/03 23:04:43<br>看到了<br>15计科张明远 2018/06/03 23:04:47<br>都把机时给他让他去拼中期计算几何题<br>NE没队友 2018/06/03 23:04:58<br>一个月20场..<br>15计科张明远 2018/06/03 23:05:12<br>然后我帮助debug，虽然一开始的十几场<br>15计科张明远 2018/06/03 23:05:17<br>都没现场过过。<br>15计科张明远 2018/06/03 23:05:47<br>但是还是很信任的把时间给他<br>15计科张明远 2018/06/03 23:06:09<br>然后比赛完补/练计算几何更多的题<br>15计科张明远 2018/06/03 23:06:21<br>最后跨过去这道坎了<br>15计科张明远 2018/06/03 23:06:25<br>就越来越有自信<br>刘森 2018/06/03 23:06:35<br>my的话可以分享给其他人吗<br>刘森 2018/06/03 23:06:41<br>感觉很强<br>15计科张明远 2018/06/03 23:06:48<br>当然OK啦。<br>15计科张明远 2018/06/03 23:07:14<br>尤其是最后有一场大专题的那次网络赛<br>15计科张明远 2018/06/03 23:07:27<br>我们当时那场排名牵扯出战机会<br>15计科张明远 2018/06/03 23:07:32<br>大专<br>15计科张明远 2018/06/03 23:07:40<br>对<br>15计科张明远 2018/06/03 23:07:48<br>那场有两道计算几何好像<br>15计科张明远 2018/06/03 23:08:08<br>当时我就和队友一起，他写，我坐他旁边跟着看<br>15计科张明远 2018/06/03 23:08:12<br>当时的情况就是<br>15计科张明远 2018/06/03 23:08:17<br>一次WA都不行<br>15计科张明远 2018/06/03 23:08:24<br>然后他顶着压力最后AK了<br>15计科张明远 2018/06/03 23:08:32<br>我们去年拿到了两个ICPC的出战机会<br>15计科张明远 2018/06/03 23:08:46<br>嗯嗯。<br>15计科张明远 2018/06/03 23:08:59<br>所以比赛的时候不能只专注一场的得失<br>NE没队友 2018/06/03 23:09:20<br>这一次 没写出来 下次还是你 总会有收获的<br>15计科张明远 2018/06/03 23:09:23<br>一方面要探索打法，一方面也要去锻炼每个人的赛场的素质<br>15计科张明远 2018/06/03 23:09:27<br>嗯。<br>NE没队友 2018/06/03 23:10:10<br>不能说你这次计算几何不行 下次就只我计算几何<br>15计科张明远 2018/06/03 23:10:26<br>嗯，<br>15计科张明远 2018/06/03 23:10:32<br>尤其是计算几何和数据结构<br>15计科张明远 2018/06/03 23:10:43<br>需要细心和很强的debug 能力<br>15计科张明远 2018/06/03 23:10:51<br>平时做题的时候可能很顺利<br>15计科张明远 2018/06/03 23:11:07<br>但是到比赛的时候可能会由于卡题而崩心态</p></blockquote><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><blockquote><ol><li>每套题都搞懂，其实就是补知识的漏洞，了解每道题的思路</li></ol></blockquote><ol><li><p>有人会造数据，保证正确率</p></li><li><p>辅助可以debug,以至于不卡题</p></li><li><p>相信队友能出题：“这一次 没写出来 下次还是你 总会有收获的”</p></li><li><p>最后，要细心和有很强的debug能力，还不能读错题</p></li></ol>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html入门</title>
      <link href="/2017/12/18/html%E5%85%A5%E9%97%A8/"/>
      <url>/2017/12/18/html%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>html标签的含义<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="查阅界面"><a href="#查阅界面" class="headerlink" title="查阅界面"></a>查阅界面</h1><p><a href="http://www.w3school.com.cn/html/html_elements.asp" target="_blank" rel="external">学习的网站</a><br><a href="http://www.w3school.com.cn/tags/index.asp" target="_blank" rel="external">完整的网站</a></p><h3 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HTML 标题（Heading）是通过 <span class="tag">&lt;<span class="name">h1</span>&gt;</span> - <span class="tag">&lt;<span class="name">h6</span>&gt;</span> 等标签进行定义的。</div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTML 段落是通过 \\<span class="tag">&lt;<span class="name">p\\</span>&gt;</span> 标签进行定义的。</div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is another paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="HTML-链接"><a href="#HTML-链接" class="headerlink" title="HTML 链接"></a>HTML 链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HTML 链接是通过 \<span class="tag">&lt;<span class="name">a\</span>&gt;</span> 标签进行定义的</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.w3school.com.cn"</span>&gt;</span>This is a link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="HTML-图像"><a href="#HTML-图像" class="headerlink" title="HTML 图像"></a>HTML 图像</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HTML 图像是通过 <span class="tag">&lt;<span class="name">img</span>&gt;</span> 标签进行定义的</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"w3school.jpg"</span> <span class="attr">width</span>=<span class="string">"104"</span> <span class="attr">height</span>=<span class="string">"142"</span> /&gt;</span></div></pre></td></tr></table></figure><h3 id="空的HTML元素"><a href="#空的HTML元素" class="headerlink" title="空的HTML元素"></a>空的HTML元素</h3><blockquote><p>没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。<br><br> 就是没有关闭标签的空元素（<br> 标签定义换行）。<br>在 XHTML、XML 以及未来版本的 HTML 中，所有元素都必须被关闭。<br>在开始标签中添加斜杠，比如 <br>，是关闭空元素的正确方法，HTML、XHTML 和 XML 都接受这种方式。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">即使 <span class="tag">&lt;<span class="name">br</span>&gt;</span> 在所有浏览器中都是有效的，但使用 <span class="tag">&lt;<span class="name">br</span> /&gt;</span> 其实是更长远的保障.</div></pre></td></tr></table></figure><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>标签不区分大小写，存在漏洞。<br>还有在写这篇文章的时候，尖括号不能转移显示简直有毒。所以这一篇的文章写的风格很诡异，全是在代码引用块中进行的。</p>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP入门</title>
      <link href="/2017/12/17/PHP%E5%85%A5%E9%97%A8/"/>
      <url>/2017/12/17/PHP%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>php+apache+mysql大法好.<br>被网络对抗作业逼疯（吐血<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><a href="http://php.net" target="_blank" rel="external">帮助手册</a></p><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$var = <span class="number">100</span>;</div><div class="line">$var2 = <span class="number">200</span>;</div><div class="line"><span class="keyword">const</span> var3 = <span class="number">300</span>;</div><div class="line"><span class="keyword">echo</span> $var+$var2;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line"><span class="keyword">echo</span> var3;</div><div class="line">define(<span class="string">'var4'</span>, <span class="number">9000</span>);<span class="comment">//宏定义</span></div><div class="line"><span class="keyword">echo</span> var4;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><h2 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($name)</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'hello php&lt;br&gt;'</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'hello tbl&lt;br&gt;'</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'hello '</span>.$name.<span class="string">'&lt;br&gt;'</span>;<span class="comment">//字符串的连接是用.来的</span></div><div class="line">    <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">muti_var</span><span class="params">($a, $b)</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'a = '</span>.$a.<span class="string">' b = '</span>.$b.<span class="string">'&lt;br&gt;'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">muti_var</span><span class="params">($a, $b)</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"a = $a, b = $b"</span>;<span class="comment">//必须是双引号！单引号全部默认是字符串</span></div><div class="line">&#125;</div><div class="line">test(<span class="string">'baby'</span>);</div><div class="line">muti_var(<span class="number">10</span>, <span class="number">20</span>);</div></pre></td></tr></table></figure><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">level</span><span class="params">($score)</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> $score/<span class="number">10</span>;</div><div class="line">    $result = <span class="string">'bad'</span>;</div><div class="line">    <span class="keyword">switch</span> ((int)($score/<span class="number">10</span>))&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">10</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">9</span>:</div><div class="line">            $result = <span class="string">'great'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">            $result = <span class="string">'not bad!'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            $result = <span class="string">'bad'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $result;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> level(<span class="number">99</span>);</div></pre></td></tr></table></figure><h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$img = imagecreate(<span class="number">400</span>, <span class="number">300</span>);</div><div class="line">imagecolorallocate($img, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</div><div class="line">imageellipse($img, <span class="number">200</span>, <span class="number">200</span>, <span class="number">50</span>, <span class="number">50</span>, imagecolorallocate($img, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</div><div class="line">header(<span class="string">'Content-type: image/png'</span>);<span class="comment">//mime type对应表</span></div><div class="line">imagepng($img);</div></pre></td></tr></table></figure><h1 id="登陆系统"><a href="#登陆系统" class="headerlink" title="登陆系统"></a>登陆系统</h1><h2 id="前端的显示界面"><a href="#前端的显示界面" class="headerlink" title="前端的显示界面"></a>前端的显示界面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"test.php"</span> <span class="attr">method</span> = <span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>name:</div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"text"</span> <span class="attr">name</span> = <span class="string">"name"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>password:</div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"password"</span> <span class="attr">name</span> = <span class="string">"password"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"submit"</span> <span class="attr">value</span> =<span class="string">"login"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="后端连接数据库"><a href="#后端连接数据库" class="headerlink" title="后端连接数据库"></a>后端连接数据库</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by PhpStorm.</span></div><div class="line"><span class="comment"> * User: 宝宝天龙</span></div><div class="line"><span class="comment"> * Date: 2017/12/18</span></div><div class="line"><span class="comment"> * Time: 14:20</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'name'</span>])) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'you don\'dont type anything man.'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>])) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'you don\'dont type anything man.'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$name_get = $_POST[<span class="string">'name'</span>];</div><div class="line">$password_get = $_POST[<span class="string">'password'</span>];</div><div class="line"><span class="comment">//printf("%s %s", $name_get, $password_get);</span></div><div class="line">$conne = @mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">''</span>);</div><div class="line"><span class="keyword">if</span>($conne)&#123;</div><div class="line"></div><div class="line">    mysqli_select_db($conne, <span class="string">'test'</span>);</div><div class="line"><span class="comment">//    $str = "'s Hertogenbosch";</span></div><div class="line"><span class="comment">//    echo $str."&lt;br&gt;";</span></div><div class="line"><span class="comment">//    $name_get = mysqli_escape_string($conne, $str);</span></div><div class="line"><span class="comment">//    echo $name_get.'&lt;br&gt;';</span></div><div class="line">    $result = mysqli_query($conne, <span class="string">"SELECT * FROM test where name = '$name_get' "</span>);</div><div class="line"><span class="comment">//    print_r($result.'&lt;br&gt;');</span></div><div class="line"><span class="comment">//    $result_arr = mysqli_fetch_assoc($result);</span></div><div class="line"><span class="comment">//    print_r($result_arr);</span></div><div class="line"><span class="comment">//    echo '&lt;br&gt;';</span></div><div class="line"><span class="comment">//    echo ''.mysqli_num_rows($result);</span></div><div class="line">    $tot = mysqli_num_rows($result);</div><div class="line"><span class="comment">//    print_r($result_arr['name']);</span></div><div class="line">    $flag = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>; $i &lt; $tot; $i++)&#123;</div><div class="line">        $result_arr = mysqli_fetch_assoc($result);</div><div class="line">        <span class="keyword">if</span> ($result_arr[<span class="string">'name'</span>] == $name_get &amp;&amp; $result_arr[<span class="string">'password'</span>] == $password_get)&#123;</div><div class="line">            $flag = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>($flag == <span class="keyword">true</span>)&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"login successfully!"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"unsuccessfully!"</span>.<span class="string">'&lt;br&gt;'</span>.<span class="string">"hey man"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">'未连接数据库&lt;br&gt;'</span>;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>标记重捕法后面蕴含的概率论知识</title>
      <link href="/2017/12/06/%E6%A0%87%E8%AE%B0%E9%87%8D%E6%8D%95%E6%B3%95%E5%90%8E%E9%9D%A2%E8%95%B4%E5%90%AB%E7%9A%84%E6%A6%82%E7%8E%87%E8%AE%BA%E7%9F%A5%E8%AF%86/"/>
      <url>/2017/12/06/%E6%A0%87%E8%AE%B0%E9%87%8D%E6%8D%95%E6%B3%95%E5%90%8E%E9%9D%A2%E8%95%B4%E5%90%AB%E7%9A%84%E6%A6%82%E7%8E%87%E8%AE%BA%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>老师上课讲的一个小例子，我对其进行了完善。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>现在从池塘里面捕捉1000条鱼，并且在它们的尾巴上做上标记，放回。<br>一段时间后，再从池塘里面捕捉800条鱼，发现了80条做了标记的鱼。<br>问池塘里面一共有多少条鱼？</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>由于在第二次捕捉中，标记好了的鱼占了10%，那么1000条鱼就占了总数的10%，答案是10000.<br>嗯，本篇博文到此结束，感谢大家的阅读。</p><h1 id="最大似然估计"><a href="#最大似然估计" class="headerlink" title="最大似然估计"></a>最大似然估计</h1><p>怎么可能就这么结束了<br>上面的推理绝对是没错的，只是展示求解的另外的一个方面。</p><p>我们进一步的挖掘直觉中的数学原理。<br>我们假设池塘中有N条鱼。由最大似然的相关定义：<br>我们要确定N，使P(X = 80)的概率最大：<br>\(P(X = 80) = {800 \choose 80}{N-1000 \choose 720}/{N \choose 800}\)</p><p>列出相应的不等式，假设最值是k:<br>\(\frac{k-1000 \choose 720}{k \choose 800} \ge \frac{k-1-1000 \choose 720}{k-1 \choose 800}\).①<br>\(\frac{k-1000 \choose 720}{k \choose 800} \ge \frac{k+1-1000 \choose 720}{k+1 \choose 800}\).②</p><p>化简上面的两个式子， 得：<br>\(9999\le k \le 10000\)<br>与我们的结果吻合的很好，也说明也极大似然性的正确性。</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最大似然估计法(maximum likehood estimate) </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小美赛终于结束了</title>
      <link href="/2017/12/04/%E5%B0%8F%E7%BE%8E%E8%B5%9B%E7%BB%88%E4%BA%8E%E7%BB%93%E6%9D%9F%E4%BA%86/"/>
      <url>/2017/12/04/%E5%B0%8F%E7%BE%8E%E8%B5%9B%E7%BB%88%E4%BA%8E%E7%BB%93%E6%9D%9F%E4%BA%86/</url>
      <content type="html"><![CDATA[<p>将近一周没有更新博客了，因为最近四天都在做数模比赛。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="0x00-preface"><a href="#0x00-preface" class="headerlink" title="0x00 preface"></a>0x00 preface</h1><p>比赛前临时学了一点东西，是时候在比赛的时候展示自学能力了。</p><h1 id="0x01-day1"><a href="#0x01-day1" class="headerlink" title="0x01 day1"></a>0x01 day1</h1><p>不知道为什么数模协会实验室开放的时间是下午的一点。由于是早上八点公布试题，于是妥妥的上午得自己找地方讨论问题。经过一番周折，终于借到了图书馆的研讨室（仿佛开启了学校的又一项新功能）。拿到题目，分别是如下的内容：</p><ul><li>A.全球气候与飓风的问题</li><li>B.邮件的特征识别问题</li><li>C.全球人口贩卖问题，包括识别潜在人群，推测可能发生的地点，以及切断贩卖的网络。</li></ul><p>一开始就把B题剔除了，因为就是一个赤裸裸的是机器学习的算法，有训练的样本。然而机器学习真的是一窍不通啊，更不用谈算法的设计了。<br>于是目标选题范围确定A,C.一开始个人更倾向于选择C题，因为第一问分类出潜在的可能被贩卖的人群，这是有数据的，感觉可以使用分类的方法来完成。然后第三问就是一个图论的模型，我们只要切断关键的节点就可以了。虽然没有数据，但是我们可以进行不同人群的分类，构建社会的关系网络，从而得出相应的结论。然而第二问的数据收集并且进行地点判断，简直无从思考。虽然网上已经有一些交易场所的统计了，比如性交易之类的地点等等，但是好像就是没有原始的数据分析。</p><p>于是，稳妥起见，就选择了A题。上午初步选定题目之后，于是下午就到数模实验室收集相应的数据，准备进行定量的分析。</p><p>晚上也是在不断的收集相关的论文，试图建立初步的分析的模型。进展可能有一点慢？</p><h1 id="0x02-day2"><a href="#0x02-day2" class="headerlink" title="0x02 day2"></a>0x02 day2</h1><p>这一天主要完成了问题一的求解。因为看了一篇文章BP神经网络完成样本的训练，并且进行相应的训练。训练的本质就是调节参数使方差最小，于是我就和队友们讨论了一下我的思路，建立相应的方差模型，从而进行相应的最佳周期的求解。晚上我又试了一下《数学建模算法》里面另外的一个方差模型，效果不是很好，组间的差异较大。</p><h1 id="0x03-day3"><a href="#0x03-day3" class="headerlink" title="0x03 day3"></a>0x03 day3</h1><p>本来是应该应该进行第二问的求解。但是论文小姐姐跟我讲了一个时间序列的模型，于是学习了一波理论，感觉不是很懂，能进行基本的时间序列的预测。<br>这一天建模小姐姐完成了第二问的模型的建立（主成分分析法）和第三问的定性模型的建立，而我则是全程划水的状态。。。晚上的时候研究Matlab工具性的时候无意发现了一个衡量拟合程度的参数，妥妥的将其作为定量化分析的模型。然而曲线有三种不同的趋势状态，完全没有规律可言。。。于是就要发挥我们强大的分析能力来找一波规律了。嗯就是这么简单粗暴。（逃</p><p>晚上回去的时候，我无意间发现了模型二的一个漏洞，需要将乘法的衡量标准改为加法的衡量标准，（虽然没有什么依据qaq）</p><h1 id="0x04-day4"><a href="#0x04-day4" class="headerlink" title="0x04 day4"></a>0x04 day4</h1><p>早上和队友们讨论了一下我发现的问题，感觉有点破坏完成论文的节奏，乱了一点阵脚。我在下午两点的时候，才完成相关的画图的修改和模型的求解。两位队友都很体贴，让我闲着，然后我就真的闲了两个小时左右，之后帮着翻译了一点文章。</p><p>然后学校通知十点左右锁实验室，这是最坑的。<br>十点到了，我们队还是没有完成论文。由于没有我和建模小姐姐的事，于是论文小姐姐决定回寝室肝一波~<br>本来想着做数模竟然不用熬夜简直美滋滋，等待论文小姐姐的终稿，最后一起来审一遍稿。然而，由于熄灯制论文小姐姐的电脑后期没电了，没电了…<br>自告奋勇，于是强行肝起了论文的排版工作。<br>由于英文翻译已经完成了，最终要使排版美观。不得不承认，手动生成目录简直是累趴，因为排版页面是在不断的变化的。<br>最后肝到凌晨四点左右交了论文。<br><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fm55ncn9s0j317p015jra.jpg" alt=""><br><img src="http://i4.bvimg.com/622054/c2e8fe0b25998c73.png" alt=""><br>交完论文我就直接飞到床上了，睡到了早上的八点。</p><h1 id="0x05-day5"><a href="#0x05-day5" class="headerlink" title="0x05 day5"></a>0x05 day5</h1><p>好心的室友八点见我还没有起床，就来叫我起床，还给了我三个肉松饼做早餐，简直感动。昨晚这么迟睡觉一定打扰到他们了吧，惭愧无比。<br>于是匆匆的就起床了，去上课。虽然四天的高强度的思考和只睡了四个小时左右，但是上课的时候仅仅感觉身体有一点虚弱，头有一点晕，但是并不困什么的。<br>下午就一直睡觉睡到晚上，接着就去上选修了。</p><h1 id="0x06-Conclusion"><a href="#0x06-Conclusion" class="headerlink" title="0x06 Conclusion"></a>0x06 Conclusion</h1><p>感觉这一次做题的节奏有一点缓慢，导致最后一天论文排版没有进行精细的布置。<br>做完比赛，感觉还是应该总结一下自己的不足：</p><ol><li>数据的收集的能力不足，感觉要提高一下数据的收集能力什么的，比如运用网络爬虫进行高效的数据收集。</li><li>数学建模的理论知识不足，感觉有的问题的求解是在生搬硬套。</li><li>学习更多的绘图技巧。</li></ol><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>相对于ACM的精确化的过程来讲，数模更多的是在论文的求解和完成情况，考察一个队伍的短期的学习能力，虽然学习的东西不一定正确，而想看懂高端的理论知识就需要平时的各种知识的积累了。感谢两位小姐姐和我一起完成了这样的一篇论文，不论结果，收获永远是潜移默化的。<br>2017年12月4日23:56:37</p>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用python生成公式logo</title>
      <link href="/2017/11/26/%E7%94%A8python%E7%94%9F%E6%88%90%E5%85%AC%E5%BC%8Flogo/"/>
      <url>/2017/11/26/%E7%94%A8python%E7%94%9F%E6%88%90%E5%85%AC%E5%BC%8Flogo/</url>
      <content type="html"><![CDATA[<p>无意间翻到一个很有意思的API，而且实现的过程也很简单。<br>本来想学一波Python画图，因为定制性更强啊。然后想想我还是选择matlab的无脑流吧，(逃<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># -----------------------------------------------------------------------------</div><div class="line"># Copyright (c) <span class="number">2015</span>, Nicolas P. Rougier. All Rights Reserved.</div><div class="line"># Distributed under the (new) BSD License. See LICENSE.txt for more info.</div><div class="line"># -----------------------------------------------------------------------------</div><div class="line"><span class="keyword">import</span> numpy as np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot as plt</div><div class="line"></div><div class="line">eqs = []</div><div class="line">eqs.append((r<span class="string">"$W^&#123;3\beta&#125;_&#123;\delta_1 \rho_1 \sigma_2&#125; = U^&#123;3\beta&#125;_&#123;\delta_1 \rho_1&#125; + \frac&#123;1&#125;&#123;8 \pi 2&#125; \int^&#123;\alpha_2&#125;_&#123;\alpha_2&#125; d \alpha^\prime_2 \left[\frac&#123; U^&#123;2\beta&#125;_&#123;\delta_1 \rho_1&#125; - \alpha^\prime_2U^&#123;1\beta&#125;_&#123;\rho_1 \sigma_2&#125; &#125;&#123;U^&#123;0\beta&#125;_&#123;\rho_1 \sigma_2&#125;&#125;\right]$"</span>))</div><div class="line">eqs.append((r<span class="string">"$\frac&#123;d\rho&#125;&#123;d t&#125; + \rho \vec&#123;v&#125;\cdot\nabla\vec&#123;v&#125; = -\nabla p + \mu\nabla^2 \vec&#123;v&#125; + \rho \vec&#123;g&#125;$"</span>))</div><div class="line">eqs.append((r<span class="string">"$\int_&#123;-\infty&#125;^\infty e^&#123;-x^2&#125;dx=\sqrt&#123;\pi&#125;$"</span>))</div><div class="line">eqs.append((r<span class="string">"$E = mc^2 = \sqrt&#123;&#123;m_0&#125;^2c^4 + p^2c^2&#125;$"</span>))</div><div class="line">eqs.append((r<span class="string">"$F_G = G\frac&#123;m_1m_2&#125;&#123;r^2&#125;$"</span>))</div><div class="line"></div><div class="line"></div><div class="line">plt.axes([<span class="number">0.025</span>,<span class="number">0.025</span>,<span class="number">0.95</span>,<span class="number">0.95</span>])</div><div class="line"></div><div class="line"><span class="keyword">for</span> i in range(<span class="number">24</span>):</div><div class="line">    index = np.random.randint(<span class="number">0</span>,len(eqs))</div><div class="line">    eq = eqs[index]</div><div class="line">    size = np.random.uniform(<span class="number">12</span>,<span class="number">32</span>)</div><div class="line">    x,y = np.random.uniform(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">    alpha = np.random.uniform(<span class="number">0.25</span>,<span class="number">.75</span>)</div><div class="line">    plt.text(x, y, eq, ha='center', va='center', color="#11557c", alpha=alpha,</div><div class="line">             transform=plt.gca().transAxes, fontsize=size, clip_on=True)</div><div class="line"></div><div class="line">plt.xticks([]), plt.yticks([])</div><div class="line"># savefig('../figures/text_ex.png',dpi=48)</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p><p>效果图：<br><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1flvvqhj35oj30bz086mz1.jpg" alt=""></p><h2 id="其他的链接"><a href="#其他的链接" class="headerlink" title="其他的链接"></a>其他的链接</h2><p><a href="http://blog.csdn.net/xw_classmate/article/details/51302841" target="_blank" rel="external">matplotlib tutorial</a><br><a href="https://wenku.baidu.com/view/d6a8976f5727a5e9846a6130.html" target="_blank" rel="external">tutorial2</a><br><a href="http://blog.csdn.net/u011497262/article/details/52325705" target="_blank" rel="external">tutorial3</a><br><a href="http://download.csdn.net/download/zerostar/5123849#comment" target="_blank" rel="external">just a detailed book</a></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深度学习视频笔记</title>
      <link href="/2017/11/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/11/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>3Blue1Brown的视频中的笔记以及个人的理解。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>我们得到的是一个784个范围属于(0, 1)的图像点阵。然后设置两层调参的元胞，每层16个，最后是表示0~9的层，值越大表示代表该数的可能性越大。最后定义一个方差：方差越小表示与目标的预测越精确。我们需要的调节的参数有两种：\(w和b\)，一个代表调节neutron的权重的边，另外一个表示偏度。总共需要调节的参数总数为：</p><p>\((784*16 + 16*16 + 16*10) + (16 + 16 + 10) = 13002\),前面的表示w的数目，后面表示b的数目。</p><p>其实不断训练的过程就是：<font color="#FF3030"><strong>调节13002个参数，使方差最小</strong></font>。若是多元的函数，我们会选择梯度下降法，在这个系列的视频中，采用的是<font color="#FF3030"><strong>back propagation</strong></font>(BP)算法来寻找最小值。</p><h1 id="识别的过程"><a href="#识别的过程" class="headerlink" title="识别的过程"></a>识别的过程</h1><p>我们很自然的以为设置的第一层元胞是识别小的笔画，第二层识别第一层组合起来更大的笔画。最后一层是第二层笔画的组合。这样看起来合情合理。<br>但是时间上它生成了13002幅784像素的图，并且与现实吻合的很好，但是它的识别的过程完全是无规律的。不要把它想的太高端。<br>比如我们输入一幅噪点图，算法总能给我们一个结果，但实际上没有任何的数字。因此它的识别过程完全是无序的。</p><h1 id="BP原理"><a href="#BP原理" class="headerlink" title="BP原理"></a>BP原理</h1><p>此处应该有大量的公式以及符号说明，等有时间再补吧qaq.</p><h2 id="线性的neutron时："><a href="#线性的neutron时：" class="headerlink" title="线性的neutron时："></a>线性的neutron时：</h2><p><img src="https://t1.picb.cc/uploads/2017/11/26/b1HP6.png" alt=""></p><p>符号说明:<br>\(C_0\):训练的代价，即一个<font color="#FF3030"><strong>方差</strong></font>。越小表示越接近真实值。<br>\(y\):要么是0， 要么是1,。并且只有一个1.<br>\(W^{(L)}\):第\(L\)层的权重。<br>\(a^{(L)}\):表示neutron的值(激活值)，它是连续的，并且属于(0, 1).<br>\(b^{(L)}\):偏差的系数(bias)。<br>\(\sigma()\):特殊函数，比如sigmoid函数。</p><h2 id="当有多个neutron"><a href="#当有多个neutron" class="headerlink" title="当有多个neutron"></a>当有多个neutron</h2><p>只不过描述变量的时候多了一个下标。<br><img src="https://t1.picb.cc/uploads/2017/11/26/b15VT.png" alt=""><br>变量的说明：<br><img src="https://t1.picb.cc/uploads/2017/11/26/b18GM.png" alt=""></p><p>\(C_0 \):表示误差的代价，是方差。<br>\(a_{i}^{(L)}\):表示第L层的第i+1个激活值，注意<font color="#FF3030"><strong>比线性的多了一个下标</strong></font>。<br>\(W_{jk}^{(L)}\):第L-1层的<font color="#FF3030"><strong>第k个</strong></font>neutron和第L层的<font color="#FF3030"><strong>第j个</strong></font>neutron之间的权重.看似顺序有点不太对，实际上是第1集中定义的矩阵有关。<br>\(y_i\):只能取0或者1，表示结果。并且所有的y中只能有一个表示1，表示正确结果。</p><p>注意\(C_0\)对\(a_k^{(L-1)}\)的偏导的结果前面有一个累加号，因为\(a_k^{(L-1)}\)对后面一层的所有的\(a_i^{(L)}\)都有影响。<br><img src="https://t1.picb.cc/uploads/2017/11/26/b1Apt.jpg" alt=""></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> back propagation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图论的基础算法</title>
      <link href="/2017/11/24/%E5%9B%BE%E8%AE%BA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
      <url>/2017/11/24/%E5%9B%BE%E8%AE%BA%E7%9A%84%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>本文将着重最基本的图论的算法。顺便学习一下不会的知识。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h1><p>在编程时，一般使用的方法有：</p><ul><li>邻接矩阵</li><li>邻接表(vector)</li><li>链式前向星</li></ul><p>前面的一种是针对稠密图而言的。后面的两种是针对稀疏图而言的,链式前向星用的比较的少，学习它只是便于读懂他人的代码。<br>其中<font color="#FF3030"><strong>邻接表用的最多</strong></font>，因为大部分的图都是稀疏图。链式前向星主要就是没有使用vector的可扩展大小的特性而已，它存入的顺序和读取的顺序是相反的。</p><h1 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h1><p>分为DFS遍历和BFS遍历。</p><h2 id="DFS遍历"><a href="#DFS遍历" class="headerlink" title="DFS遍历"></a>DFS遍历</h2><p>没什么想说明的，直接上代码吧。还是讲两句，dfs序在划分的时候非常有用，将树形的结构转化为线性的。但是我好想已经忘了怎么用了emmmmmm.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> n, k, s;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">6 9 0</span></div><div class="line"><span class="comment">0 1</span></div><div class="line"><span class="comment">0 2</span></div><div class="line"><span class="comment">2 1</span></div><div class="line"><span class="comment">1 3</span></div><div class="line"><span class="comment">1 4</span></div><div class="line"><span class="comment">2 4</span></div><div class="line"><span class="comment">4 3</span></div><div class="line"><span class="comment">5 3</span></div><div class="line"><span class="comment">4 5</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> depth)</span></span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, u);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i];</div><div class="line">        <span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">            dfs(v, depth+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_traverse</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!vis[i])&#123;</div><div class="line">            dfs(i, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;s))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">        &#125;</div><div class="line">        dfs_traverse();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="BFS遍历"><a href="#BFS遍历" class="headerlink" title="BFS遍历"></a>BFS遍历</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="keyword">bool</span> inq[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    q.push(u);</div><div class="line">    inq[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[temp].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[temp][i];</div><div class="line">            <span class="keyword">if</span>(!inq[v]) q.push(v), inq[v] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs_traverse</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</div><div class="line">    bfs(<span class="number">0</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">        &#125;</div><div class="line">        bfs_traverse();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="最短路算算法"><a href="#最短路算算法" class="headerlink" title="最短路算算法"></a>最短路算算法</h1><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p>本质上就是<font color="#FF3030"><strong>一种不断的贪心思想</strong></font>。<br>应用的范围：注意边权是非负的值。<br>下面的例子说明了存在负边权时，Dijkstra错误处理的情况：<br><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1fltpv6wed8j30b3095aa8.jpg" alt=""></p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> G[maxn][maxn];</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">int</span> n, e, s;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="comment">//序号从0开始</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)dis[i] = INF;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    dis[s] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> min_weigth = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;min_weigth&gt;dis[j])</div><div class="line">                min_weigth = dis[j], u = j;</div><div class="line">        &#125;</div><div class="line">        vis[u] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>; v&lt;n; v++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[v]&amp;&amp;G[u][v]!=<span class="number">0x7f7f7f7f</span>)&#123;</div><div class="line">                dis[v] = min(dis[v], dis[u]+G[u][v]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;e, &amp;s))&#123;</div><div class="line">        <span class="keyword">int</span> u, v, weight;</div><div class="line">        <span class="built_in">memset</span>(G, <span class="number">0x7f</span>, <span class="keyword">sizeof</span>(G));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;e; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            G[u][v] = weight;</div><div class="line">        &#125;</div><div class="line">        dijkstra();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d点到其他所有点的最短距离为：\n"</span>, s);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"编号%d: %d "</span>, i, dis[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的代码的时间复杂度为O(\(n^2\))<br>如果采用邻接表的形式来保存图，若是稀疏图，那么只是遍历边的时候减小了时间复杂度的常数项。</p><p>仔细分析，发现我们发了O(n)的时间复杂度来找最小点，而实际上我们可以将其优化到O(log(n)),找到后对其邻接的点的距离最小值进行更新。<br>总时间复杂度为O(\(E·logn\))</p><h4 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h4><p>注意一个点可以多次的进出优先队列，但是这只影响时间复杂度的常数项。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, weight;</div><div class="line">&#125;edge[maxn];</div><div class="line"><span class="keyword">int</span> n, k ,s;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;<span class="comment">//第一维保存最短距离，第二维保存点标</span></div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstr</span><span class="params">()</span></span>&#123;</div><div class="line">    priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; pq;</div><div class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x7f</span>, <span class="keyword">sizeof</span>(dis));</div><div class="line">    dis[s] = <span class="number">0</span>;</div><div class="line">    pq.push(P(<span class="number">0</span>, s));</div><div class="line">    <span class="keyword">while</span>(!pq.empty())&#123;</div><div class="line">        P p = pq.top();</div><div class="line">        <span class="keyword">int</span> u = p.second;</div><div class="line">        pq.pop();</div><div class="line">        <span class="keyword">if</span>(dis[u]&lt;p.first) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][i].to;</div><div class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+G[u][i].weight)&#123;</div><div class="line">                dis[v] = dis[u]+G[u][i].weight;</div><div class="line">                pq.push(P(dis[v], v));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;s))&#123;</div><div class="line">        <span class="keyword">int</span> u, v, weight;</div><div class="line">        Edge temp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            temp.to = v, temp.weight = weight;</div><div class="line">            G[u].push_back(temp);</div><div class="line">        &#125;</div><div class="line">        Dijkstr();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, dis[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们都能愉快使用优化后的代码了，当然如果是稠密图的话，两者的时间复杂度将会差不多。</p><h2 id="Bellman-ford算法"><a href="#Bellman-ford算法" class="headerlink" title="Bellman-ford算法"></a>Bellman-ford算法</h2><p>感觉运用了动态规划的思想：<br>对<font color="#FF3030"><strong>所有的边进行了一次遍历</strong></font>，这样<font color="#FF3030"><strong>遍历了n-1</strong></font>之后，dis[]就是从源点到各点的最短路。<br>由于可能存在负环，再进行一次遍历，若dis[]数组仍然能够更新，那么说明存在负环。</p><p>下面简单的说明为什么要遍历n-1次。</p><p>我们首先将s(源点)作为一根树的树根，每次到其它点的最短距离构成了一棵最短路径树。<br>每次遍历一次所有的边，那么相当于更新了一层树。<br>这棵树树除了根节点，<font color="#FF3030"><strong>最多有n-1层（也就是链式的树）</strong></font>，因此最多遍历n-1次就行了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, weight;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">存在负环的情况:</span></div><div class="line"><span class="comment">3 3 0</span></div><div class="line"><span class="comment">0 1 -1</span></div><div class="line"><span class="comment">1 2 2</span></div><div class="line"><span class="comment">2 0 -3</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">int</span> n, k, s;</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bellman_ford</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)dis[i] = INF;</div><div class="line">    dis[s] = <span class="number">0</span>;</div><div class="line">    <span class="comment">//进行n-1一轮的遍历，每一次的遍历都遍历所有的边。</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>; u&lt;n; u++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j&lt;G[u].size(); j++)&#123;</div><div class="line">                <span class="keyword">int</span> v = G[u][j].to;</div><div class="line">                dis[v] = min(dis[v], dis[u]+G[u][j].weight);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>; u&lt;n; u++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;G[u].size(); j++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][j].to;</div><div class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+G[u][j].weight)&#123;</div><div class="line">                flag = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flag;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;s))&#123;</div><div class="line">        <span class="keyword">int</span> u, v, weight;</div><div class="line">        Edge temp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            temp.to = v;</div><div class="line">            temp.weight = weight;</div><div class="line">            G[u].push_back(temp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!Bellman_ford())&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"There is no negative loop~\n"</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>, dis[i]);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"There exists negative loop\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当然，如果我们已经更新了所有的节点，那么可以提前退出。代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> quit = <span class="literal">true</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>; u&lt;n; u++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j&lt;G[u].size(); j++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][j].to;</div><div class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+G[u][j].weight)&#123;</div><div class="line">                dis[v] = dis[u]+G[u][j].weight;</div><div class="line">                quit = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(quit) <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个算法的时间复杂度为O(E·n),我们可以看出每一次都要遍历所有的边时，最坏的情况下能够更新的节点数只有1，而我们却要遍历所有的边，十分的浪费时间。</p><h2 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h2><p>SPFA运用了一个性质，一个点最多被更新n-1次，如果更新的次数超过n-1次，那么表明存在负环。<br>具体的证明我也不是很清楚，下面列一个<font color="#FF3030"><strong>一个点最多入队n-1次</strong></font>的点，希望帮助理解。<br><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fltpxa9j3ij30f90a1dg4.jpg" alt=""></p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><p>最关键的是一个点不可能被更新n次， 最多更新n-1次。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, weight;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">bool</span> inq[maxn];</div><div class="line"><span class="keyword">int</span> num_inq[maxn];</div><div class="line"><span class="keyword">int</span> n, k, s;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) dis[i] = INF;</div><div class="line">    <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    dis[s] = <span class="number">0</span>;</div><div class="line">    q.push(s);</div><div class="line">    inq[s] = <span class="literal">true</span>;</div><div class="line">    num_inq[s]++;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop();</div><div class="line">        inq[u] = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][i].to;</div><div class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+G[u][i].weight)&#123;</div><div class="line">                dis[v] = dis[u]+G[u][i].weight;</div><div class="line">                <span class="keyword">if</span>(!inq[v])&#123;</div><div class="line">                    q.push(v);</div><div class="line">                    inq[v] = <span class="literal">true</span>;</div><div class="line">                    num_inq[v]++;</div><div class="line">                    <span class="keyword">if</span>(num_inq[v]&gt;=n) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;s))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)G[i].clear(),inq[i] = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> u, v, weight;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k ;i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            Edge temp;</div><div class="line">            temp.to = v;</div><div class="line">            temp.weight = weight;</div><div class="line">            G[u].push_back(temp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!SPFA())&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"There is no negative loop\n"</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>, dis[i]);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"There is a negative loop\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><p>没有固定起点的最短路问题。时间复杂度是O(\(n^3\)).用的是动态规划的思想，学习一下怎么打印最短路径，之前并不会。<br>状态转移方程：<br>\(dp[i][j] = min(dp[i][j], dp[i][k]+dp[k][j]), k\in(0, n)\).<br>注意<font color="#FF3030"><strong>一定要先枚举k!!!!!</strong></font></p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e2</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="keyword">int</span> G[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> path[maxn][maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(G[i][k]!=INF&amp;&amp;G[k][j]!=INF)</div><div class="line">                    <span class="keyword">if</span>(G[i][j]&gt;G[i][k]+G[k][j])&#123;</div><div class="line">                        G[i][j] = G[i][k]+G[k][j];</div><div class="line">                        path[i][j] = path[k][j];</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_path</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> node = path[u][v];</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">    ans.push(u);</div><div class="line">    <span class="keyword">if</span>(u!=node) ans.push(node);</div><div class="line">    <span class="keyword">while</span>(node != path[node][v])&#123;</div><div class="line">        ans.push(node);</div><div class="line">        node = path[node][v];</div><div class="line">    &#125;</div><div class="line">    ans.push(v);</div><div class="line">    <span class="keyword">while</span>(!ans.empty())&#123;</div><div class="line">        ans.front() == v?<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.front()):<span class="built_in">printf</span>(<span class="string">"%d--&gt;"</span>, ans.front());</div><div class="line">        ans.pop();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;maxn; j++)</div><div class="line">                G[i][j] = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)G[i][i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> u, v, weight;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            G[u][v] = weight;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;maxn; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(G[i][j] != INF)</div><div class="line">                    path[i][j] = i;<span class="comment">//注意这个保存的是路径的前驱</span></div><div class="line">                <span class="keyword">else</span> path[i][j] = <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Floyd();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,G[i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, path[i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        print_path(u, v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="次短路问题"><a href="#次短路问题" class="headerlink" title="次短路问题"></a>次短路问题</h1><p>还是运用的是Dijkstra算法，只不过多了中间的保存的变量。</p><ul><li>u-&gt;v:到v的次算路，要么是u的次短路+dis(u, v)</li><li>要么是u的最短路+dis[u][v].</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="http://poj.org/problem?id=3255" target="_blank" rel="external">Roadblocks</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>次短路，双向连通，<font color="#FF3030"><strong>一条路可以重复经过</strong></font>。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>见上面的。</p><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, weight;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">int</span> dis2[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</div><div class="line">    priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; que;</div><div class="line">    fill(dis, dis+n, INF), fill(dis2, dis2+n, INF);</div><div class="line">    dis[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    que.push(P(<span class="number">0</span>, <span class="number">0</span>));</div><div class="line">    <span class="comment">//pair第一维记录距离，第二维记录序号。</span></div><div class="line">    <span class="keyword">while</span>(!que.empty())&#123;</div><div class="line">        P p = que.top();</div><div class="line">        que.pop();</div><div class="line">        <span class="keyword">int</span> u = p.second, distan = p.first;</div><div class="line">        <span class="comment">//printf("%d %d\n", u, distance);</span></div><div class="line">        <span class="keyword">if</span>(dis2[u]&lt;distan)<span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][i].to;</div><div class="line">            <span class="keyword">int</span> d2 = G[u][i].weight+distan;</div><div class="line">            <span class="keyword">if</span>(dis[v]&gt;d2)&#123;</div><div class="line">                swap(dis[v], d2);</div><div class="line">                <span class="comment">//最短路被更新后，该路径有可能是次短路径，因此需要保留。</span></div><div class="line">                que.push(P(dis[v], v));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(dis2[v]&gt;d2&amp;&amp;dis[v]&lt;d2)&#123;</div><div class="line">                dis2[v] = d2;</div><div class="line">                que.push(P(dis2[v], v));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis2[n<span class="number">-1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) G[i].clear();</div><div class="line">        <span class="keyword">int</span> u, v, weight;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            Edge temp;</div><div class="line">            temp.to = v<span class="number">-1</span>;</div><div class="line">            temp.weight = weight;</div><div class="line">            G[u<span class="number">-1</span>].push_back(temp);</div><div class="line">            temp.to = u<span class="number">-1</span>;</div><div class="line">            G[v<span class="number">-1</span>].push_back(temp);</div><div class="line">        &#125;</div><div class="line">        Dijkstra();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><font color="#FF3030"><strong>非常需要注意的一点：更新的数字不是dis[u]而是p.first.因为入队的元素可能是第二大的，和前面的最短路优化不同！！！</strong></font><blockquote><p>int d2 = G[u][i].weight+distan;</p></blockquote><h1 id="k短路问题"><a href="#k短路问题" class="headerlink" title="k短路问题"></a>k短路问题</h1><p>A*的裸题，好好体会一下A*的思想。<br>具体的代码可以看我之前写的博客，安利一波。</p><h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><p>这个问题有两种算法：Prim算法和Kruskal算法，两者的本质都是贪心算法，只不过贪心的策略不同。<br>稠密图prim算法比较合适，稀疏图kruskal算法比较合适。</p><h2 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h2><p>贪心的策略是将图划<font color="#FF3030"><strong>分成两个集合</strong></font>，不断的加入最小的边，并且满足已经加入的点不构成环，然后将相关的点加入集合。<br>其实代码实现的过程和Dijkstra一模一样，只不过dis[]数组的含义变了：该节点到初始集合的最小距离。注意<font color="#FF3030"><strong>是到一个集合的距离</strong></font>。<br>而dijkstra中dis[]表示到源点的最短距离。</p><h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">6 10</span></div><div class="line"><span class="comment">0 1 4</span></div><div class="line"><span class="comment">0 4 1</span></div><div class="line"><span class="comment">0 5 2</span></div><div class="line"><span class="comment">4 5 3</span></div><div class="line"><span class="comment">5 1 3</span></div><div class="line"><span class="comment">4 3 4</span></div><div class="line"><span class="comment">5 3 5</span></div><div class="line"><span class="comment">5 2 5</span></div><div class="line"><span class="comment">1 2 6</span></div><div class="line"><span class="comment">2 3 6</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to;</div><div class="line">    <span class="keyword">int</span> weight;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Prim</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)dis[i] = INF;</div><div class="line">    dis[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> min_length = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;dis[j]&lt;min_length)&#123;</div><div class="line">                u = j;</div><div class="line">                min_length = dis[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis[u] = <span class="literal">true</span>;</div><div class="line">        ans += dis[u];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][i].to;</div><div class="line">            <span class="keyword">if</span>(!vis[v]&amp;&amp;G[u][i].weight&lt;dis[v])</div><div class="line">                dis[v] = G[u][i].weight;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)G[i].clear();</div><div class="line">        <span class="keyword">int</span> u, v, weight;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            Edge temp;</div><div class="line">            temp.to = v;</div><div class="line">            temp.weight = weight;</div><div class="line">            G[u].push_back(temp);</div><div class="line">            temp.to = u;</div><div class="line">            G[v].push_back(temp);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Prim());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h2><p>首先将边的权值进行排序，然后不断的将最小的权值加入到最小生成树中。若不构成环，那么结着寻找下面的点。若构成环，那么就跳过这条线，直到构成最小生成树为止。</p><h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> u, v, weight;</div><div class="line">&#125;edge[maxn*maxn/<span class="number">2</span>+<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = x;</div><div class="line">    <span class="keyword">while</span>(x!=fa[x])&#123;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(a!=fa[a])&#123;</div><div class="line">        <span class="keyword">int</span> z = a;</div><div class="line">        a = fa[a];</div><div class="line">        fa[z] = x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">union_set</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> father)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = u;</div><div class="line">    <span class="keyword">while</span>(u!=fa[u])&#123;</div><div class="line">        u = fa[u];</div><div class="line">        fa[temp] = father;</div><div class="line">        temp = u;</div><div class="line">    &#125;</div><div class="line">    fa[u] = father;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a, Edge b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.weight&lt;b.weight;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) fa[i] = i;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> edge_num = <span class="number">0</span>;</div><div class="line">    sort(edge, edge+m, cmp);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">        <span class="keyword">int</span> u = edge[i].u;</div><div class="line">        <span class="keyword">int</span> v = edge[i].v;</div><div class="line">        <span class="keyword">int</span> fau = find(u);</div><div class="line">        <span class="keyword">int</span> fav = find(v);</div><div class="line">        <span class="keyword">if</span>(fau!=fav)&#123;</div><div class="line">            union_set(u, fav);</div><div class="line">            <span class="comment">//printf("%d--%d:%d %d %d\n", u, v, fau, fav, edge[i].weight);</span></div><div class="line">            ans+=edge[i].weight;</div><div class="line">            edge_num++;</div><div class="line">            <span class="keyword">if</span>(edge_num == n<span class="number">-1</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(edge_num == n<span class="number">-1</span>) <span class="keyword">return</span> ans;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v, weight;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            edge[i].u = u, edge[i].v = v, edge[i].weight = weight;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, kruskal());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="次小生成树"><a href="#次小生成树" class="headerlink" title="次小生成树"></a>次小生成树</h1><p>次小生成树的步骤以及代码：<br>首先贴上一份很好的url: <a href="http://www.cnblogs.com/Howe-Young/p/4911992.html" target="_blank" rel="external">次小生成树的步骤及原理</a><br>问题在原blog中就已经有了<br>下面是我对次小生成树的一些个人的总结：</p><ol><li>用prime算法求出最小生成树。<br>这个函数中，包含了有个Max[][]的求解。这个数组是什么含义呢？表示的的是（i, j）这两个点间最小生成树中边的最大权值（限制条件：①这个边是在最小生成树中的②权值是一条边的权值，不是一条链的权值（反正当时我们有弄的很清楚））。这个权值有什么用呢？当我们枚举不在最小生成树中的边的时候，我们要删去的是环中的最大边权，这样得到的才可能是次小生成树。因此，Max[][]是这个算法的核心。</li><li>枚举不在最小生成树中的边</li><li>出次小生成树的权值</li></ol><h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">include &lt;iostream&gt;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">111</span>;</div><div class="line"><span class="keyword">int</span> Max[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">bool</span> used[maxn][maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> adj[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> mst;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</div><div class="line">    mst = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</div><div class="line">        d[i] = adj[<span class="number">1</span>][i];</div><div class="line">        fa[i] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    fa[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    vis[<span class="number">1</span>] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> mindis = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;mindis&gt;d[j])&#123;</div><div class="line">                u = j;</div><div class="line">                mindis = d[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(mindis == INF||u == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        mst += mindis;</div><div class="line">        vis[u] = <span class="literal">true</span>;</div><div class="line">        used[u][fa[u]] = used[fa[u]][u] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>; v&lt;=n; v++)&#123;</div><div class="line">            <span class="keyword">if</span>(vis[v]) Max[u][v] = Max[v][u] = max(d[u], Max[v][fa[u]]);</div><div class="line">            <span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">                <span class="keyword">if</span>(d[v]&gt;adj[u][v])&#123;</div><div class="line">                    d[v] = adj[u][v];</div><div class="line">                    fa[v] = u;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">smst</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>+i; j&lt;=n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!used[i][j]&amp;&amp;adj[i][j] != INF)&#123;</div><div class="line">                ans = min(ans, mst-Max[i][j]+adj[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(ans == mst) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> flag = prim();</div><div class="line">    <span class="keyword">if</span>(!flag)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Not Unique!\n"</span>);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//cout&lt;&lt;mst&lt;&lt;endl;</span></div><div class="line">    flag = smst();</div><div class="line">    <span class="keyword">if</span>(!flag)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Not Unique!\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mst);</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;maxn; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(i == j) adj[i][j] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span> adj[i][j] = INF;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v, weight;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            adj[u][v] = weight;</div><div class="line">            adj[v][u] = weight;</div><div class="line">        &#125;</div><div class="line">        solve();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="拓扑排序-AOV"><a href="#拓扑排序-AOV" class="headerlink" title="拓扑排序(AOV)"></a>拓扑排序(AOV)</h1><p>主要就是记录<font color="#FF3030"><strong>一个节点的入度数</strong></font>。若入度为0，那么就加入将要删除的队列。<br>如果要求最小字典序的拓扑排序，那么可以使用优先队列。</p><h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> indegree[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topo_sort</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(indegree[i] == <span class="number">0</span>) q.push(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, u);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][i];</div><div class="line">            indegree[v]--;</div><div class="line">            <span class="keyword">if</span>(indegree[v] == <span class="number">0</span>)q.push(v);</div><div class="line">        &#125;</div><div class="line">        tot++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(tot == n) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) G[i].clear(), indegree[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;k; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            G[u].push_back(v);</div><div class="line">            indegree[v]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!topo_sort())<span class="built_in">printf</span>(<span class="string">"there exists a loop\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="关键路径问题"><a href="#关键路径问题" class="headerlink" title="关键路径问题"></a>关键路径问题</h1><p>数据结构的ppt很好的展示了该程序运行的流程。<br>首先区分几个概念：</p><ul><li>事件指的是顶点的序号， ve[]表示事件最早的发生时间，vl[]表示事件最迟的发生时间</li><li>弧上的权值表示一个活动，e[]表示活动的最早的发生时间，l[]表示活动的最迟的发生的时间。</li></ul><p>算法的流程</p><ol><li>先按照<font color="#FF3030"><strong>拓扑序</strong></font>来更新\(ve[]\)</li><li>然后倒过来，按照<font color="#FF3030"><strong>逆</strong></font>拓扑序来更新\(vl[]\).</li><li><font color="#FF3030"><strong>通过ve[], vl[]来求活动的e[], l[].</strong></font><br>假设活动\(a_r\)连接了点u, v.那么\(e[r] = ve[u]\), \(l[r] = vl[v]-length_{uv}\)<br>若e[r] == l[r], 那么u–v弧就是关键活动。</li></ol><h2 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, weight;</div><div class="line">&#125;;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">样例：</span></div><div class="line"><span class="comment">9 11</span></div><div class="line"><span class="comment">0 1 6</span></div><div class="line"><span class="comment">0 2 4</span></div><div class="line"><span class="comment">0 3 5</span></div><div class="line"><span class="comment">1 4 1</span></div><div class="line"><span class="comment">2 4 1</span></div><div class="line"><span class="comment">3 5 2</span></div><div class="line"><span class="comment">4 6 8</span></div><div class="line"><span class="comment">4 7 7</span></div><div class="line"><span class="comment">5 7 4</span></div><div class="line"><span class="comment">6 8 2</span></div><div class="line"><span class="comment">7 8 4</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> indegree[maxn];</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; toporder;</div><div class="line"><span class="comment">//表示的是时间的最早的开始时间和最迟的开始时间。</span></div><div class="line"><span class="keyword">int</span> ve[maxn], vl[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topo_sort</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(!toporder.empty())toporder.pop();</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(indegree[i] == <span class="number">0</span>) q.push(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop();</div><div class="line">        toporder.push(u);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][i].to;</div><div class="line">            indegree[v]--;</div><div class="line">            <span class="keyword">if</span>(indegree[v] == <span class="number">0</span>) q.push(v);</div><div class="line">            <span class="keyword">if</span>(ve[u]+G[u][i].weight&gt;ve[v])</div><div class="line">                ve[v] = ve[u]+G[u][i].weight;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(toporder.size() == n) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//以n-1作为结束的点。</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">critical_path</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(ve, <span class="number">0</span>, <span class="keyword">sizeof</span>(ve));</div><div class="line">    <span class="keyword">if</span>(topo_sort() == <span class="literal">false</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"what happened?\n"</span>);</div><div class="line">    &#125;</div><div class="line">    fill(vl, vl+n, ve[n<span class="number">-1</span>]);</div><div class="line">    <span class="keyword">while</span>(!toporder.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = toporder.top();</div><div class="line">        toporder.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][i].to;</div><div class="line">            <span class="keyword">if</span>(vl[u]&gt;vl[v]-G[u][i].weight)&#123;</div><div class="line">                vl[u] = vl[v] - G[u][i].weight;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>; u&lt;n; u++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = G[u][i].to;</div><div class="line">            <span class="keyword">int</span> weight = G[u][i].weight;</div><div class="line">            <span class="keyword">int</span> e = ve[u], l = vl[v]-weight;</div><div class="line">            <span class="keyword">if</span>(e == l)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d--&gt;%d\n"</span>, u, v);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ve[n<span class="number">-1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n ,&amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) indegree[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> u, v, weight;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            Edge temp;</div><div class="line">            temp.to = v;</div><div class="line">            temp.weight = weight;</div><div class="line">            G[u].push_back(temp);</div><div class="line">            indegree[v]++;</div><div class="line">        &#125;</div><div class="line">        critical_path();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的代码是以n-1作为汇点的，若不知道汇点，那么最后求最大值的时候扫一遍就行了。</p><h1 id="判断图中是否存在环"><a href="#判断图中是否存在环" class="headerlink" title="判断图中是否存在环"></a>判断图中是否存在环</h1><p>判断的方法有很多，只列出老师上课讲过的，其他等慢慢的积累吧qaq。</p><h2 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h2><ul><li>topological sort.</li><li>深度优先搜索，若有回边，那么直接判断有圈，</li></ul><h2 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h2><ul><li>若无向连通图中\(e\ge n\).</li><li>每个点的度数大于等于2.</li><li>DFS.</li></ul><h1 id="最后想讲的一些话"><a href="#最后想讲的一些话" class="headerlink" title="最后想讲的一些话"></a>最后想讲的一些话</h1><p>其实图论相当的有意思，但是最困难的是建模。往往难以正确的转换套用正确的模型，还是得多做题才行吧。</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路算法 </tag>
            
            <tag> 次短路算法 </tag>
            
            <tag> 最小生成树 </tag>
            
            <tag> 次小生成树 </tag>
            
            <tag> 拓扑排序 </tag>
            
            <tag> DAG上的最长路径(AOE网) </tag>
            
            <tag> 图的遍历 </tag>
            
            <tag> 图中判断是否存在环 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树上分治算法</title>
      <link href="/2017/11/23/%E6%A0%91%E4%B8%8A%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
      <url>/2017/11/23/%E6%A0%91%E4%B8%8A%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>感觉最近有点累，想好好休息一下。嗯，还是要注意调节自己嘻嘻<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://poj.org/problem?id=1741" target="_blank" rel="external">poj 1741</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><ul><li>给定一棵有n个节点的树，给定一个权值k。</li><li>问树上有多少个顶点对，使他们之间的距离不超过k。</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>由于是树形的结构，不像数列一样直接二等分即可。我们首先要找到树的重心(将该节点删去之后，剩下的子树种的最大子树的节点树最小)。</li><li>有如下的三种情况:</li></ul><p><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1flrzbpsk5qj31fb0keacg.jpg" alt=""></p><ul><li>第一种<font color="#FF3030"><strong>递归求解</strong></font>即可；第二种先把子树中所有的节点到根节点的距离算出来，然后放到一个数组中，之后统计；情况三：我们压入了<font color="#FF3030"><strong>一个0距离的节点</strong></font>，因此可以视为情况二。但是在情况而统计的时候，有一部分是不符合题意的，因此要减掉。</li></ul><p>挑战程序设计里面说是为了减去与情况一重复的情况.更进一步的说:是相同子树下避免不符合条件的点对的统计，而且这些点对也可能和情况一中的重合<font color="#FF3030"><strong>(仅仅是点对的重复，他们之间的距离是变化的，因为后面还必须要经过树根)</strong></font>，但情况一中符合条件的点对不一定在这里面统计到。<br>下面举样例来说明：<br><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1flrzj0qzrtj30ou0jfq3t.jpg" alt=""><br>当以1为重心的时候，当分治完所有的节点后，ans = 1,（3–5满足条件）。<br>当运行到这段代码时,统计1–3–5子树的时候<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">enumerate_path(v, s, G[s][i].length, tds);</div></pre></td></tr></table></figure></p><p>tds里面保存了1, 2,然后执行减去的是3&lt;——&gt;1&lt;—–&gt;5（此时统计的还是3–5点对）<br>因为后面会重复的统计这种情形，并且这种情形也是不符合条件的。</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><ul><li>计算子树的大小的时候，要把计算函数放在分治函数中，不能放在主函数中。T成傻逼</li><li>注意双指针统计符合条件的点对的思想。先统计，把自身重复的剔除(-1)，最后除以2.</li><li>建立树的时候都是从0开始的。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to;</div><div class="line">    <span class="keyword">int</span> length;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> sub_tree_size[maxn];<span class="comment">//以该节点为根节点的子树的定点数</span></div><div class="line"><span class="keyword">bool</span> centroid[maxn];<span class="comment">//标记是否已经为中心</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal_subtree_number</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> c = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i].to;</div><div class="line">        <span class="keyword">if</span>(v == p || centroid[v]) <span class="keyword">continue</span>;</div><div class="line">        c += cal_subtree_number(v, u);</div><div class="line">    &#125;</div><div class="line">    sub_tree_size[u] = c;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"><span class="comment">//返回的是一个pair类型的变量，第一个变量是最大子树的节点个数，第二个是重心的序号</span></div><div class="line"><span class="comment">//函数的三个参数是：①dfs的当前坐标 ②父亲节点 ③节点总数，这个是不变的(n)</span></div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; find_centroid(<span class="keyword">int</span> u, <span class="keyword">int</span> p, <span class="keyword">int</span> tot_number)&#123;</div><div class="line">    <span class="keyword">int</span> m = <span class="number">0</span>, number = <span class="number">1</span>;</div><div class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; res = make_pair(INT_MAX, <span class="number">-1</span>);<span class="comment">//初始化一个节点</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i].to;</div><div class="line">        <span class="keyword">if</span>(v == p || centroid[v])<span class="keyword">continue</span>;</div><div class="line">        res = min(res, find_centroid(v, u, tot_number));</div><div class="line">        number += sub_tree_size[v];</div><div class="line">        m = max(m, sub_tree_size[v]);<span class="comment">//所有的子树的最大值</span></div><div class="line">    &#125;</div><div class="line">    m = max(m, tot_number-number);<span class="comment">//除去子树和本身的剩余节点的个数，可以看我书上画的图理解</span></div><div class="line">    res = min(res, make_pair(m, u));</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="comment">//以u为中心节点，子树的所有的节点到中心节点(根节点)的距离</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">enumerate_path</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p, <span class="keyword">int</span> length, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ds)</span></span>&#123;</div><div class="line">    ds.push_back(length);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[u][i].to;</div><div class="line">        <span class="keyword">if</span>(centroid[v] || v == p) <span class="keyword">continue</span>;</div><div class="line">        enumerate_path(v, u, length+G[u][i].length, ds);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_pair</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ds)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans1 = <span class="number">0</span>;</div><div class="line">    sort(ds.begin(), ds.end());</div><div class="line">    <span class="keyword">int</span> j = ds.size();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ds.size(); i++)&#123;<span class="comment">//以i为一条边基准，进行遍历计数</span></div><div class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;ds[i]+ds[j<span class="number">-1</span>]&gt;k) j--;</div><div class="line">        <span class="keyword">if</span>(j&gt;i) ans1 += (j<span class="number">-1</span>);</div><div class="line">        <span class="keyword">else</span> ans1 += j;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans1/<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_problem</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    cal_subtree_number(u, <span class="number">-1</span>);<span class="comment">//一定要注意在子问题中计算子树的大小，不要放在主函数中，T成傻子。</span></div><div class="line">    <span class="keyword">int</span> s = find_centroid(u, <span class="number">-1</span>, sub_tree_size[u]).second;</div><div class="line">    centroid[s] = <span class="literal">true</span>;</div><div class="line">    <span class="comment">//printf("%d\n", s);</span></div><div class="line">    <span class="comment">//情况一：统计的节点在以s为重心的子树中</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[s].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = G[s][i].to;</div><div class="line">        <span class="keyword">if</span>(centroid[v]) <span class="keyword">continue</span>;</div><div class="line">        sub_problem(v);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ds;</div><div class="line">    ds.clear();</div><div class="line">    ds.push_back(<span class="number">0</span>);<span class="comment">//以s为根节点的情况</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[s].size(); i++)&#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tds;</div><div class="line">        tds.clear();</div><div class="line">        <span class="keyword">int</span> v = G[s][i].to;</div><div class="line">        <span class="keyword">if</span>(centroid[v])<span class="keyword">continue</span>;</div><div class="line">        enumerate_path(v, s, G[s][i].length, tds);</div><div class="line">        ans -= count_pair(tds);<span class="comment">//情况二中避免后面的重复，所以要减掉。</span></div><div class="line">        ds.insert(ds.end(), tds.begin(), tds.end());</div><div class="line">    &#125;</div><div class="line">    ans += count_pair(ds);<span class="comment">//统计情况二。这里面会有不符合条件的，但是前面已经减掉了。</span></div><div class="line">    centroid[s] = <span class="literal">false</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(centroid, <span class="literal">false</span>, <span class="keyword">sizeof</span>(centroid));</div><div class="line">    sub_problem(s);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k)&amp;&amp;(n+k))&#123;</div><div class="line">        <span class="keyword">int</span> a, b, length;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            G[i].clear();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;length);</div><div class="line">            Edge temp;</div><div class="line">            temp.to = b<span class="number">-1</span>, temp.length = length;</div><div class="line">            G[a<span class="number">-1</span>].push_back(temp);</div><div class="line">            temp.to = a<span class="number">-1</span>;</div><div class="line">            G[b<span class="number">-1</span>].push_back(temp);</div><div class="line">        &#125;</div><div class="line">        solve(a<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治算法 </tag>
            
            <tag> 树上分治 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第k短路问题</title>
      <link href="/2017/11/14/%E7%AC%ACk%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
      <url>/2017/11/14/%E7%AC%ACk%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>搜索的瓶颈就是搜索的时间复杂度和空间复杂度。所以有的时候要采取必要的剪枝策略。而剪枝策略中将充满着玄学。<br>这篇文章主要总结一下A*的思维来解决第k短路问题。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="什么是A-算法？"><a href="#什么是A-算法？" class="headerlink" title="什么是A*算法？"></a>什么是A*算法？</h1><p><a href="http://www.cppblog.com/mythit/archive/2009/04/19/80492.aspx" target="_blank" rel="external">A*详细介绍</a><br>前辈们已经说的很清楚了。构造了一个如下的函数:<br>\(f(x) = g(x)+h(x)\)<br>g(x)为<font color="#FF3030"><strong>实际搜索的答案</strong></font>，h(x)为一个<font color="#FF3030"><strong>启发的因子</strong></font>。<br>我们一般用的BFS其实就是一种最坏情况的A*算法，\(h(x) = 0;\)<br>这个函数有很多的应用的背景：比如求最短路的时候，我们搜索到一个状态的时候，然后加上最好的曼哈顿距离(h(x))，这时候的值比已经找到的值要大。那么我们完全<font color="#FF3030"><strong>没有必要接着往下找最短路了</strong></font>。这样的方案是不可能为最优方案的。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><a href="http://poj.org/problem?id=2449" target="_blank" rel="external">poj2449 Remmarguts’ Date</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><ul><li>首先给定n, m:n表示节点的个数，m代表有向图的边。</li><li>下面的m行给定从节点u到v的距离dist</li><li>最后一行给定起点(s), 终点(t), 第k短路</li><li><font color="#FF3030"><strong>若s == t,必须在外面经过一些点再返回</strong></font>。</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>暴力搜索没想好怎么暴力搜索。如果能暴力，时间复杂度也是不行吧。</li><li>我们先预处理出来图中所有的点到terminal的最短路,这个来作为h[]函数(启发函数)。</li><li>而我们下面要讨论的第k短路问题，是一个不断将可能的解放入优先队列(pq)的过程之中。这些解可能不是最优的，但是由于优先队列的性质，我们取出来的一个是当前最优的结果。</li><li>当terminal节点被取出来k次之后，说明这就是第k短路的结果了。</li></ul><h2 id="更多的理解和说明"><a href="#更多的理解和说明" class="headerlink" title="更多的理解和说明"></a>更多的理解和说明</h2><p>A*其实就是给BFS()的时候加了一个h()函数，h()函数设计的好坏影响着整个的算法的优劣程度。好的h()函数可以极大的介绍搜索的空间。<br>而且求第k短路的时候看到了一句醍醐灌顶的话：</p><blockquote><p>优先队列相当于把所有的情况都先保存起来，这些解不一定是最优的。不管是骡子还是马，都放进优先队列中。然后从最优的解(队首)开始向外拓展。最后找到第k优的解。</p></blockquote><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>其实前面的原理没看懂也没什么，结合下下面的代码，先把terminal当成起始点跑dijkstra，然后用A*算法来枚举所有的可能的解就可以了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_node = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_edge = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, weight, next;</div><div class="line">&#125;edge[max_edge], reverse_edge[max_edge];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> u;</div><div class="line">    <span class="keyword">int</span> h, g;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(Node a) <span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> a.g+a.h &lt; h+g;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> head[max_node];</div><div class="line"><span class="keyword">int</span> head1[max_node];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> weight, <span class="keyword">int</span> index, Edge edge[], <span class="keyword">int</span> head[])</span></span>&#123;</div><div class="line">    edge[index].to = v;</div><div class="line">    edge[index].weight = weight;</div><div class="line">    edge[index].next = head[u];</div><div class="line">    head[u] = index;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> s, t, k;</div><div class="line"><span class="keyword">bool</span> vis[max_node];</div><div class="line"><span class="keyword">int</span> dist_end[max_node];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(dist_end, <span class="number">0x7F</span>, <span class="keyword">sizeof</span>(dist_end));</div><div class="line">    dist_end[t] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> min_dis = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; min_dis&gt;dist_end[j])&#123;</div><div class="line">                u = j;</div><div class="line">                min_dis = dist_end[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(u == <span class="number">-1</span>) <span class="keyword">return</span> ;</div><div class="line">        vis[u] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=head1[u]; j!=<span class="number">-1</span>; j=reverse_edge[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> v = reverse_edge[j].to;</div><div class="line">            <span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">                dist_end[v] = min(dist_end[v], min_dis+reverse_edge[j].weight);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> times[max_node];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Astar</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    priority_queue&lt;Node&gt; pq;</div><div class="line">    Node now, temp;</div><div class="line">    <span class="built_in">memset</span>(times, <span class="number">0</span>, <span class="keyword">sizeof</span>(times));</div><div class="line">    now.u = s;</div><div class="line">    now.g = now.h = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!pq.empty()) pq.pop();</div><div class="line">    pq.push(now);</div><div class="line">    <span class="keyword">while</span>(!pq.empty())&#123;</div><div class="line">        now = pq.top();</div><div class="line">        pq.pop();</div><div class="line">        times[now.u]++;</div><div class="line">        <span class="keyword">if</span>(times[now.u] == k &amp;&amp;now.u == t)<span class="keyword">return</span> now.g+now.h;</div><div class="line">        <span class="keyword">if</span>(times[now.u]&gt;k) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> edge_number = head[now.u];</div><div class="line">        <span class="keyword">while</span>(edge_number != <span class="number">-1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> v = edge[edge_number].to;</div><div class="line">            temp.u = v;</div><div class="line">            temp.g = now.g + edge[edge_number].weight;</div><div class="line">            temp.h = dist_end[v];</div><div class="line">            edge_number = edge[edge_number].next;</div><div class="line">            <span class="comment">//printf("%d ", edge_number);</span></div><div class="line">            pq.push(temp);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">        <span class="built_in">memset</span>(head1, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head1));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v, weight;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            add_edge(u, v, weight, i, edge, head);</div><div class="line">            add_edge(v, u, weight, i, reverse_edge, head1);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;s, &amp;t, &amp;k);</div><div class="line">        <span class="keyword">if</span>(s == t) k++;</div><div class="line">        Dijkstra();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Astar());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="http://blog.csdn.net/kk303/article/details/6953943" target="_blank" rel="external">the kth shortest path</a><br><a href="http://blog.csdn.net/thinfatty/article/details/72643044" target="_blank" rel="external">kth shortest path②</a></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A*算法 </tag>
            
            <tag> Dijkstra算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>堆栈内存溢出漏洞</title>
      <link href="/2017/11/13/%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/"/>
      <url>/2017/11/13/%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>内存栈溢出导致的漏洞<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="example-1-内存内容覆盖"><a href="#example-1-内存内容覆盖" class="headerlink" title="example 1 内存内容覆盖"></a>example 1 内存内容覆盖</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> cookie;</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">8</span>];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%08x  %08x\n"</span>, &amp;cookie, &amp;buf);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cookie);</div><div class="line">    gets(buf);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(cookie == <span class="number">0x41424344</span>)<span class="comment">//11111111DCBA</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"win\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%08x\n"</span>, cookie);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://ww3.sinaimg.cn/large/0060lm7Tly1flhiuob0w9j30ok0ffdkn.jpg" alt=""></p><p>上图中的第二条注意：</p><font color="#FF3030"><strong>main函数的返回地址指的是当函数执行完之后，EIP寄存器所应该跳转的地址!</strong></font><h1 id="example2-覆盖函数返回地址"><a href="#example2-覆盖函数返回地址" class="headerlink" title="example2 覆盖函数返回地址"></a>example2 覆盖函数返回地址</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy</span><span class="params">(<span class="keyword">char</span>* input)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">char</span> var[<span class="number">20</span>];</div><div class="line"><span class="built_in">strcpy</span>(var, input);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hacked</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Can you see me now?\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">char</span> n[<span class="number">100</span>];</div><div class="line"><span class="keyword">char</span> source[] = <span class="string">"11112222333344445555eeee\x80\x10\x40\x00"</span>;</div><div class="line">copy(source);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>var处于栈内存的顶部，下面存放的是ebp寄存器的内容，这个不是我们关心的。<br>ebp下面是函数的返回指针，而这时我们修改的重点。将指针指向hacked()函数的首地址。<br><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1flhiwkx4xfj314i0ojk0a.jpg" alt=""></p><p>后来的内存变化:<br><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1flhiy0y1u0j30rq0gt42m.jpg" alt=""></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存溢出攻击 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>interpolation and fitting</title>
      <link href="/2017/11/12/interpolation-and-fitting/"/>
      <url>/2017/11/12/interpolation-and-fitting/</url>
      <content type="html"><![CDATA[<p>现实世界中的数据都是离散的，那么我们怎么将离散的点，尽量的使他们分布在函数上呢？于是就要运用插值与拟合的相关知识。<br>插值和拟合的理论有点懵，先学一下怎么画图吧。<br><a id="more"></a></p><h1 id="example1"><a href="#example1" class="headerlink" title="example1"></a>example1</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">x = [<span class="number">0.5</span> <span class="number">1</span> <span class="number">1.5</span> <span class="number">2.5</span> <span class="number">3</span> <span class="number">3.5</span> <span class="number">4.5</span> <span class="number">5</span>];</div><div class="line">y = [<span class="number">2</span> <span class="number">2.1</span> <span class="number">2.3</span> <span class="number">2.6</span> <span class="number">2.9</span> <span class="number">3.2</span> <span class="number">4</span> <span class="number">4.5</span>];</div><div class="line">y_lookup = interp1(x, y, <span class="number">0.7</span>);</div><div class="line">fprintf(<span class="string">'x = 0.7, y = %.3f\n'</span>, y_lookup);</div><div class="line"></div><div class="line">x_new = <span class="number">0.5</span>: <span class="number">0.5</span>: <span class="number">5</span>;</div><div class="line">y_new = interp1(x, y, x_new);</div><div class="line">figure(<span class="number">2</span>);<span class="comment">%新创建一个图，不覆盖原来的图片</span></div><div class="line">plot(x, y, <span class="string">'o'</span>, x_new, y_new, <span class="string">'x'</span>);</div><div class="line"></div><div class="line"></div><div class="line">x_resample = min(x): <span class="number">0.01</span>: max(x);</div><div class="line">y_resample = interp1(x, y, x_resample);</div><div class="line">figure(<span class="number">3</span>);</div><div class="line">plot(x, y, <span class="string">'o'</span>, x_resample, y_resample, <span class="string">'-'</span>, <span class="string">'LineWidth'</span>, <span class="number">2</span>);</div><div class="line"></div><div class="line"></div><div class="line">p1 = polyfit(x, y, <span class="number">1</span>);<span class="comment">%1是多项式的最高的次数,p1是各项的系数，最后是常数项</span></div><div class="line">y_fit1 = polyval(p1, x);</div><div class="line">figure(<span class="number">4</span>);</div><div class="line">plot(x, y, <span class="string">'o'</span>, x, y_fit1, <span class="string">'--'</span>, <span class="string">'LineWidth'</span>, <span class="number">2</span>);</div><div class="line"></div><div class="line">p2 = polyfit(x, y, <span class="number">2</span>);</div><div class="line">y_fit2 = polyval(p2, x);</div><div class="line">figure(<span class="number">5</span>);</div><div class="line">plot(x, y, <span class="string">'o'</span>, x, y_fit2, <span class="string">'--'</span>, <span class="string">'LineWidth'</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure><h1 id="example2"><a href="#example2" class="headerlink" title="example2"></a>example2</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% the first m file.</span></div><div class="line"><span class="comment">% this function can be completed by the polyfit function.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span> = <span class="title">f</span><span class="params">(constant, x)</span></span></div><div class="line">    y = constant(<span class="number">1</span>)*x+constant(<span class="number">2</span>);</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">% the second m file.</span></div><div class="line">x = <span class="built_in">rand</span>(<span class="number">1</span>, <span class="number">100</span>).*<span class="number">10</span>;<span class="comment">%生成1*100的(0,1)之间的随机数</span></div><div class="line">noise = <span class="built_in">randn</span>(<span class="number">1</span>, <span class="number">100</span>);<span class="comment">%生成正态分布的随机数</span></div><div class="line">y = <span class="number">2</span>*x + <span class="number">5</span> + noise;</div><div class="line"></div><div class="line">figure;</div><div class="line">plot(x, y, <span class="string">'b*'</span>);</div><div class="line">grid on;</div><div class="line"><span class="comment">% y = mx + c;</span></div><div class="line">constant = lsqcurvefit(@f, [<span class="number">0</span>; <span class="number">0</span>], x, y);</div><div class="line"></div><div class="line">m = constant(<span class="number">1</span>);</div><div class="line">c = constant(<span class="number">2</span>);</div><div class="line"></div><div class="line">xfit = <span class="number">0</span>:<span class="number">0.1</span>:<span class="number">10</span>;</div><div class="line">yfit = f(constant, xfit);</div><div class="line"></div><div class="line">figure;</div><div class="line">plot(x, y, <span class="string">'b*'</span>);</div><div class="line">hold on;</div><div class="line">plot(xfit, yfit, <span class="string">'LineWidth'</span>, <span class="number">2</span>);</div><div class="line">grid on;</div><div class="line"></div><div class="line">or the following <span class="function"><span class="keyword">function</span></span></div><div class="line">x = <span class="built_in">rand</span>(<span class="number">1</span>, <span class="number">100</span>).*<span class="number">10</span>;<span class="comment">%生成1*100的(0,1)之间的随机数</span></div><div class="line">noise = <span class="built_in">randn</span>(<span class="number">1</span>, <span class="number">100</span>);<span class="comment">%生成正态分布的随机数</span></div><div class="line">y = <span class="number">2</span>*x + <span class="number">5</span> + noise;</div><div class="line"></div><div class="line">figure;</div><div class="line">plot(x, y, <span class="string">'b*'</span>);</div><div class="line"></div><div class="line">p1 = polyfit(x, y, <span class="number">1</span>);</div><div class="line">y1 = polyval(p1, x);</div><div class="line">figure;</div><div class="line">plot(x, y, <span class="string">'b*'</span>, x, y1, <span class="string">'r--'</span>);</div><div class="line">grid on;</div></pre></td></tr></table></figure><h1 id="example3-绘制曲线"><a href="#example3-绘制曲线" class="headerlink" title="example3: 绘制曲线"></a>example3: 绘制曲线</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">0</span>: <span class="built_in">pi</span>/<span class="number">2</span>: <span class="number">2</span>*<span class="built_in">pi</span>;</div><div class="line">y = <span class="built_in">sin</span>(x);</div><div class="line"></div><div class="line">xq = 0: pi/16: 2*pi;//插值</div><div class="line"></div><div class="line">figure;</div><div class="line">yq1 = interp1(x, y, xq);</div><div class="line">plot(x, y, <span class="string">'o'</span>, xq, yq1, <span class="string">':.'</span>);</div><div class="line"></div><div class="line">figure</div><div class="line">yq2 = interp1(x,y,xq,<span class="string">'spline'</span>);</div><div class="line">plot(x,y,<span class="string">'o'</span>,xq,yq2,<span class="string">':.'</span>);</div><div class="line">xlim([0 2*pi]);//设置x变量的变化的区间的范围</div><div class="line">title(<span class="string">'Spline Interpolation'</span>);</div></pre></td></tr></table></figure><p>spline()的中文名为<font color="#FF3030"><strong>样条插值函数</strong></font>，三次样条插值，然而还是不懂原理。</p>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 曲线插值与拟合 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>matlab语法复习</title>
      <link href="/2017/11/09/matlab%E8%AF%AD%E6%B3%95%E5%A4%8D%E4%B9%A0/"/>
      <url>/2017/11/09/matlab%E8%AF%AD%E6%B3%95%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>复习一波matlab，真的是什么都忘了。。。<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="prewords"><a href="#prewords" class="headerlink" title="prewords"></a>prewords</h1><p>首先讲几点matlab语法比较蛋疼的几点，真的是与众不同啊。。。啊啊啊啊</p><ol><li>数组下标的索引是从1开始的</li><li>多维数组的索引是以列为主序的。所以尽量少的用单下标索引数组。</li><li>区间的范围是左闭右闭的原则。(for i = 1:5)</li><li>函数很多都不加括号，例如help tic, tic; toc</li></ol><p>几个非常有用的keys:</p><ul><li>tab自动补全命令</li><li>↑↓方向键来找历史命令</li><li>doc查阅文档</li><li>m file中选中code blocks来执行命令。</li><li>三分点可以续行</li></ul><h1 id="基本的语法"><a href="#基本的语法" class="headerlink" title="基本的语法"></a>基本的语法</h1><ul><li>变量、赋值的概念</li><li>条件判断语句，循环语句等</li></ul><p>初始化预分配一个数组提高效率：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">num = <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="number">100</span>);</div><div class="line"></div><div class="line">ii = <span class="number">1</span>: <span class="number">100</span>;</div><div class="line">num = ii.^<span class="number">2</span>;</div></pre></td></tr></table></figure></p><h1 id="sym的使用"><a href="#sym的使用" class="headerlink" title="sym的使用"></a>sym的使用</h1><p>定义一个变量：syms x y<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">syms x a b</div><div class="line">subs(int(x*<span class="built_in">exp</span>(x), a, b), [a, b], [<span class="number">0</span>, <span class="number">2</span>])</div><div class="line"> </div><div class="line"><span class="built_in">ans</span> =</div><div class="line"> </div><div class="line"><span class="built_in">exp</span>(<span class="number">2</span>) + <span class="number">1</span></div><div class="line"></div><div class="line">syms a b r x y </div><div class="line">solve(<span class="string">'(x-a)^2+(y-b)^2=r^2'</span>,<span class="string">'x'</span>) </div><div class="line">solve(<span class="string">'(x-a)^2+(y-b)^2=r^2'</span>,<span class="string">'y'</span>)</div><div class="line">a = sym(<span class="string">'sqrt(2)'</span>)<span class="comment">%用来保存一个形式变量，而且这些变量是可以参与数值运算的。</span></div></pre></td></tr></table></figure></p><h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%% 画出包络线</span></div><div class="line">&gt;&gt; t = (<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">100</span>:<span class="built_in">pi</span>)';</div><div class="line">&gt;&gt; y1 = <span class="built_in">sin</span>(t)*[<span class="number">1</span>, <span class="number">-1</span>];</div><div class="line">&gt;&gt; y2 = <span class="built_in">sin</span>(t).*<span class="built_in">sin</span>(<span class="number">9</span>*t);</div><div class="line">&gt;&gt; t3 = <span class="built_in">pi</span>*(<span class="number">0</span>:<span class="number">9</span>)/<span class="number">9</span>;</div><div class="line">&gt;&gt; y3 = <span class="built_in">sin</span>(t3).*<span class="built_in">sin</span>(<span class="number">9</span>*t3);</div><div class="line">&gt;&gt; plot(t, y1, <span class="string">'r:'</span>, t, y2, <span class="string">'b'</span>, t3, y3, <span class="string">'bo'</span>)</div><div class="line"></div><div class="line"></div><div class="line">ezplot()<span class="comment">%设置画图的上下界</span></div></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; syms x a b</div><div class="line">&gt;&gt; subs(int(x*<span class="built_in">exp</span>(x), a, b), [a, b], [<span class="number">0</span>, <span class="number">2</span>])</div><div class="line"> </div><div class="line"><span class="built_in">ans</span> =</div><div class="line"> </div><div class="line"><span class="built_in">exp</span>(<span class="number">2</span>) + <span class="number">1</span></div><div class="line"></div><div class="line">syms a b r x y </div><div class="line">solve(<span class="string">'(x-a)^2+(y-b)^2=r^2'</span>,<span class="string">'x'</span>) </div><div class="line">solve(<span class="string">'(x-a)^2+(y-b)^2=r^2'</span>,<span class="string">'y'</span>)</div><div class="line"></div><div class="line">hist画出来的图的纵坐标表示所在区间范围内数字的个数。</div><div class="line"></div><div class="line"></div><div class="line">GM模型以算法的实现</div><div class="line">元胞自动机的科普</div><div class="line">学会画好看的图形</div><div class="line">待续。。。多看一点理论吧</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">matlab向量化的思想，尽量少的使用<span class="keyword">for</span>循环</div><div class="line">什么是运筹学？计算机专业的仿真能力的优势在哪里？</div><div class="line">涂色的函数：fill()</div><div class="line">spline可以修正误差曲线。</div><div class="line">randi([<span class="number">0</span>, <span class="number">100</span>], <span class="number">1</span>, <span class="number">100</span>);</div><div class="line">histogram来画重叠的图像。</div><div class="line">用画图菜单里面的选亮菜单可以造假。。。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&gt;&gt; x = <span class="built_in">rand</span>(<span class="number">1</span>, <span class="number">100</span>);</div><div class="line">&gt;&gt; x = <span class="built_in">rand</span>(<span class="number">1</span>, <span class="number">100</span>).*<span class="number">10</span>;</div><div class="line">&gt;&gt; noise = <span class="built_in">randn</span>(<span class="number">1</span>, <span class="number">100</span>);</div><div class="line">&gt;&gt; y = <span class="number">2</span>*x+<span class="number">5</span>+noise;</div><div class="line">&gt;&gt; figure;</div><div class="line">&gt;&gt; plot(x, y, <span class="string">'b*'</span>);</div><div class="line">&gt;&gt; grid on;</div><div class="line">&gt;&gt; </div><div class="line"></div><div class="line">lsqcurvefit</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
            <tag> mathematical modeling </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>囚徒的困境</title>
      <link href="/2017/11/09/%E5%9B%9A%E5%BE%92%E7%9A%84%E5%9B%B0%E5%A2%83/"/>
      <url>/2017/11/09/%E5%9B%9A%E5%BE%92%E7%9A%84%E5%9B%B0%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>突然发现一门很有意思的课程，在算法竞赛中也是一个十分有意思的分支。不过在算法中，博弈论一般都假定博弈的参与者都会做出最优的选择，且处于平等博弈。当然还有<font color="#FF3030"><strong>非零和博弈</strong></font>啊。<br>可能更新的一系列的博弈论的知识，会结合相关的背景以及例子，讲解后面蕴含的博弈知识。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="一个有趣的例子"><a href="#一个有趣的例子" class="headerlink" title="一个有趣的例子"></a>一个有趣的例子</h1><p>现在抓到两名犯人A， B，给他们这样的选择:</p><ol><li>一名A供认了对方，而对方B没有供认A，那么A无罪释放，B加刑两年。反之亦然。</li><li>若两人互相都没有供认， 那么无罪释放两人。</li><li>若两人互相供认，那么减刑1年。</li></ol><p>这就是非常著名的<font color="#FF3030"><strong>囚徒的困境</strong></font>的问题(prisoners’ dilemma)。</p><p>你会怎么选择呢？</p><h2 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h2><table><thead><tr><th></th><th style="text-align:center"></th><th style="text-align:center">player2</th><th style="text-align:center"></th></tr></thead><tbody><tr><td></td><td style="text-align:center"></td><td style="text-align:center">l</td><td style="text-align:center">r</td></tr><tr><td>player1</td><td style="text-align:center">U</td><td style="text-align:center">(0, 0)</td><td style="text-align:center">(3, -1)</td></tr><tr><td></td><td style="text-align:center">D</td><td style="text-align:center">(-1,3)</td><td style="text-align:center">(1, 1)</td></tr></tbody></table><p>（a, b）a表示player1的收益(payoffs), b表示player2的收益。<br>(0, 0)对应相互揭发的收益。<br>(1, 1)表示相互不揭发的收益。<br>其余的两格表示的是其中一个人揭发对方，另外一个人不揭发对方的收益。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>假设现在我们是犯人player1，我们揣度B的选择：</p><ul><li>假设B选择了l,那么根据收益的大小，我们选择了U。</li><li>假设B选择了r,那么根据收益的大小，我们还是选择了U。</li></ul><p>可见，不论对手选择什么, <font color="#FF3030"><strong>U都是最佳的选择</strong></font>。<br>同理，B选择l是最佳的选择。<br>我们将这样的点定义为<font color="#FF3030"><strong>绝对优势的点</strong></font>。</p><h2 id="得到的结论"><a href="#得到的结论" class="headerlink" title="得到的结论"></a>得到的结论</h2><ul><li><font color="#FF3030"><strong>Don’t play a strictly dominated stategy.</strong></font>（不要选择处于劣势的策略）</li><li><font color="#FF3030"><strong>Put yourself in others’s shoes.</strong></font>(换位思考)</li></ul><h2 id="现实中的囚徒的困境的例子"><a href="#现实中的囚徒的困境的例子" class="headerlink" title="现实中的囚徒的困境的例子"></a>现实中的囚徒的困境的例子</h2><ul><li>公共合作问题(不论对方是努力还是偷懒的，我偷懒的收益总是最大的)</li><li>宿舍卫生问题</li><li>企业之间指定价格</li><li>各国面临全球变暖的问题所采取的方针</li><li>公共资源不会去保护，而是尽可能的索取。</li></ul><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>为了更加方便的描述一种博弈，因此引进符号加以表述。</p><ul><li><p>player:   \(player_i, player_j\)</p></li><li><p>strategies:<br>  \(s_i\):a particular strategy to \(player_i\)<br>  \(S\): the <font color="#FF3030"><strong>set</strong></font> of alternatives to the players<br>  s: a particular play in a game(a strategy <font color="#FF3030"><strong>vector/list</strong></font> and it is confirmed.)</p></li></ul><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1><p>emmm，有没有同学想和我一起学习博弈论啊，可以qq私信我哦。</p>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>c语言函数调用的机制</title>
      <link href="/2017/11/08/c%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2017/11/08/c%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>visio大法好啊，以前都是用word手动绘图的(o(╯□╰)o<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="调试的代码"><a href="#调试的代码" class="headerlink" title="调试的代码"></a>调试的代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> number[N];</div><div class="line">    <span class="keyword">char</span> password[N];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">struct user <span class="title">log_In</span><span class="params">(struct user u)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"请输入用户名：\n"</span>);</div><div class="line">    gets(u.number);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"请输入密码：\n"</span>);</div><div class="line">    <span class="keyword">while</span> ( u.password[i] = getch() )</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ( u.password[i] == <span class="number">13</span> )</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( u.password[i] != <span class="string">'\b'</span> )</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\b \b"</span>);</div><div class="line">            i--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    u.password[i] = <span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> u;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(struct user u)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    FILE *fp;</div><div class="line">    <span class="keyword">char</span> file_str[<span class="number">2</span>*N+<span class="number">1</span>];</div><div class="line">    <span class="keyword">char</span> *number, *password;</div><div class="line"></div><div class="line">    fp = fopen(<span class="string">"F:\\data.txt"</span>, <span class="string">"r"</span>);</div><div class="line">    <span class="keyword">if</span> (!fp)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"error!\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> ( fgets(file_str, <span class="keyword">sizeof</span>(file_str), fp) )</div><div class="line">    &#123;</div><div class="line">        number = strtok(file_str, <span class="string">" "</span>);</div><div class="line">        password = strtok(<span class="literal">NULL</span>, <span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(u.number, number) == <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(u.password, password) == <span class="number">0</span> )</div><div class="line">        &#123;</div><div class="line">            fclose(fp);</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    fclose(fp);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user</span> <span class="title">u</span>;</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"--------------------------------\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"|           用户登录           |\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"--------------------------------\n"</span>);</div><div class="line">    u = log_In(u);</div><div class="line">    <span class="keyword">if</span> ( compare(u) == <span class="number">1</span> )</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"登录成功！\n"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"登录失败！\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>上面的代码模拟的是一个登录系统，是网络对抗老师作为破解密码的例子。<br>我们可以在debug的时候通过单步调试，可以看到c++语言对应的汇编语言的指令。</p><font color="#FF3030"><strong>若仅仅通过汇编语言就能明白程序的意思，这个过程叫做逆向。</strong></font><p>这篇文章的重点是说明<font color="#FF3030"><strong>函数的调用机制</strong></font>。</p><p>先贴上自己画的原理图:</p><div align="center"><br><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1flb1omh4y1j312q0t345o.jpg" alt=""><br></div><p>所要做的几点说明:</p><ol><li>函数内存的调用就是一个栈的模型。</li><li>我们知道调用两个函数的时候，中间会留下一部分的空间来保存<font color="#FF3030"><strong>函数的返回时的信息</strong></font>。<font color="#FF3030"><strong>那么黑客就可以改变指针的方向，改变指针以达到窃取信息的目的。</strong></font></li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>代码中有这样的一段:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FILE *fp;</div><div class="line"><span class="keyword">char</span> file_str[<span class="number">2</span>*N+<span class="number">1</span>];</div><div class="line"><span class="keyword">char</span> *number, *password;</div></pre></td></tr></table></figure></p><p>并不是严格的按照栈的规则来存的。</p><div align="center"><br><img src="http://ww3.sinaimg.cn/large/0060lm7Tly1flb206wu9kj30k10dqglr.jpg" alt=""><br></div><p>可是老师课上演示的完全就是栈来存的呀。可能不同的软件分配内存的方式也是不同的吧emmmm,也有可能我使用的是c++?<br>对了，<font color="#FF3030"><strong>就连函数调用完的指示地址的指针，它的地址也是倒着存的</strong></font>。</p><h2 id="内存的分配机制"><a href="#内存的分配机制" class="headerlink" title="内存的分配机制"></a>内存的分配机制</h2><p>分配的区域的划分：</p><ol><li><font color="#FF3030"><strong>栈</strong></font>.就是那些由编译器在需要的时候分配，在不需要的时候自动清楚的变量的存储区。里面的变量通常是<font color="#FF3030"><strong>局部变量、函数参数</strong></font>等。</li><li><font color="#FF3030"><strong>堆</strong></font>，就是那些由new分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个new就要对应一个delete.如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。</li><li><font color="#FF3030"><strong>自由存储区</strong></font>，就是那些由malloc等分配的内存块，他和堆是十分相似的，不过它是用free来结束自己的生命的。</li><li><font color="#FF3030"><strong>全局/静态存储区</strong></font>，全局变量和静态变量被分配到同一块内存中，在以前的C语言中，<font color="#FF3030"><strong>全局变量又分为初始化的和未初始化</strong></font>的，在C++里面没有这个区分了，他们共同占用同一块内存区。</li><li><font color="#FF3030"><strong>常量存储区</strong></font>，这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改(当然，你要通过非正当手段也可以修改.</li></ol><p>然而我也不是很懂啊，一遇到汇编语言就傻。<br><a href="http://blog.csdn.net/derkampf/article/details/51000466" target="_blank" rel="external">内存分配</a></p><h2 id="几种寄存器的简单的介绍"><a href="#几种寄存器的简单的介绍" class="headerlink" title="几种寄存器的简单的介绍"></a>几种寄存器的简单的介绍</h2><p>寄存器就是能够记忆保存数据的装置。<br>寄存器的种类：</p><ol><li>EIP:程序所执行到的<font color="#FF3030"><strong>位置指示</strong></font>。</li><li>ECP:一种<font color="#FF3030"><strong>计数</strong></font>(count)的寄存器</li><li>EBP:内存栈的<font color="#FF3030"><strong>栈底</strong></font>(bottom)</li><li>ESP:内存栈的<font color="#FF3030"><strong>栈顶</strong></font>(superficial?)</li></ol><p>还有什么EAX，EDI，不是很懂。</p><p>操作的指令</p><ol><li>sub esp, 28h:将一个esp寄存器减去28h(16进制)</li><li>mov ecx, 0Ah:将0Ah传输到ecx寄存器</li><li>lea esi, [ebp-28h]:[ ]中采用相对基址变址的寻址方式表达存储单元，然后传入esi</li><li>rep: 重复一个指令</li></ol><p>还有很多的汇编指令，然而还不是很懂，菜菜的。</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数调用内存分配 </tag>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多线程dp</title>
      <link href="/2017/11/08/%E5%A4%9A%E7%BA%BF%E7%A8%8Bdp/"/>
      <url>/2017/11/08/%E5%A4%9A%E7%BA%BF%E7%A8%8Bdp/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>数位dp</title>
      <link href="/2017/11/07/%E6%95%B0%E4%BD%8Ddp/"/>
      <url>/2017/11/07/%E6%95%B0%E4%BD%8Ddp/</url>
      <content type="html"><![CDATA[<p>有关数字每一位的性质的计数问题<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2089" target="_blank" rel="external">不要62</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><ul><li>给定一个区间[n, m],求在区间内的数字中不包含62(6和2需要连在一起)和4的数字的个数</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>状态设计：dp[i][j]，长度为i的数字，最高位为j的符合条件的数字的个数。</li><li>状态转移方程:<br>j \(\neq\) 4时：<br>dp[i][j] = \(\sum_{k=0}^9 dp[i-1][k](j\neq6 || k\neq2)\)</li><li>边界：dp[0][0] = 1;</li><li>结果:扫一遍需要取到的dp[i][j]，求和.</li></ul><p>思路的博客：<br><a href="http://www.cnblogs.com/wenruo/p/4725005.html" target="_blank" rel="external">不要62</a></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> dp[<span class="number">9</span>][<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> bits[<span class="number">8</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">8</span>; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=<span class="number">9</span>; j++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;=<span class="number">9</span>; k++)&#123;</div><div class="line">            <span class="keyword">if</span>(j != <span class="number">4</span> &amp;&amp; !(j==<span class="number">6</span>&amp;&amp;k==<span class="number">2</span>))&#123;</div><div class="line">                dp[i][j] += dp[i<span class="number">-1</span>][k];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(n)&#123;</div><div class="line">        bits[len++] = n%<span class="number">10</span>;</div><div class="line">        n /= <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    bits[len] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>; i&gt;=<span class="number">1</span>; i--)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;bits[i]; j++)&#123;</div><div class="line">            <span class="keyword">if</span>( j!=<span class="number">4</span> &amp;&amp;!(bits[i+<span class="number">1</span>] ==<span class="number">6</span>&amp;&amp;j ==<span class="number">2</span>))</div><div class="line">                ans += dp[i][j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(bits[i] == <span class="number">4</span>||(bits[i+<span class="number">1</span>] == <span class="number">6</span>&amp;&amp;bits[i] == <span class="number">2</span>))</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)&amp;&amp;n+m!=<span class="number">0</span>)&#123;</div><div class="line">        <span class="comment">//为什么是+1,看递推的过程！表示小于的数字</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve(m+<span class="number">1</span>)-solve(n));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>递归的写法：</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 数位dp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AC自动机</title>
      <link href="/2017/11/06/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
      <url>/2017/11/06/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
      <content type="html"><![CDATA[<p>整理相册的时候发现了很早画的AC自动机的原理图。<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br>AC自动机就是trie+KMP，多个模式串在文本串中跑。<br>最核心的思想就是建立了fail指针。</p><div align="center"><br><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1fl8b3upshjj31kw23v7wj.jpg" alt=""><br></div><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dp优化--连续递推的时间和空间优化</title>
      <link href="/2017/11/05/dp%E4%BC%98%E5%8C%96-%E8%BF%9E%E7%BB%AD%E9%80%92%E6%8E%A8%E7%9A%84%E6%97%B6%E9%97%B4%E5%92%8C%E7%A9%BA%E9%97%B4%E4%BC%98%E5%8C%96/"/>
      <url>/2017/11/05/dp%E4%BC%98%E5%8C%96-%E8%BF%9E%E7%BB%AD%E9%80%92%E6%8E%A8%E7%9A%84%E6%97%B6%E9%97%B4%E5%92%8C%E7%A9%BA%E9%97%B4%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>复习到k阶fibonacci数的时候，老师讲这是比较难的，然而不就是dp优化吗。<br>通过<font color="#FF3030"><strong>化简合并式子</strong></font>减少时间复杂度。<br>通过对前面<font color="#FF3030"><strong>无用的状态的覆盖</strong></font>来减少空间复杂度。(若要查询任意小于等于m的k阶fibonacci数这样的覆盖是不行的，必须全部记录下来。同01背包的一维的滚动数组。)<br>顺便复习一下模板计数dp.<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>k阶斐波那契数列</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><ul><li>若m\(\gt\)k-1, \(f_m = f_{m-1}+f_{m-2}+\ldots+f_{m-k}\)</li><li>若m == k-1, \(f_m\) = 1</li><li>若m &lt; k-1, \(f_m\) = 0</li><li>若k &lt; 2 || m &lt; 0, 不存在</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li><p>方法一：<br>就是按照递推式写就行了</p></li><li><p>方法二：<br>递归，边界条件为m\(\le\)k-1.</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>直接把老师的代码复制过来了<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">Fib</span> <span class="params">( <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span></span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">     <span class="keyword">if</span> ( k &lt;  <span class="number">2</span> || m&lt; <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">     <span class="keyword">if</span> ( m &lt; k<span class="number">-1</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span> ( m == k<span class="number">-1</span> ) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">     <span class="keyword">else</span> &#123;</div><div class="line">         sum = <span class="number">0</span>;</div><div class="line">         <span class="keyword">for</span>( i = <span class="number">1</span>; i &lt;= k; i++)</div><div class="line">                sum += Fib( m - i, k);</div><div class="line">         <span class="keyword">return</span> sum;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>时间复杂度的优化：<br>当m\(\ge\)k-1时：<br>\(f_m = f_{m-1}+f_{m-2}+\ldots+f_{m-k}\),发现后面的k-1项是\(f_{m-1}\)的展开的前k-1项。于是从后面<font color="#FF3030"><strong>借一项</strong></font>\(f_{m-(k+1)}\).<br>可化简为：<br>\(f_m = 2*f_{m-1}-f_{m-(k+1)}\)</p><p>空间复杂度的优化：<br>由于递推式，第m项只和前k项有关，因此k项前面的可以覆盖。使用循环的数组来管理(模数)。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>递归版：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">Fib</span> <span class="params">( <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span></span></div><div class="line"><span class="function"></span>&#123;    </div><div class="line">     <span class="keyword">if</span> ( k &lt;  <span class="number">2</span> || m&lt; <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">     <span class="keyword">if</span> ( m &lt; k<span class="number">-1</span>)  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span>( m == k<span class="number">-1</span> || m == k ) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">     <span class="keyword">else</span></div><div class="line">         <span class="keyword">return</span>  <span class="number">2</span>*Fib( m<span class="number">-1</span>, k) – Fib( m-k<span class="number">-1</span>, k);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>递推版：通项公式未化简，仅优化空间的：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fib</span> <span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> m)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     <span class="keyword">if</span> (k&lt;<span class="number">2</span> || m&lt;<span class="number">0</span>)   <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">     <span class="keyword">if</span> (m&lt;k<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (m == k<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">     <span class="keyword">else</span>&#123;</div><div class="line">         <span class="keyword">int</span> temp[k];</div><div class="line">         <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=k<span class="number">-2</span>; i++)  temp[i] = <span class="number">0</span>;</div><div class="line">         temp[k<span class="number">-1</span>] = <span class="number">1</span>;</div><div class="line">         <span class="keyword">for</span>(i=k; i&lt;=m; i++)&#123;</div><div class="line">              sum = <span class="number">0</span>;</div><div class="line">              <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;k; j++)   sum += temp[j];</div><div class="line">              temp[i%k] = sum;</div><div class="line">         &#125;</div><div class="line">    r=temp[m%k];</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>优化了时间和空间的递推版：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fib</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> m)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     <span class="keyword">if</span> (k&lt;<span class="number">2</span> || m&lt;<span class="number">0</span>)   <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">     <span class="keyword">if</span> (m&lt;k<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span> ((m == k<span class="number">-1</span>) || (m == k))  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">     <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">int</span> temp[k];</div><div class="line">         <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=k<span class="number">-2</span>; i++)  temp[i] = <span class="number">0</span>;</div><div class="line">         temp[<span class="number">0</span>] = temp[k<span class="number">-1</span>] = <span class="number">1</span>;  s = <span class="number">0</span>;</div><div class="line">         <span class="keyword">for</span>(i=k+<span class="number">1</span>; i&lt;=m; i++)&#123;</div><div class="line">              sum = <span class="number">2</span>*temp[(i<span class="number">-1</span>)%k]-s;</div><div class="line">              s = temp[i%k];<span class="comment">//下一个需要减去的项</span></div><div class="line">              temp[i%k] = sum;</div><div class="line">         &#125;</div><div class="line">         r=temp[m%k];</div><div class="line">         <span class="keyword">return</span> r;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h1><p>有n种物品，第i种物品有\(a_i\)个。不同的物品同类不可区分，不同类的可区分。若在这些物品中取m个。有多少种取法？答案模M</p><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>例如：<br>n = m = 3<br>{1, 2, 3}<br>3 = 0+0+3 = 0+1+2 = 0+2+1 = 1+0+2 = 1+1+1 = 1+2+0</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><ul><li>设计状态：dp[i+1][j]:<font color="#FF3030"><strong>从前面i种物品中取j件的方案数</strong></font></li><li>状态转移方程：dp[i+1][j] = \(\sum_{k=0}^{min(a[i], j)} dp[i][j-k]\).表示从i种物品中取出k件，其他的从前面的i-1种物品中选j-k件</li><li>边界： dp[i][0] = 1;</li><li>结果：dp[n][m], 下标从0开始</li></ul><h2 id="优化状态转移方程"><a href="#优化状态转移方程" class="headerlink" title="优化状态转移方程"></a>优化状态转移方程</h2><p>若按照前面的方程进行转移，那么时间复杂度是O\((n*m^2)\).</p><p><font color="#FF3030"><strong>在j-1\(\ge\)a[i]的条件下</strong></font>。<br>\(\sum_{k=0}^{min(a[i], j)} dp[i][j-k]\) = \(\sum_{k=0}^{min(j-1, a[i])} dp[i+1][j-1]+dp[i][j]-dp[i][j-1-a_i]\)<br>时间复杂度降为O(nm).</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> a[MAX_N];</div><div class="line"><span class="keyword">int</span> dp[MAX_N][MAX_M];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=m; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(j<span class="number">-1</span>&gt;=a[i])&#123;</div><div class="line">                dp[i+<span class="number">1</span>][j] = (dp[i+<span class="number">1</span>][j<span class="number">-1</span>]+dp[i][j]-dp[i][j<span class="number">-1</span>-a[i]]+M)%M;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                dp[i+<span class="number">1</span>][j] = (dp[i+<span class="number">1</span>][j<span class="number">-1</span>]+dp[i][j])%M;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[n][m]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h1><p>划分数，计数dp的入门题，无优化</p><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><ul><li>给定一个数n, 将其划分成m个<font color="#FF3030"><strong>非负整数</strong></font>，求方案数,最后模M</li><li>例如：n = 4, m=3:4 = 1+1+2 = 1+3 = 2+2</li></ul><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><ul><li>状态设计：dp[i][j]：j划分成i的方案数</li><li>状态转移： dp[i][j]  = dp[i][j-i]+dp[i-1][j].<font color="#FF3030"><strong>实际的意义：若将n划分成m， 如果对于每个\(a_i\)&gt;0,那么{\(a_i-1\)}就对应n-m的m划分</strong></font>。<br>若存在\(a_i == 0\)，那么就对应了n-1的m划分</li><li>边界：dp[0][0] = 1;</li><li>结果：dp[m][n]</li></ul><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> dp[MAX_M][MAX_N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(j-i&gt;=<span class="number">0</span>)&#123;</div><div class="line">                dp[i][j] = (dp[i<span class="number">-1</span>][j]+dp[i][j-i])%M;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1><p>困成傻逼，明天再校验吧emmmmm<br>2017年11月6日01:13:07<br>果然是有错误的，<br>另外突然还想到了大霸计算超几何分布其实也是一种计算的优化。<br>还有树状数组可以优化的例子。<br>待更新吧。。。。。。</p>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> dp递推关系化简 </tag>
            
            <tag> 计数dp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>状压dp</title>
      <link href="/2017/11/04/%E7%8A%B6%E5%8E%8Bdp/"/>
      <url>/2017/11/04/%E7%8A%B6%E5%8E%8Bdp/</url>
      <content type="html"><![CDATA[<p>状态压缩：将集合的状态用一个数字表示，这个数字的每一位是0或者1，表示着一个元素的两种状态。<br>此处应该介绍一下<font color="#FF3003"><strong>位运算</strong></font>和性质(脑补一下？)<br>几大类状压dp:</p><ul><li>TSP问题</li><li>密铺问题(轮廓线法)</li><li>插头dp</li><li>传统的状压dp问题<br>后面的两类问题并不会。</li></ul><a id="more"></a><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>TSP问题</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><ul><li>从0开始，经过图中<font color="#FF3003"><strong>所有的点有且仅有一次</strong></font>，最终回到原点</li><li>这个图是完全图</li><li>问最小的路径距离</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>状态设计: dp[i][state]:到达i这个点，状态为state的最短路,state的二进制每一位为1表示访问过了，0表示没有被访问过</li><li>状态转移：<br>if(state|(1&lt;&lt;j) == 0) dp[j][state|(1&lt;&lt;j)] = min(dp[j][state|(1&lt;&lt;j)], dp[i][state]+dis[i][j]);</li><li>边界：dp[0][0] = 0;</li><li>结果: dp[0][(1&lt;&lt;n)-1]</li></ul><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>注意min()被重写了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> dis[<span class="number">16</span>][<span class="number">16</span>];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> dp[<span class="number">17</span>][<span class="number">1</span>&lt;&lt;<span class="number">16</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x == <span class="number">-1</span>) <span class="keyword">return</span> y;</div><div class="line">    <span class="keyword">if</span>(y == <span class="number">-1</span>) <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">if</span>(x&lt;=y) <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> state=<span class="number">0</span>; state&lt;(<span class="number">1</span>&lt;&lt;n); state++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(dp[i][state] != <span class="number">-1</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(dp[j][state|(<span class="number">1</span>&lt;&lt;j) == <span class="number">0</span>])&#123;<span class="comment">//j点没有被访问过，注意中括号的位置！</span></div><div class="line">                        dp[j][state|(<span class="number">1</span>&lt;&lt;j)] = min(dp[i][state]+dis[i][j],</div><div class="line">                                                  dp[j][state|(<span class="number">1</span>&lt;&lt;j)]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; j++)&#123;</div><div class="line">                <span class="built_in">cin</span>&gt;&gt;dis[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        n++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line"></div><div class="line">                    dis[i][j] = min(dis[i][j], dis[i][k]+dis[k][j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        solve();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><a href="http://poj.org/problem?id=2411" target="_blank" rel="external">Mondriaan’s Dream</a></p><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><ul><li>在n*m的格子中铺满1*2或者2*1的格子</li><li>一共有多少种铺设方案</li></ul><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><ul><li>状态设计: dp[i][state]:第i行在前面i-1行<font color="#FF3003"><strong>全部铺满</strong></font>的情况下的状态state(因为第i-1行铺设的时候可能会竖着铺影响到第i行，把所有被第i-1行影响到的格子记录成state)</li><li><p>状态转移:<br>①若第j列被第i-1行影响了，那么跳这一列在第j+1列铺<br>②竖着铺，影响到第i+1行的第j列的格子(改变nex).<br>③横着铺，若第j+1列是空着的，那么直接跳到第j+2列铺，否则在第j列只能竖着铺。（横着铺不影响第i+1行的状态，因此不需要改变nex）</p></li><li><p>边界: dp[0][0] = 1;（个人感觉边界的起始点设置的很神奇，空即是有还是无?）</p></li><li>结果: dp[n][0],（行从0开始到n-1）state == 0<font color="#FF3003"><strong>表示第n+1行上面没有铺设任何的格子</strong></font>。 </li></ul><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> h, w;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">11</span>;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[maxn+<span class="number">3</span>][<span class="number">1</span>&lt;&lt;maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> column, <span class="keyword">int</span> row, <span class="keyword">int</span> state, <span class="keyword">int</span> nex)</span></span>&#123;</div><div class="line">    <span class="comment">//nex表示下一行的状态</span></div><div class="line">    <span class="keyword">if</span>(column == w)&#123;</div><div class="line">        dp[row+<span class="number">1</span>][nex] += dp[row][state];</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//这个一开始想错了emmmmm，注意位运算表示的意义</span></div><div class="line">    <span class="comment">// 区分&gt;0和 == 1 的差别！</span></div><div class="line">    <span class="keyword">if</span>(((<span class="number">1</span>&lt;&lt;column)&amp;state) &gt; <span class="number">0</span>)dfs(column+<span class="number">1</span>, row, state, nex);</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      dfs(column+<span class="number">1</span>, row, state, (nex|(<span class="number">1</span>&lt;&lt;column)));</div><div class="line">      <span class="keyword">if</span>(column+<span class="number">1</span>&lt;w&amp;&amp;(state&amp;(<span class="number">1</span>&lt;&lt;(column+<span class="number">1</span>))) == <span class="number">0</span>)</div><div class="line">            dfs(column+<span class="number">2</span>, row, state, nex);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;h, &amp;w)&amp;&amp;h+w!=<span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//初始条件很有意思，它的实际意义呢？</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;h; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> state = <span class="number">0</span>; state&lt;(<span class="number">1</span>&lt;&lt;w); state++)&#123;</div><div class="line">                <span class="keyword">if</span>(dp[i][state])&#123;</div><div class="line">                    dfs(<span class="number">0</span>, i, state, <span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp[h][<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1><p><a href="https://njzwj.github.io/2017/06/28/plug-dp-101/" target="_blank" rel="external">插头dp,轮廓线题目推荐</a><br>看艾教的ppt,很多都不会emmmm被菜醒。</p>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区间dp</title>
      <link href="/2017/11/01/%E5%8C%BA%E9%97%B4dp/"/>
      <url>/2017/11/01/%E5%8C%BA%E9%97%B4dp/</url>
      <content type="html"><![CDATA[<p>区间dp模板题和一般性的思路<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><p>一个大的区间可以分解为小的区间。并且这两个问题本质是一样的。并且可以通过<font color="#FF3030"><strong>合并子问题的过程得到较大区间的结果</strong></font>。<br>若使用递推的方式解决问题，那么要先<font color="#FF3030"><strong>枚举区间的长度</strong></font>。</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>矩阵乘法：求一系列的矩阵的乘法，按照一定的结合律，使得运算量最小。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>枚举最后一次乘法的位置，转移的复杂度为O(n).</li><li>合法的子区间的个数，故状态数是O(\(n^2\)),总的时间复杂度为O(\(n^3\))</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn];</div><div class="line"><span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dp));<span class="comment">//因为为了求最小值，初始值的时候设为无穷大。</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) dp[i][i] = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(dp[l][r]!=<span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> dp[l][r];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l ;i&lt;r; i++)&#123;</div><div class="line">        dp[l][r] = min(dp[l][r], dfs(l, i)+dfs(i+<span class="number">1</span>, r)+a[l<span class="number">-1</span>]*a[i]*a[r]);<span class="comment">//左边矩阵的次数+右边的次数+左右合并的次数。</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> f[l][r];</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dfs(<span class="number">1</span>, n));</div></pre></td></tr></table></figure><h1 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h1><p>括号匹配。给一个括号的序列。选择一个字序列，使匹配的括号数最大。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>发现模式规律：</p><ul><li>空串括号匹配(初始化的时候)</li><li>若s括号匹配，那么(s)与[s]是括号匹配的</li><li>若s, t括号匹配，那么st是括号匹配的</li></ul><p>对于区间[l, r]，若\(S_l == S_r\), 则其可由[l+1, r-1]转移得到。<br>枚举中间点m，认为是[l, m]和[m+1, r]的组合</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> x = s[l];</div><div class="line">    <span class="keyword">char</span> y = s[r];</div><div class="line">    <span class="keyword">return</span> x == <span class="string">'('</span>&amp;&amp;y == <span class="string">')'</span> || x == <span class="string">'['</span>&amp;&amp;y == <span class="string">']'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)<span class="comment">//初始化</span></div><div class="line">    dp[i][i+<span class="number">1</span>] = match(i, i+<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">2</span>; len&lt;n; len++)&#123;<span class="comment">//枚举区间的长度</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, j; (j = i+len)&lt;=n; i++ )&#123;<span class="comment">//第一种匹配的方式</span></div><div class="line">        dp[i][j] = dp[i+<span class="number">1</span>][j<span class="number">-1</span>]+match(i, j);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m=i; m&lt;j; m++)&#123;<span class="comment">//第二种划分的方法</span></div><div class="line">        dp[i][j] = max(dp[i][j], dp[i][m]+dp[m+<span class="number">1</span>][j]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[<span class="number">1</span>][n]&lt;&lt;<span class="number">1</span>);</div></pre></td></tr></table></figure><h1 id="石子合并问题"><a href="#石子合并问题" class="headerlink" title="石子合并问题"></a>石子合并问题</h1><p>N个石子排成一排，每次合并的代价为两堆石子的数量之和，并且只能是<font color="#FF3030"><strong>相邻</strong></font>的两堆石子合并。（想想不相邻的石子合并是什么问题）</p><ul><li>f[i][j] = min{f[i][k]+f[k+1][j]}+a[i]+\(\ldots \)+a[j]，在第k个位置分割</li><li>预处理前缀和</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">partial_sum(a+<span class="number">1</span>, a+n+<span class="number">1</span>, s+<span class="number">1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">1</span>; len&lt;n; len++)&#123;<span class="comment">//枚举r-l</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, j; (j=i+len)&lt;=n; i++)&#123;</div><div class="line">        dp[i][j] = INT_MAX;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=i; k&lt;j; k++)&#123;</div><div class="line">            dp[i][j] = min(dp[i][j], dp[i][k]+dp[k+<span class="number">1</span>][j]);</div><div class="line">        &#125;</div><div class="line">        dp[i][j] += s[j]-s[i<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[<span class="number">1</span>][n]);</div></pre></td></tr></table></figure><h2 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h2><p>若N个石子绕成一个环，求最小的合并的个数。<br>method①：枚举断开的位置.时间复杂度O(\(n^4\))</p><p>method②：在原链的基础上，后面再接一条链。最后扫描一遍所有长度为n的合并的次数的最小值。时间复杂度为O(\(n^3\));</p><h1 id="决策单调性和四边形不等式优化"><a href="#决策单调性和四边形不等式优化" class="headerlink" title="决策单调性和四边形不等式优化"></a>决策单调性和四边形不等式优化</h1><blockquote><p>上面的石子合并问题，可以优化到O(\(n^2\)).</p></blockquote><p>定义：</p><ul><li>对于区间[l, r],存在一个决策点k，使得分为区间[l, k]和区间[k+1, r]后的代建最小，记w[l][r] = k</li><li>经过找规律，打表，可以发现<font color="#FF3030"><strong>w[l][r-1]\(\le \)w[l][r]\(\le\) w[l+1][r]</strong></font>.</li><li>通过决策单调性，可以将时间复杂度降为O(\(n^2\))</li></ul><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">partial_sum(a+<span class="number">1</span>, a+n+<span class="number">1</span>, s+<span class="number">1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;<span class="comment">//初始化</span></div><div class="line">    dp[i][i+<span class="number">1</span>] = a[i] + a[i+<span class="number">1</span>];</div><div class="line">    w[i][i+<span class="number">1</span>] = i;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">2</span>; len&lt;n; len++)&#123;<span class="comment">//枚举r-l</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, j; (j=i+len)&lt;=n; i++)&#123;</div><div class="line">        dp[i][j] = INT_MAX;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = w[i][j<span class="number">-1</span>]; k&lt;=w[i+<span class="number">1</span>][j]; k++)&#123;</div><div class="line">            <span class="keyword">if</span>(dp[i][j]&lt;=dp[i][k]+dp[k+<span class="number">1</span>][j]) <span class="keyword">continue</span>;</div><div class="line">            dp[i][j] = dp[i][k] + dp[k+<span class="number">1</span>][j];</div><div class="line">            w[i][j] = k;<span class="comment">//记录决策点</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    f[i][j] += s[j]-s[i<span class="number">-1</span>];</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[<span class="number">1</span>][n]);</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 区间dp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线性dp</title>
      <link href="/2017/10/31/%E7%BA%BF%E6%80%A7dp/"/>
      <url>/2017/10/31/%E7%BA%BF%E6%80%A7dp/</url>
      <content type="html"><![CDATA[<p>线性dp<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="一般的线性递推式"><a href="#一般的线性递推式" class="headerlink" title="一般的线性递推式"></a>一般的线性递推式</h1><p>\( a_n = \sum_1^m c_i a_{n-i}\)</p><p>特别的，m=2, \(c_1 = c_2 = a_1 = a_2 = 1\), 为斐波那契数列。<br>解决的方法： </p><ul><li>通项公式。然而在算法竞赛中并不适用</li><li>快速幂(此时应该复习一波矩阵的乘法)</li><li><del><font color="#FF3030"><strong>OEIS大法</strong></font></del></li></ul><h1 id="最长上升子序列-严格单调增"><a href="#最长上升子序列-严格单调增" class="headerlink" title="最长上升子序列(严格单调增)"></a>最长上升子序列(严格单调增)</h1><p>一般的解法：</p><h3 id="更优的解法：O-nlogn"><a href="#更优的解法：O-nlogn" class="headerlink" title="更优的解法：O(nlogn)"></a>更优的解法：O(nlogn)</h3><ul><li>状态：dp[i]: 长度为i的上升子序列的最末元素.若有多个长度为i的上升子序列，则记录其中最小的。那么dp[i] &lt; dp[i+1],即dp[]单调增</li><li>对于每个\(A_i\),找j满足\(d_{j-1}&lt;A_i \le d_j\), 然后令\(d_j = A_i\)</li><li>j可以使用二分查找lower_bound()</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LIS</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;</div><div class="line">    dp[<span class="number">0</span>] = num[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(num[i]&gt;dp[len<span class="number">-1</span>])</div><div class="line">            dp[len++] = num[i];</div><div class="line">        <span class="keyword">else</span></div><div class="line">            dp[lower_bound(dp, dp+len, num[i])-dp] = num[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, LIS());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>若记录数字，那么就相当于记录一个前面的路径即可.(路径是逆序的)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn];</div><div class="line"><span class="keyword">int</span> id[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">7</span></div><div class="line"><span class="comment">1 5 3 4 6 2 7</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LIS</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;</div><div class="line">    dp[<span class="number">0</span>] = num[<span class="number">0</span>];</div><div class="line">    pre[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    id[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(num[i]&gt;dp[len<span class="number">-1</span>])&#123;</div><div class="line">            pre[i] = id[len<span class="number">-1</span>];</div><div class="line">            id[len] = i;<span class="comment">//记录点的编号</span></div><div class="line">            dp[len++] = num[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//若要替换新的点，记录这个点前面的编号</span></div><div class="line">            <span class="keyword">int</span> index = lower_bound(dp, dp+len, num[i])-dp;</div><div class="line">            id[index] = i;</div><div class="line">            pre[i] = pre[index];</div><div class="line">            dp[index] = num[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</div><div class="line">        <span class="keyword">int</span> ans = LIS();</div><div class="line">        <span class="keyword">int</span> index;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(num[i] == dp[ans<span class="number">-1</span>])&#123;</div><div class="line">                index = i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, num[index]);</div><div class="line">        <span class="keyword">while</span>(pre[index] != <span class="number">-1</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, num[pre[index]]);</div><div class="line">            index = pre[index];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>数字三角形②<br>路径的权值mod m的最大值</p><ul><li>表示状态：f[i][j][k]:表示第i行第j列的路径和mod m是否等于k，记录一个bool值。</li><li>答案：最后扫描一遍最后一行就可以了</li></ul><p>数字三角形③<br>路径必须要经过中间的某个点：</p><ul><li>method①：将这一行将数字三角形分成两部分，做两遍dp.</li><li>method②：将必须经过的点<font color="#FF3030"><strong>设置一个非常大的权值</strong></font>，从而dp的时候较大的值一定会选择这个点。最后的答案减去这个比较大的值就行了。</li></ul><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1><p>补充lrj紫书的习题。</p>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 线性dp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>背包问题</title>
      <link href="/2017/10/31/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2017/10/31/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>一类经典的背包问题<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0/1背包"></a>0/1背包</h1><p>有N件物品和一个容量为V的背包。第i件物品的体积是c[i], 价值是w[i], 求解将哪些物品放入背包中使价值最大。<br>一个错误的思路就是贪心，然而是错误的。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>适用的范围：仅限制于整数，当然浮点数的范围很小的时候，那么可以转变成整数。</p><ul><li>状态设计：dp[i][j]: 表示前面的i件物品，放入到容量为j的背包所能获得的最大的价值</li><li>状态转移方程: f[i][j] = max{f[i-1][j], f[i-1][j-c[i]]+w[i]}</li><li>边界：</li><li>结果:dp[N][1~V]</li></ul><p>时间复杂度无法优化，空间复杂度依旧可以优化：<br>f[i]仅与f[i-1]有关,注意枚举体积的时候必须<font color="#FF3030"><strong>逆序枚举</strong></font>。否则会变成完全背包问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = V; j&gt;=c[i]; j--)&#123;</div><div class="line">            dp[j] = max(dp[j], dp[j-c[i]]+w[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>初始化：<br>若要求背包放满：</p><blockquote><p>f[0] = 0, f[1~N] = \(-\infty\), 那么解就是f[N]</p></blockquote><p>若不要求背包放满：</p><blockquote><p>f[0~N] = 0;</p></blockquote><h1 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h1><p>物品无限<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = c[i]; j&lt;=V; j++)&#123;</div><div class="line">            dp[j] = max(dp[j], dp[j-c[i]]+w[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h1 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h1><p>N种物品和一个容量为V的背包。第i种物品最多有n[i]件可用，每件的费用是c[i],价值w[i],求解不超过件数的限制，使价值最大。<br>0/1背包和完全背包是多重背包的特例。</p><p>二进制拆分：<br>1， 2， 4，… \(2^k, n[i]-2_{k+1}+1\).这些数的和为n[i], 且任意数的组合可以得到0~n[i]之间的数字。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;n[i]; n[i]-=k, k&lt;&lt;=<span class="number">1</span>)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=V; j&gt;=k*c[i]; j--)</div><div class="line">            dp[j] = max(dp[j], dp[j-k*c[i]]+k*w[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=V; j&gt;=n[i]*c[i]; j--)&#123;</div><div class="line">        dp[j] = max(dp[j], dp[j-n[i]*c[i])+n[i]*w[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>单调队列怎么优化？</p><h1 id="二维背包"><a href="#二维背包" class="headerlink" title="二维背包"></a>二维背包</h1><p>第i件物品有两种代价a[i], b[i].</p><ul><li>状态描述：dp[i][j][k],前i件物品，第一种代价花费j, 第二种代价花费k的最大价值</li><li>状态转移方程：dp[i][j][k] = max{dp[i-1][j][k], dp[i-1][v-a[i]][u-b[i]]+w[i]}</li></ul><p>当然和前面的一样，可以减小空间复杂度。</p><h1 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h1><p>把所有的物品分成若干个组，每个组中最多选择一件，求最大价值。</p><ul><li>状态描述：dp[k][v]:表示前k组物品花费费用v能够取到的最大的价值。</li><li>状态转移方程：dp[k][j] = max{dp[k-1][j], dp[k-1][j-c[i]]+w[i]}</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>注意枚举的顺序！！<br>因为这一组中要么都不选，要么只能选择一个。所以要<font color="#FF3030"><strong>倒过来枚举</strong></font>(01背包就是倒过来枚举的，这样最多只能一个)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; G;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;G.size(); k++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=V; j; j--)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[k].size(); i++)&#123;</div><div class="line">                <span class="keyword">int</span> p = G[k][i];<span class="comment">//物品的编号</span></div><div class="line">                <span class="keyword">if</span>(c[p]&gt;j) <span class="keyword">continue</span>;</div><div class="line">                dp[j] = max(dp[j], dp[j-c[p]]+w[p]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DAG上的动态规划</title>
      <link href="/2017/10/30/DAG%E4%B8%8A%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2017/10/30/DAG%E4%B8%8A%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      <content type="html"><![CDATA[<p>这篇博文DAG上的dp分为:<br>有终点的dp(最优解为dp[T])和无终点的dp(最优的结果最后扫描一遍dp[])，注意状态转移的思想和求最小字典序的贪心思想。<br>主要就是lrj紫书的笔记吧。<br><a id="more"></a></p><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>由于NYOJ这个时候挂了。我只能复述一下题意了。</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><ul><li>有n个矩形，有长和宽</li><li>一个矩形A(a, b), 另外一个矩形B(c, d)。A能嵌套在B中当且仅当a&lt;c&amp;&amp;b&lt;d || a&lt;d&amp;&amp;b&lt;d(注意没有等号)</li><li>思考一下如果有等号怎么做？(加一个vis[]数组，防止dfs的时候陷入死循环。)</li><li>问最多能嵌套多少个矩形？</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul><li>一维排序，另外的一维求最大的上升子序列。由于比较的简单，就不给代码了。</li></ul><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul><li>若矩形A可以嵌套在B中，那么就从A向B连一条边</li><li>问题转化为了DAG上面的最长路问题。</li><li>状态设置：dp[i]：<font color="#FF3003"><strong>表示从i号节点开始的最长路</strong></font>。</li><li>状态转移方程：dp[i] = max{dp[j]+1|(i, j)\(\subset\)E}.</li><li>边界： 最大的矩形dp[]=1（代码中不需要额外的设置边界，但是有的题目需要）</li><li>结果：max{dp[i]| \(i \in (0, n-1)\)}.编号从0开始</li></ul><h1 id="未检测正确性的代码"><a href="#未检测正确性的代码" class="headerlink" title="未检测正确性的代码"></a>未检测正确性的代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rectangle</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">int</span> a, b;</div><div class="line">&#125;rect[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> G[maxn][maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn];</div><div class="line"><span class="comment">//bool vis[maxn];</span></div><div class="line"><span class="comment">//若相等大小的矩形可以嵌套在一起，那么必须要加一个vis[]标记。因为在</span></div><div class="line"><span class="comment">//递归的时候若两个相等的时候，没有加入之前访问的标记，那么就会陷入一个相互嵌套的</span></div><div class="line"><span class="comment">//死循环，因此要标记一个已经访问的矩形</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(dp[u]&gt;<span class="number">0</span>) <span class="keyword">return</span> dp[u];</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="comment">//vis[u] = true;</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = rect[i].id;</div><div class="line">        <span class="comment">//if(vis[v]) continue;</span></div><div class="line">        <span class="keyword">if</span>(G[u][v])&#123;</div><div class="line">            ans = max(ans, dfs(v)+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[u] = ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(rectangle aa, rectangle bb)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>((aa.a &lt; bb.a &amp;&amp; aa.b&lt;=bb.b)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(aa.a == bb.a)&#123;</div><div class="line">        <span class="keyword">if</span>(aa.b&lt;=bb.b) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pint_ans</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="keyword">sizeof</span>(G));</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> a, b;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">            rect[tot].id = tot;</div><div class="line">            <span class="keyword">if</span>(a&lt;=b)&#123;</div><div class="line">                rect[tot].a = a;</div><div class="line">                rect[tot++].b = b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                rect[tot].a = b;</div><div class="line">                rect[tot++].b = a;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tot; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;tot; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(rect[i].a&lt;rect[j].a &amp;&amp; rect[i].b&lt;rect[j].b)</div><div class="line">                    G[i][j] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(rect[i].a&lt;rect[j].b &amp;&amp; rect[i].b&lt;rect[j].a)</div><div class="line">                    G[i][j] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(rect, rect+n, cmp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, G[i][j]);</div><div class="line">        &#125;<span class="built_in">printf</span>(<span class="string">"\n"</span>);&#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, rect[i].a, rect[i].b);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u = rect[i].id;</div><div class="line">            dfs(u);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            ans = max(ans, dp[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后我就思考了一下，发现记忆化dp的时候并不需要从较小的矩形开始。从任意的点开始dfs然后记忆化就好了(想象那一棵dfs树)(<font color="#FF3003"><strong>想想为什么不需要从根部向叶子进行记忆化？因为任何一个子结构一旦被计算完成了，那么后面需要再次计算这样的子结构的时候，不可能会有更优的解，因此不需要更改。总之，一旦子问题探索完，那么dp[i]的值就不会更改。这也是能够记忆化的一个重要的条件</strong></font>)。于是并不需要前面代码记录点的id.<br>下面是精简后的代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rectagle</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> a, b;</div><div class="line">&#125;rect[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">bool</span> G[maxn][maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(dp[u]&gt;<span class="number">0</span>) <span class="keyword">return</span> dp[u];</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(G[u][i])&#123;</div><div class="line">            ans = max(ans, dfs(i)+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[u] = ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        <span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="keyword">sizeof</span>(G));</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> a, b;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">            <span class="keyword">if</span>(a&lt;=b)&#123;</div><div class="line">                rect[i].a = a;</div><div class="line">                rect[i].b = b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                rect[i]. a = b;</div><div class="line">                rect[i].b = a;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(rect[i].a&lt;rect[j].a&amp;&amp;rect[i].b&lt;rect[j].b) G[i][j] = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(rect[i].a&lt;rect[j].b&amp;&amp;rect[i].b&lt;rect[i].a) G[i][j] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n ;i++)&#123;</div><div class="line">            dfs(i);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        for(int i=0; i&lt;n ;i++) printf("%d ", dp[i]);</span></div><div class="line"><span class="comment">//        printf("\n");</span></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n ;i++)&#123;</div><div class="line">            ans = max(ans, dp[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="更多的思考"><a href="#更多的思考" class="headerlink" title="更多的思考"></a>更多的思考</h2><p>前面我们定义为dp[i]:以i为起点的最长路。那么我们可不可以定义<font color="#FF3003"><strong>以i为终点的最长路</strong></font>呢？答案是肯定的。这个时候，我们可以把G[][]边的记录变成revG[][]。（相当于做最长下降子序列。dp[]的边界相当于是最小矩形，dp[] = 1.前面的边界相当于最大的矩形dp[]=1.<font color="#FF3030"><strong>dp一定是从小向大确定的！</strong></font>）</p><h2 id="打印字典序最小的矩形序号"><a href="#打印字典序最小的矩形序号" class="headerlink" title="打印字典序最小的矩形序号"></a>打印字典序最小的矩形序号</h2><p>加一个递归函数：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_ans</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, u);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(G[u][i]&amp;&amp;dp[u] == dp[i]+<span class="number">1</span>)&#123;</div><div class="line">            print_ans(i);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="进一步的思考"><a href="#进一步的思考" class="headerlink" title="进一步的思考"></a>进一步的思考</h3><p>上面的打印最小字典序很理所当然。那么用我们之前的dp[i]表示以i节点为终点的状态时，就比较的难以打印出来。为什么？<br>因为按照第一种状态描述的话，搜索的顺序是顺序的。而字典序最小就是一种的顺序的<font color="#FF3003"><strong>贪心思想</strong></font>。而倒着打印的时候，<font color="#FF3003"><strong>哪怕后面的额再小，只要前面的很小，那么它就不是最优的。</strong></font></p><h2 id="打印所有的最长路径。"><a href="#打印所有的最长路径。" class="headerlink" title="打印所有的最长路径。"></a>打印所有的最长路径。</h2><p>用一个数组来记录。到达终点的时候再打印一条路径。回溯到上一个节点。到达新的终节点的时候再打印路径。<br>感觉用stack就可以了。</p><h1 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h1><p>硬币问题</p><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><ul><li>给定目标的总价值S，n种面值的硬币</li><li>每种硬币的数目无限</li></ul><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>这里以最长路径为例：</p><ul><li>确认状态：dp[i]：从i价值到0价值的最长路径</li><li>状态转移方程：dp[s] = max{dp[s], dp[s-value[i]]+1|\(i \in (0, n)\)}</li><li>边界：dp[0] = 0;</li><li>答案：dp[S]</li></ul><h2 id="未经证明的代码"><a href="#未经证明的代码" class="headerlink" title="未经证明的代码"></a>未经证明的代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_value = <span class="number">1e4</span>+<span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="keyword">int</span> value[maxn];</div><div class="line"><span class="keyword">int</span> n, S;</div><div class="line"><span class="keyword">int</span> dp[max_value];</div><div class="line"><span class="keyword">int</span> dp2[max_value];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> S)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(S == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(dp[S]&gt;=<span class="number">0</span>) <span class="keyword">return</span> dp[S];</div><div class="line">    <span class="comment">//printf("%d\n", S);</span></div><div class="line">    <span class="keyword">int</span> ans = INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(value[i]&lt;=S)</div><div class="line">        ans = min(ans, dfs(S-value[i])+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[S] = ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> S)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(S == <span class="number">0</span>) <span class="keyword">return</span> dp2[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(dp2[S]&gt;=<span class="number">0</span>) <span class="keyword">return</span> dp2[S];</div><div class="line">    <span class="comment">//printf("%d\n", S);</span></div><div class="line">    <span class="keyword">int</span> ans = -INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(value[i]&lt;=S)</div><div class="line">        ans = max(ans, dfs2(S-value[i])+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp2[S] = ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;S, &amp;n))&#123;</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="built_in">memset</span>(dp2, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;value[i]);</div><div class="line">        &#125;</div><div class="line">        dfs(S);</div><div class="line">        dfs2(S);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"最大的数目：%d\n"</span>, dp2[S]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"最小的数目：%d\n"</span>, dp[S]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>递推版本,字典序最小<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">15 6</span></div><div class="line"><span class="comment">1 2 7 8 12 50</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_value = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="keyword">int</span> dp[max_value];</div><div class="line"><span class="keyword">int</span> value[maxn];</div><div class="line"><span class="keyword">int</span> n, S;</div><div class="line"><span class="keyword">int</span> maxv[max_value], minv[max_value];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_ans</span><span class="params">(<span class="keyword">int</span> d[], <span class="keyword">int</span> S)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(d[S-value[i]]+<span class="number">1</span> == d[S])&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, value[i]);</div><div class="line">            print_ans(d, S-value[i]);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;S, &amp;n))&#123;</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;value[i]);</div><div class="line">        maxv[<span class="number">0</span>] = minv[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=S; i++)&#123;</div><div class="line">            minv[i] = INF;</div><div class="line">            maxv[i] = -INF;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=S; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(value[j]&lt;=i)&#123;</div><div class="line">                    <span class="keyword">if</span>(minv[i-value[j]] != INF)</div><div class="line">                        minv[i] = min(minv[i], minv[i-value[j]]+<span class="number">1</span>);</div><div class="line">                    <span class="keyword">if</span>(maxv[i-value[j]]!= -INF)</div><div class="line">                        maxv[i] = max(maxv[i], maxv[i-value[j]]+<span class="number">1</span>);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"最大需要的硬币数：%d\n"</span>, maxv[S]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"最小需要的硬币数：%d\n"</span>, minv[S]);</div><div class="line">        print_ans(maxv, S);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        print_ans(minv, S);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>非递归打印字典最小序。这在dijkstra里面记录最短路径的道理也是相同的。<br>用两个数组保存状态<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> path_min[max_value];</div><div class="line"><span class="keyword">int</span> path_max[max_value];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_ans</span><span class="params">(<span class="keyword">int</span> d[], <span class="keyword">int</span> S)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(S)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, value[d[S]]);<span class="comment">//printf("%d ", d[S])是硬币的序号最小值</span></div><div class="line">        S -= value[d[S]];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=S; i++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</div><div class="line">        <span class="keyword">if</span>(value[j]&lt;=i)&#123;</div><div class="line">            <span class="keyword">if</span>(minv[i-value[j]] != INF)&#123;</div><div class="line">                <span class="keyword">if</span>(minv[i]&gt;minv[i-value[j]]+<span class="number">1</span>)&#123;</div><div class="line">                    path_min[i] = j;</div><div class="line">                    minv[i] = minv[i-value[j]]+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(maxv[i-value[j]] != -INF)&#123;</div><div class="line">                <span class="keyword">if</span>(maxv[i]&lt;maxv[i-value[j]]+<span class="number">1</span>)&#123;</div><div class="line">                    path_max[i] = j;</div><div class="line">                    maxv[i] = maxv[i-value[j]]+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>若j的枚举顺序是从<font color="#FF3030"><strong>大到小</strong></font>的，那么应该改成下面的带等号。目的是使字典序最小。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(minv[i]&gt;=minv[i-value[j]]+<span class="number">1</span>)</div><div class="line"><span class="keyword">if</span>(maxv[i]&lt;=maxv[i-value[j]]+<span class="number">1</span>)</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> DAG最长路/最短路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树形dp入门</title>
      <link href="/2017/10/25/%E6%A0%91%E5%BD%A2dp%E5%85%A5%E9%97%A8/"/>
      <url>/2017/10/25/%E6%A0%91%E5%BD%A2dp%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>dp真的好难啊QAQ<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.luogu.org/problem/show?pid=1352" target="_blank" rel="external">P1352 没有上司的舞会</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><ul><li>每一个人都有一个快乐程度\(R_i\)</li><li>若一个人参见了晚会，那么他的上司不能参加晚会</li><li>求最大的快乐程度</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>确认状态：dp[u][state]:若state == 0, 表示不选择\(node_u\)所得到的最大的快乐指数； 若state == 1, 表示选择\(node_u\)得到的最大的快乐指数。</li><li>状态转移方程：<br>dp[u][0] = \(\sum_{allson} min(dp[v][0], dp[v][1])\);<br>dp[u][1] = \(\sum dp[v][0]\)<br>最后要dp[u][1] += \(R_i\)</li><li>边界条件：dp[u][0] = 0, dp[u][1] = \(R_i\);i为叶子节点</li><li>结果:max(dp[root][0], dp[root][1])</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">6e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mp[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dp[x][<span class="number">1</span>] += num[x];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mp[x].size(); i++)&#123;</div><div class="line">        <span class="keyword">int</span> index = mp[x][i];</div><div class="line">        dfs(index);</div><div class="line">        dp[x][<span class="number">0</span>] += max(dp[index][<span class="number">0</span>], dp[index][<span class="number">1</span>]);</div><div class="line">        dp[x][<span class="number">1</span>] += dp[index][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++) mp[i].clear();</div><div class="line">        <span class="built_in">memset</span>(fa, <span class="number">-1</span>, <span class="keyword">sizeof</span>(fa));</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            <span class="keyword">if</span>(i == n) <span class="keyword">break</span>;</div><div class="line">            fa[u] = v;</div><div class="line">            mp[v].push_back(u);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(fa[i] == <span class="number">-1</span>) &#123;</div><div class="line">                root = i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        dfs(root);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(dp[root][<span class="number">0</span>], dp[root][<span class="number">1</span>]));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.luogu.org/problem/show?pid=2015" target="_blank" rel="external">P2015 二叉苹果树</a></p><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><ul><li>有N个节点，N-1条边，边有权重</li><li>保留M条边，使权重和最大<h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2></li><li>确认状态：dp[u][j]:表示在以u为根的子树保留j个分支可以得到的最大苹果数量</li><li>状态转移方程：<br>dp[u][j] = max(dp[u][k] + dp[v][j-k-1]+weight)<br>v分别是u的儿子，weight为u到v边上的苹果数目, k属于[0, j]</li><li>边界条件： </li><li>结果：dp[1][M]<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to;</div><div class="line">    <span class="keyword">int</span> next;</div><div class="line">    <span class="keyword">int</span> weight;</div><div class="line">&#125;edge[maxn];</div><div class="line"><span class="keyword">int</span> head[maxn];</div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn];</div><div class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> weight)</span></span>&#123;</div><div class="line">    edge[tot].to = v;</div><div class="line">    edge[tot].weight = weight;</div><div class="line">    edge[tot].next = head[u];</div><div class="line">    head[u] = tot++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i!=<span class="number">-1</span>; i = edge[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].to;</div><div class="line">        <span class="keyword">int</span> weight = edge[i].weight;</div><div class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        dfs(v);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=q; k&gt;=<span class="number">1</span>; k--)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=k; j++)&#123;<span class="comment">//想想可以保留的边数超过了总边数会怎么样？</span></div><div class="line">                dp[u][k] = max(dp[u][k], dp[u][k-j]+dp[v][j<span class="number">-1</span>]+weight);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q))&#123;</div><div class="line">        tot = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v, weight;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            add_edge(u, v, weight);</div><div class="line">        &#125;</div><div class="line">        dfs(<span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[<span class="number">1</span>][q]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h1><p><a href="http://poj.org/problem?id=1463" target="_blank" rel="external">poj1463 Strategic game</a></p><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><ul><li>一个节点上放一个士兵，一个士兵可以看守所有的相邻的边。</li><li>求最小的士兵数目，使每一条边都被覆盖</li></ul><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><ul><li>确认状态：dp[u][state]:state == 0时，以x为根的子树在x上放置的士兵的最少所需的士兵数目；state == 1时，不以x为根的子树在x上放置的士兵的最少所需的士兵数目</li><li><p>状态转移方程：<br>dp[u][1] = 1+ \(\sum min(dp[v][0], dp[v][1])\)<br>dp[u][0] = \(\sum dp[v][1]\)</p></li><li><p>边界条件：</p></li><li>结果：min(f[root][0], f[root][1])</li></ul><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to;</div><div class="line">    <span class="keyword">int</span> next;</div><div class="line">    <span class="keyword">int</span> weight;</div><div class="line">&#125;edge[maxn];</div><div class="line"><span class="keyword">int</span> head[maxn];</div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn];</div><div class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> weight)</span></span>&#123;</div><div class="line">    edge[tot].to = v;</div><div class="line">    edge[tot].weight = weight;</div><div class="line">    edge[tot].next = head[u];</div><div class="line">    head[u] = tot++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i!=<span class="number">-1</span>; i = edge[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].to;</div><div class="line">        <span class="keyword">int</span> weight = edge[i].weight;</div><div class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        dfs(v);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=q; k&gt;=<span class="number">1</span>; k--)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=k; j++)&#123;<span class="comment">//想想可以保留的边数超过了总边数会怎么样？</span></div><div class="line">                dp[u][k] = max(dp[u][k], dp[u][k-j]+dp[v][j<span class="number">-1</span>]+weight);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q))&#123;</div><div class="line">        tot = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v, weight;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            add_edge(u, v, weight);</div><div class="line">        &#125;</div><div class="line">        dfs(<span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[<span class="number">1</span>][q]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h1><p><a href="http://poj.org/problem?id=3659" target="_blank" rel="external">Poj3659 Cell Phone Network</a></p><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><ul><li>树的最小点覆盖。一个点可以覆盖相邻的点</li><li>求最小的点数。（即最小点覆盖问题）最小点覆盖在一般图中是NP难题，因此在特定的数据结构中才会有高效的算法</li><li><p>注意和上面的题目的区别！！！~~~~</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>*确认状态： ①dp[u][0]：选点u，并且以点u为根的子树都被覆盖了。<br>②dp[u][1]：不选点u, u被其儿子覆盖<br>③dp[u][2]：不选点u，u没有被子节点覆盖（被其父亲覆盖）</p></li><li><p>状态转移方程：<br>dp[u][0]=1+\(\sum min(dp[v][0],dp[v][1],dp[v][2])\) （v是u的儿子）<br>dp[u][2]=\(\sum min(dp[v][1], dp[v][0])\)<br>dp[u][1]的情况复杂一些：<br>if(i没有子节点)dp[i][1]=INF<br><font color="#FF3030"><strong>想想什么时候初值的时候设置成INF，什么时候设置成0。</strong></font><br>else dp[u][1]=\(\sum min(dp[v][0],dp[v][1])\)+inc<br>其中对于inc有：<br>if(上面式子中的\(\sum min(dp[v][0],dp[v][1])\)中包含某个dp[v][0])             inc=0;<br>else inc=min(dp[v][0]-dp[v][1])<br><font color="#FF3030"><strong>ps:这里的inc相当于强行让一个子节点上放了一个节点使其能够覆盖到父亲节点。选择的依据就是dp[u][0]-dp[u][1]的最小值</strong></font>。</p></li><li><p>边界：<br>dp[u][0] = 1;<br>dp[u][1] = dp[u][2] = 0;</p></li><li><p>结果：min(dp[1][0], dp[1][1])</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="keyword">int</span> dp[maxn][<span class="number">3</span>];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to;</div><div class="line">    <span class="keyword">int</span> next;</div><div class="line">    <span class="keyword">int</span> weight;</div><div class="line">&#125;edge[maxn*<span class="number">2</span>];<span class="comment">//数组一开始没有开二倍，emmmmmmmmmmmmmmmmm</span></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> head[maxn];</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    edge[tot].to = v;</div><div class="line">    edge[tot].next = head[u];</div><div class="line">    head[u] = tot++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u] = <span class="literal">true</span>;</div><div class="line">    dp[u][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    dp[u][<span class="number">1</span>] = dp[u][<span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">int</span> temp = INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i!= <span class="number">-1</span>; i = edge[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v = edge[i].to;</div><div class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</div><div class="line">        dfs(v);</div><div class="line">        dp[u][<span class="number">0</span>] += min(dp[v][<span class="number">0</span>], min(dp[v][<span class="number">1</span>], dp[v][<span class="number">2</span>]));</div><div class="line">        dp[u][<span class="number">2</span>] += min(dp[v][<span class="number">1</span>], dp[v][<span class="number">0</span>]);<span class="comment">//由父亲决定</span></div><div class="line">        <span class="keyword">if</span>(dp[v][<span class="number">0</span>]&lt;=dp[v][<span class="number">1</span>])&#123;</div><div class="line">            flag = <span class="literal">false</span>;</div><div class="line">            dp[u][<span class="number">1</span>] += dp[v][<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            dp[u][<span class="number">1</span>] += dp[v][<span class="number">1</span>];</div><div class="line">            temp = min(temp, dp[v][<span class="number">0</span>]-dp[v][<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(flag)&#123;</div><div class="line">        dp[u][<span class="number">1</span>] += temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</div><div class="line">        tot = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u, v;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            add_edge(u, v);</div><div class="line">            add_edge(v, u);</div><div class="line">        &#125;</div><div class="line">        dfs(<span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(dp[<span class="number">1</span>][<span class="number">0</span>], dp[<span class="number">1</span>][<span class="number">1</span>]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="source"><a href="#source" class="headerlink" title="source"></a>source</h1><p>雨姐姐的PP踢</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 树形dp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>后缀自动机（待完善）</title>
      <link href="/2017/10/22/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
      <url>/2017/10/22/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
      <content type="html"><![CDATA[<p>后缀自动机的能解决的问题及一些个人的理解<br>任何一个节点所代表的<font color="#FF3030"><strong>最短的串</strong></font>一定比link前面的节点代表的<font color="#FF3030"><strong>最长串大1</strong></font>，所代表的<font color="#FF3030"><strong>最长的串</strong></font>比后面的<font color="#FF3030"><strong>最短的串短1</strong></font>.<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>由于本文基本参照的是他人的思路，故先放出他人的文章，写的都很好。<br><a href="https://saisumit.wordpress.com/2016/01/26/suffix-automaton/" target="_blank" rel="external">SUFFIX AUTOMATON by- saisumit</a><br><a href="http://codeforces.com/blog/entry/20861" target="_blank" rel="external">A short guide to suffix automata</a><br><a href="http://fanhq666.blog.163.com/blog/static/8194342620123352232937/" target="_blank" rel="external">后缀自动机与线性构造后缀树</a><br>这篇文章讲了建立后缀自动机的过程其实就是建立了一棵原串逆序后的后缀树(reversed raw string)。</p><h1 id="建后缀自动机过程及代码"><a href="#建后缀自动机过程及代码" class="headerlink" title="建后缀自动机过程及代码"></a>建后缀自动机过程及代码</h1><p>建立后缀自动机是不断的加入原串的前缀的。<br>两条性质：</p><ul><li>从<font color="#FF3030"><strong>任意节点</strong></font>开始到<font color="#FF3030"><strong>terminal node</strong></font>(带*的节点)的所有路径，是原串的<font color="#FF3030"><strong>后缀</strong></font>。这些后缀集合要么是集合的从属关系，要么是互不相交的关系。</li><li>从<font color="#FF3030"><strong>初始点</strong></font>开始到<font color="#FF3030"><strong>任意的节点</strong></font>，可以得到原串的<font color="#FF3030"><strong>所有的子串</strong></font>。</li></ul><p>我们可以通过endpos集合的分类，以及任何一个节点所代表的<font color="#FF3030"><strong>最短的串</strong></font>一定比link前面的节点代表的<font color="#FF3030"><strong>最长串大1</strong></font>，所代表的<font color="#FF3030"><strong>最长的串</strong></font>比后面的<font color="#FF3030"><strong>最短的串短1</strong></font>这个性质，构造出一个link[]维护的东西。形成了一棵有集合包含关系的后缀树。</p><p>下面通过s = “dababd”的例子来进一步说明。维护后缀自动机的过程就是相当于维护后缀树。维护后缀自动机子串<font color="#FF3030"><strong>最长公共后缀</strong></font>的过程就是不断维护后缀树<font color="#FF3030"><strong>最长公共前缀</strong></font>的过程<br><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1fkqx8jiodkj31kw23vx6q.jpg" alt=""></p><p><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1fkqxa41gm5j31kw23v1kz.jpg" alt=""></p><p><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fkqxcfjz2tj31kw23vx6q.jpg" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> len, link;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;next;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXLEN = <span class="number">100000</span>;</div><div class="line">state st[MAXLEN*<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> sz, last;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sa_init</span><span class="params">()</span> </span>&#123;</div><div class="line">    sz = last = <span class="number">0</span>;</div><div class="line">    st[<span class="number">0</span>].len = <span class="number">0</span>;</div><div class="line">    st[<span class="number">0</span>].link = <span class="number">-1</span>;</div><div class="line">    st[<span class="number">0</span>].next.clear();</div><div class="line">    ++sz;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sa_extend</span> <span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> cur = sz++;</div><div class="line">    st[cur].len = st[last].len + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> p;</div><div class="line">    <span class="keyword">for</span> (p=last; p!=<span class="number">-1</span> &amp;&amp; !st[p].next.count(c); p=st[p].link)</div><div class="line">        st[p].next[c] = cur;</div><div class="line">    <span class="keyword">if</span> (p == <span class="number">-1</span>)</div><div class="line">        st[cur].link = <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> q = st[p].next[c];</div><div class="line">        <span class="keyword">if</span> (st[p].len + <span class="number">1</span> == st[q].len)</div><div class="line">            st[cur].link = q;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> clone = sz++;</div><div class="line">            <span class="comment">//printf("%dclone\n", p);</span></div><div class="line">            st[clone].len = st[p].len + <span class="number">1</span>;</div><div class="line">            st[clone].next = st[q].next;</div><div class="line">            st[clone].link = st[q].link;</div><div class="line">            <span class="keyword">for</span> (; p!=<span class="number">-1</span> &amp;&amp; st[p].next[c]==q; p=st[p].link)</div><div class="line">                st[p].next[c] = clone;</div><div class="line">            st[q].link = st[cur].link = clone;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    last = cur;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    sa_init();</div><div class="line">    sa_extend(<span class="string">'a'</span>);</div><div class="line">    sa_extend(<span class="string">'b'</span>);</div><div class="line">    sa_extend(<span class="string">'b'</span>);</div><div class="line">    sa_extend(<span class="string">'a'</span>);</div><div class="line">    sa_extend(<span class="string">'b'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="所能解决的问题"><a href="#所能解决的问题" class="headerlink" title="所能解决的问题"></a>所能解决的问题</h1><p>代码待更新</p><h2 id="文本串中不同种类的子串的个数"><a href="#文本串中不同种类的子串的个数" class="headerlink" title="文本串中不同种类的子串的个数"></a>文本串中不同种类的子串的个数</h2><p>就是性质里面的第二条，从起点dfs进行统计即可。（路径两两是不相交的）</p><h2 id="所有子串的长度和"><a href="#所有子串的长度和" class="headerlink" title="所有子串的长度和"></a>所有子串的长度和</h2><h2 id="字典序第k大的子串"><a href="#字典序第k大的子串" class="headerlink" title="字典序第k大的子串"></a>字典序第k大的子串</h2><h2 id="位移多少次之后得到的串字典序最小"><a href="#位移多少次之后得到的串字典序最小" class="headerlink" title="位移多少次之后得到的串字典序最小"></a>位移多少次之后得到的串字典序最小</h2><h2 id="所给的串在原串中第一次出现的位置"><a href="#所给的串在原串中第一次出现的位置" class="headerlink" title="所给的串在原串中第一次出现的位置"></a>所给的串在原串中第一次出现的位置</h2><h2 id="计算子串出现的次数"><a href="#计算子串出现的次数" class="headerlink" title="计算子串出现的次数"></a>计算子串出现的次数</h2><p>kmp也可以，时间复杂度都是O(n)</p><h2 id="两个串中的最长公共子串"><a href="#两个串中的最长公共子串" class="headerlink" title="两个串中的最长公共子串"></a>两个串中的最长公共子串</h2><p>dp做是O\((n^2)\)的复杂度，可见后缀自动机的优势</p><h2 id="多个串的最长公共子串"><a href="#多个串的最长公共子串" class="headerlink" title="多个串的最长公共子串"></a>多个串的最长公共子串</h2><p>见clj的课件</p><h2 id="最短的没有在原串中出现的子串"><a href="#最短的没有在原串中出现的子串" class="headerlink" title="最短的没有在原串中出现的子串"></a>最短的没有在原串中出现的子串</h2><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后缀自动机(SAM/DFA) </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络流二十四题</title>
      <link href="/2017/10/09/%E7%BD%91%E7%BB%9C%E6%B5%81%E4%BA%8C%E5%8D%81%E5%9B%9B%E9%A2%98/"/>
      <url>/2017/10/09/%E7%BD%91%E7%BB%9C%E6%B5%81%E4%BA%8C%E5%8D%81%E5%9B%9B%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>说明：<font color="#FF3030"><strong>不刷完题目不更新博客</strong></font> (可能永远不会更新了\吐血而亡)<br>2018年1月20日14:33:43更新</p><a id="more"></a><h1 id="最大流模板"><a href="#最大流模板" class="headerlink" title="最大流模板"></a>最大流模板</h1><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://vjudge.net/problem/POJ-1273" target="_blank" rel="external">poj1273 Drainage Ditches</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>先bfs求出最短的层次图，然后dfs拓展增广路。不断的缩小拓展的增广路。</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, cap, rev;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> cap)</span></span>&#123;</div><div class="line">    G[u].push_back(Edge&#123;v, cap, G[v].size()&#125;);<span class="comment">//指向v节点所连接的边的在v的vector中的序号，可以手动的模拟一下。</span></div><div class="line">    G[v].push_back(Edge&#123;u, <span class="number">0</span>, G[u].size()<span class="number">-1</span>&#125;);<span class="comment">//因为一开始加入了一条边，所以减1。</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> level[maxn];</div><div class="line"><span class="keyword">int</span> cnt[maxn];</div><div class="line"><span class="comment">//构造层次图</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    q.push(s);</div><div class="line">    level[s] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> v = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[v].size(); i++)&#123;</div><div class="line">            Edge&amp; e = G[v][i];</div><div class="line">            <span class="keyword">if</span>(e.cap&gt;<span class="number">0</span>&amp;&amp;level[e.to]&lt;<span class="number">0</span>)&#123;</div><div class="line">                level[e.to] = level[v]+<span class="number">1</span>;</div><div class="line">                q.push(e.to);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(v == t) <span class="keyword">return</span> flow;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>&amp; i=cnt[v]; i&lt;G[v].size(); i++)&#123;</div><div class="line">        Edge&amp; e = G[v][i];</div><div class="line">        <span class="keyword">if</span>(e.cap&gt;<span class="number">0</span>&amp;&amp;level[v]&lt;level[e.to])&#123;</div><div class="line">            <span class="keyword">int</span> d = dfs(e.to, t, min(flow, e.cap));</div><div class="line">            <span class="comment">//printf("dis:%d-&gt;%d %d %d %d\n", v, e.to, e.cap, flow, d);</span></div><div class="line">            <span class="keyword">if</span>(d&gt;<span class="number">0</span>)&#123;</div><div class="line">                e.cap -= d;</div><div class="line">                G[e.to][e.rev].cap += d;</div><div class="line">                <span class="keyword">return</span> d;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//无到t的增广路，直接返回0。</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//等价于返回0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(;;)&#123;</div><div class="line">        <span class="built_in">memset</span>(level, <span class="number">-1</span>, <span class="keyword">sizeof</span>(level));</div><div class="line">        bfs(s);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="comment">//printf("%d: %d\n", i, level[i]);</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//无法连通t，返回结果。</span></div><div class="line">        <span class="keyword">if</span>(level[t]&lt;<span class="number">0</span>) <span class="keyword">return</span> flow;</div><div class="line">        <span class="keyword">int</span> f;</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</div><div class="line">        <span class="keyword">while</span>((f=dfs(s, t, INF))&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="comment">//printf("test:%d: %d\n", ++tot, f);</span></div><div class="line">            flow+=f;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">int</span> u, v, weight;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) G[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;weight);</div><div class="line">            add_edge(u, v, weight);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> s = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> t = m;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max_flow(s, t));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="最小费流模板题"><a href="#最小费流模板题" class="headerlink" title="最小费流模板题"></a>最小费流模板题</h1><p><a href="">poj2135 Farm Tour</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>从一个点出发到达终点后返回起始点，每个边最多经过一次，并且每条边有一个长度。问访问的最小长度。<br>保证有这样的路径存在。<br>图一开始是无向图。</p><h1 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h1><ul><li>建立一个源点和一个汇点。源点连向1节点，费用为0， 容量为2.同理，最后一个节点n向汇点连接一条边，费用为0， 容量为2.</li><li>图中的两点间的费用就是距离，容量为1（因为每条边最多经过一次）.</li><li>建立双向边，因为是无向图。</li></ul><h1 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h1><p>说明：<br>这里面的流量是固定的，不一定是最大流量。<br>里面先是用BF算法跑一边最短路（最短路的属性是价格）（因为存在负边，所以不能用dijkstra来更新）。然后找到这条路径上的最小的容量，并且减掉。<br>里面用的是最朴素的BF算法，因此还可以用堆来进行优化。</p><font color="#FF3003"><strong>《挑程》里面引入了势的概念，可以进一步的优化算法。</strong></font><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">10</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> to, cap, cost, rev;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">int</span> prev[maxn], pree[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost)</span></span>&#123;</div><div class="line">    G[u].push_back(Edge&#123;v, cap, cost, G[v].size()&#125;);</div><div class="line">    G[v].push_back(Edge&#123;u, <span class="number">0</span>, cost*(<span class="number">-1</span>), G[u].size()<span class="number">-1</span>&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min_cost_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(f&gt;<span class="number">0</span>)&#123;</div><div class="line">        fill(dis, dis+maxn, INF);</div><div class="line">        dis[s] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">bool</span> update = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">while</span>(update)&#123;</div><div class="line">            update = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>; v&lt;=n; v++)&#123;</div><div class="line">                <span class="keyword">if</span>(dis[v] == INF) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[v].size(); i++)&#123;</div><div class="line">                    Edge&amp; e = G[v][i];</div><div class="line">                    <span class="keyword">if</span>(e.cap&gt;<span class="number">0</span>&amp;&amp;dis[e.to] &gt; dis[v]+e.cost)&#123;</div><div class="line">                        dis[e.to] = dis[v]+e.cost;</div><div class="line">                        prev[e.to] = v;</div><div class="line">                        pree[e.to] = i;</div><div class="line">                        update = <span class="literal">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(dis[t] == INF) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> d = f;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = t; v!=s; v = prev[v])&#123;</div><div class="line">            d = min(d, G[prev[v]][pree[v]].cap);</div><div class="line">        &#125;</div><div class="line">        f -= d;</div><div class="line">        res += d*dis[t];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = t; v!=s; v = prev[v])&#123;</div><div class="line">            Edge&amp; e = G[prev[v]][pree[v]];</div><div class="line">            e.cap -= d;</div><div class="line">            G[v][e.rev].cap += d;<span class="comment">//e.rev是prev[v]和v之间的连边的逆向边，在v节点中的序号。可以画一张图进行理解。</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n+<span class="number">1</span>; i++) G[i].clear();</div><div class="line">        <span class="keyword">int</span> u, v, cost;</div><div class="line">        <span class="keyword">int</span> s=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> t = n+<span class="number">1</span>;</div><div class="line">        add_edge(s, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">        add_edge(n, t, <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;cost);</div><div class="line">            add_edge(u, v, <span class="number">1</span>, cost);</div><div class="line">            add_edge(v, u, <span class="number">1</span>, cost);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min_cost_flow(s, t, <span class="number">2</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h1><p><a href="http://poj.org/problem?id=3436" target="_blank" rel="external">poj3436 ACM computer factory</a></p><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>现在N个人，他们的电脑都有P个输入部分和P个输出部分。<br>输入部分：<br>P个输入部分，它们可以用0,1,2三个数字来表示状态：</p><ul><li>0表示肯定是没有这个部分的</li><li>1表示肯定是有这个部分的</li><li>2表示这个部分可有可无</li></ul><p>P个输出部分：</p><ul><li>0表示一定没有这个部分</li><li>1表示一定是有这个部分</li></ul><p>每一个电脑有一个权重W，表示这个电脑可以传输的最大的价值。</p><p>题目要求这些电脑之间进行传输，使得传输的价值最大，并且输出相应的传输的路径，和他们之间的权值。<br>因为有多解，因此输出任意的解即可。</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><ol><li>首先进行拆点操作，每一个电脑拆成两个点，这两个点之间的传输容量(cap)为每一个电脑的权重</li><li>若一个电脑的P个输入和为0，那么将一个超级源和它相连，并且它们之间的传输容量为INF；若一个电脑的输出圈为0，那么它的拆分的第二个点和超级汇相连。</li><li>若两个电脑C1, C2,C1的输入能接上C2的输出，那么C2所拆的第二个点和C1的第一个点相连。同理，若C2的输入和C1的输出可以连上，那么也可以建边。这些边的容量都是INF</li><li>从超级源向超级汇跑一边最大流即可。<br>注意体会拆点的思想，以及两个电脑建边的时候的容量设为INF的思想。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">60</span>*<span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_in = <span class="number">12</span>;</div><div class="line"><span class="keyword">int</span> level[maxn];</div><div class="line"><span class="keyword">int</span> from[maxn], to[maxn], flow[maxn], cap[maxn];</div><div class="line"><span class="keyword">int</span> head[maxn], nex[maxn], cnt[maxn];</div><div class="line"><span class="keyword">int</span> P, N;</div><div class="line"><span class="keyword">int</span> s, t;</div><div class="line"><span class="keyword">int</span> e = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> weight1)</span></span>&#123;</div><div class="line">    <span class="comment">//从0开始存边</span></div><div class="line">    from[e] = u, to[e] = v, cap[e] = weight1, nex[e] = head[u], head[u] = e;</div><div class="line">    e++;</div><div class="line">    from[e] = v, to[e] = u, cap[e] = <span class="number">0</span>, nex[e] = head[v], head[v] = e;</div><div class="line">    e++;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</div><div class="line">    <span class="built_in">memset</span>(level, <span class="number">-1</span>, <span class="keyword">sizeof</span>(level));</div><div class="line">    level[s] = <span class="number">0</span>;</div><div class="line">    q.push(s);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> temp = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=head[temp]; e!=<span class="number">-1</span>; e=nex[e])&#123;</div><div class="line">            <span class="comment">//printf("%d\n", e);</span></div><div class="line">            <span class="keyword">if</span>(cap[e]&gt;flow[e]&amp;&amp;level[to[e]]&lt;<span class="number">0</span>)&#123;</div><div class="line">                level[to[e]] = level[temp] + <span class="number">1</span>;</div><div class="line">                q.push(to[e]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u ,<span class="keyword">int</span> t, <span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(u == t) <span class="keyword">return</span> f;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>&amp; e = cnt[u]; e!=<span class="number">-1</span>; e=nex[e])&#123;</div><div class="line">        <span class="keyword">if</span>(cap[e]&gt;flow[e] &amp;&amp; level[from[e]]&lt;level[to[e]])&#123;</div><div class="line">            <span class="keyword">int</span> d = dfs(to[e], t, min(f, cap[e]-flow[e]));</div><div class="line">            <span class="keyword">if</span>(d&gt;<span class="number">0</span>)&#123;</div><div class="line">                flow[e] += d;</div><div class="line">                flow[e^<span class="number">1</span>] -= d;</div><div class="line">                <span class="keyword">return</span> d;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(;;)&#123;</div><div class="line">        bfs(s);</div><div class="line"><span class="comment">//        for(int i=0; i&lt;=2*N+1; i++)&#123;</span></div><div class="line"><span class="comment">//            printf("%d ", level[i]);</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//        printf("%d\n");</span></div><div class="line">        <span class="keyword">if</span>(level[t]&lt;<span class="number">0</span>) <span class="keyword">return</span> flow;</div><div class="line">        <span class="keyword">int</span> f;</div><div class="line"></div><div class="line">        <span class="built_in">memcpy</span>(cnt, head, <span class="keyword">sizeof</span>(head));</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">            <span class="keyword">if</span>((f = dfs(s, t, INF))&lt;=<span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//else printf("%d\n", f);</span></div><div class="line">            flow += f;</div><div class="line">            <span class="comment">//printf("test123:%d,%d\n", flow, f);</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> in[max_in], out[max_in];</div><div class="line">    <span class="keyword">int</span> in_number, out_number;</div><div class="line">    Node()&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;in_number = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>-&gt;out_number = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;node[maxn&gt;&gt;<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;P, &amp;N))&#123;</div><div class="line">        e = <span class="number">0</span>;</div><div class="line">        s = <span class="number">0</span>, t = <span class="number">2</span>*N+<span class="number">1</span>;</div><div class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</div><div class="line">            <span class="keyword">int</span> wei;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;wei);</div><div class="line">            add_edge(i, i+N, wei);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;P; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;node[i].in[j]);</div><div class="line">                <span class="comment">//不是2吗</span></div><div class="line">                <span class="keyword">if</span>(node[i].in[j] == <span class="number">1</span>)node[i].in_number++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;P; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;node[i].out[j]);</div><div class="line">                <span class="keyword">if</span>(node[i].out[j] == <span class="number">0</span>) node[i].out_number++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(node[i].in_number == <span class="number">0</span>) add_edge(s, i, INF);</div><div class="line">            <span class="keyword">if</span>(node[i].out_number == <span class="number">0</span>) add_edge(i+N, t, INF);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(node[j].out_number!=<span class="number">0</span>&amp;&amp;node[i].in_number!=<span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;P&amp;&amp;flag; k++)&#123;</div><div class="line">                        <span class="keyword">if</span>(node[j].out[k]+node[i].in[k] == <span class="number">1</span>)&#123;</div><div class="line">                            flag = <span class="literal">false</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(flag)&#123;</div><div class="line">                        add_edge(j+N, i, INF);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(node[j].in_number!=<span class="number">0</span>&amp;&amp;node[i].out_number!=<span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;P&amp;&amp;flag; k++)&#123;</div><div class="line">                        <span class="keyword">if</span>(node[j].in[k]+node[i].out[k] == <span class="number">1</span>)&#123;</div><div class="line">                            flag = <span class="literal">false</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(flag)&#123;</div><div class="line">                        add_edge(i+N, j, INF);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        for(int i=0; i&lt;=2*N+1; i++)&#123;</span></div><div class="line"><span class="comment">//            for(int j=head[i]; j!=-1; j=nex[j])&#123;</span></div><div class="line"><span class="comment">//                printf("node%d--&gt;%d: %d\n",i, to[j], j);</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//            printf("\n");</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, max_flow(s, t));</div><div class="line">        <span class="keyword">int</span> tot=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;e; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(flow[i]&lt;=<span class="number">0</span>||from[i] == s || to[i] == t || to[i] - from[i]==N)&#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            from[tot] = from[i]-N&gt;<span class="number">0</span>?from[i]-N:from[i];</div><div class="line">            to[tot] = to[i]-N&gt;<span class="number">0</span>?to[i]-N:to[i];</div><div class="line">            flow[tot] = flow[i];</div><div class="line">            tot++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tot);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tot; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, from[i], to[i], flow[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="统计最小割的边数"><a href="#统计最小割的边数" class="headerlink" title="统计最小割的边数"></a>统计最小割的边数</h1><p>Q：最小割可能有多种方案，那么该怎么统计最小割的边数呢？<br>A：建边的时候每边权\(W = W*(E+1)+1\), 得到的最大流为\(\frac{maxflow}{E+1}\)(取整), 最小割的边为\(maxflow\%(E+1)\).</p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一般图的匹配</title>
      <link href="/2017/10/09/%E4%B8%80%E8%88%AC%E5%9B%BE%E7%9A%84%E5%8C%B9%E9%85%8D-%E5%B8%A6%E8%8A%B1%E6%A0%91%E7%AE%97%E6%B3%95/"/>
      <url>/2017/10/09/%E4%B8%80%E8%88%AC%E5%9B%BE%E7%9A%84%E5%8C%B9%E9%85%8D-%E5%B8%A6%E8%8A%B1%E6%A0%91%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>这个算法理解起来比较的困难，而且网上很多博客讲的不够具体，甚至有些是错误的。这次我将用一个例子来演示这个算法的流程，帮助理解。<br>不涉及证明：它的算法思路和<font color="#FF3030"><strong>匈牙利算法相似</strong></font>，只不过多出来了一个处理<font color="#FF3030"><strong>奇环</strong></font>的操作。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://uoj.ac/problem/79" target="_blank" rel="external">一般图的最大匹配</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>一般图的最大匹配裸题</p><h1 id="一般图最大匹配的算法流程"><a href="#一般图最大匹配的算法流程" class="headerlink" title="一般图最大匹配的算法流程"></a>一般图最大匹配的算法流程</h1><p>思路流程引用自<a href="http://blog.csdn.net/lych_cys/article/details/50749138" target="_blank" rel="external">带花树算法初学</a><br>规定三类点：</p><ul><li>id[i] = -1 :表示节点i<font color="#FF3030"><strong>从未访问</strong></font>过</li><li>id[i] = 0 :表示这个点是<font color="#FF3030"><strong>可拓展点</strong></font>（S点，不妨理解为start,相当于<font color="#FF3030"><strong>新的寻找点</strong></font>）</li><li>id[i] = 1: 表示这个点是待<font color="#FF3030"><strong>寻找新的匹配点</strong></font>的点（T点，不妨理解为terminal点）<br>举例说明：一个图是 1—2—3,(2,3)之前匹配好了，现在轮到1节点去找增广路，id[1] = 0。遇到2号节点是匹配好的，id[2] = 1, id[3] = 0.相当于将1转移到了3节点，再从3号节点去寻找增广路径。</li></ul><p>流程：</p><ol><li><p>从未匹配过的点x出发寻找增广路，假设找到了y,并且id[y] = -1,有下面的两种情况：<br>①y<font color="#FF3030"><strong>没有匹配边</strong></font>，那么结束算法，(x, y)匹配成功。<br>②y<font color="#FF3030"><strong>有匹配边</strong></font>，那么使id[y] = 1, 假设y的匹配节点为z，使id[z] = 0。</p></li><li><p>id[y] = 0.此时说明遇到了奇环。且x, y在这个环中距离他们的lca是<font color="#FF3030"><strong>最远</strong></font>的。我们试图将(x, y)之间连一条匹配边，如果环中有一个点可以连接外面的点。</p></li><li><p>id[y] = 1.跳过对这个点的探索。</p></li></ol><h1 id="奇环的例子"><a href="#奇环的例子" class="headerlink" title="奇环的例子"></a>奇环的例子</h1><p>样例：<br>6 6<br>1 5 1 2 2 3 3 4 4 6 4 5<br>因为是用链式前向星来存图的，所以图的顺序是逆过来的。</p><p>初始状态：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/AxdVW.png" alt=""><br></div><p>一开始的匹配：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/AxoGw.png" alt=""><br></div><p>待匹配的5号节点，以及入队的点：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/ATyjR.png" alt=""><br></div><p>3号点的探索：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/AT2Y8.png" alt=""><br></div><p>3号节点探测出来奇环：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/ATVug.png" alt=""><br></div><p>寻找lca,以及维护的信息，<font color="#FF3030"><strong>环中的id[] == 1的点入队</strong></font>（此处多了之前维护的pre[]的示例）:</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/ATgvX.png" alt=""><br></div><p>最终增广的结果，注意pre[]记录以及match[]两个数组记录了需要增广的边。<font color="#FF3030"><strong>两者交替进行</strong></font>：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/ATkUG.png" alt=""><br></div><p>看完了上面的流程图，是不是有了新的理解呢？</p><h1 id="偶环的例子"><a href="#偶环的例子" class="headerlink" title="偶环的例子"></a>偶环的例子</h1><p>为什么遇到了偶环和二分图的最大匹配是一样的呢？因为它只要找到了增广路就会增广，不会出现奇环那样：即使里面的n-1(n为奇)个点已经匹配好了，但是依旧会增广。偶环里面的n个点最少会有n-1个节点匹配,（还有一个节点若依旧找到了增广路依旧会增广。）<br>偶环中的一个点被孤立的样子：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/ATfPc.png" alt=""><br></div><p>下面是具体的例子：</p><p>&lt;一&gt;初始状态，外点连接匹配点：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/ATIVK.png" alt=""><br></div><p>情况①：外面的点和已匹配点寻找增广：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/ATIVK.png" alt=""><br></div><p>情况②：环内的两点可增广：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/ATnpe.png" alt=""><br></div><p>&lt;二&gt;初始状态，外点连接未匹配点：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/ATeYs.png" alt=""><br></div><p>情况①：外点和环内的点直接可增广</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/ATfPc.png" alt=""><br></div><p>情况②: 偶环内的连点直接匹配：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/ATuu7.png" alt=""><br></div><p>更多的例子，都可以构造，发现和二分图的最大匹配流程都是一样的：</p><div align="center"><br><img src="https://t1.picb.cc/uploads/2017/10/09/ATC36.png" alt=""><br></div><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><p>复杂度：O(\(n^3\))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">505</span>*<span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">124750</span>*<span class="number">2</span>;</div><div class="line"><span class="keyword">int</span> f[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qq</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> x,y;</div><div class="line"><span class="keyword">int</span> last;</div><div class="line">&#125;s[M];</div><div class="line"><span class="keyword">int</span> num,last[N];</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"><span class="comment">//链式前向星来存储图</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">num++;</div><div class="line">s[num].x=x;s[num].y=y;</div><div class="line">s[num].last=last[x];</div><div class="line">last[x]=num;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> match[N];</div><div class="line"><span class="keyword">int</span> id[N];<span class="comment">//这个点是什么点</span></div><div class="line"><span class="comment">//-1:没访问过  0:S点  1:T点</span></div><div class="line"><span class="keyword">int</span> q[N];<span class="comment">//要扩展的队列————也就是我们要尝试帮谁换配偶</span></div><div class="line"><span class="keyword">int</span> pre[N];<span class="comment">//在这次过程中,x的新配偶是谁</span></div><div class="line"><span class="keyword">int</span> Tim,vis[N];<span class="comment">//对于lca的标记以及时间轴</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span> <span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (f[x]==x) <span class="keyword">return</span> f[x];</div><div class="line">f[x]=find(f[x]);</div><div class="line"><span class="keyword">return</span> f[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span> <span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//寻找lca</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">Tim++;</div><div class="line"><span class="comment">//cout&lt;&lt;"test "&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;</span></div><div class="line"><span class="keyword">while</span> (vis[x]!=Tim)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (x!=<span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">x=find(x);<span class="comment">//先找到花根</span></div><div class="line"><span class="keyword">if</span> (vis[x]==Tim) <span class="keyword">return</span> x;</div><div class="line">vis[x]=Tim;</div><div class="line"><span class="keyword">if</span> (match[x]!=<span class="number">0</span>) x=find(pre[match[x]]);</div><div class="line"><span class="comment">//因为在之前我们知道，每一个S点的配偶(也就是T点)的pre 都是指向他的父亲的,于是就直接这么跳就可以了</span></div><div class="line"><span class="comment">//还有要注意的是，一定要先去到花根，因为他们现在已经是一个点了，只有花根的pre才指向他们真正的父亲</span></div><div class="line"><span class="keyword">else</span> x=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//cout&lt;&lt;"jiaohuan:"&lt;&lt;x&lt;&lt;" "&lt;&lt;endl;</span></div><div class="line">swap(x,y);</div><div class="line">&#125;</div><div class="line"><span class="comment">//cout&lt;&lt;"gen:"&lt;&lt;x&lt;&lt;endl;</span></div><div class="line"><span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> st,ed;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span> <span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span><span class="comment">//环  出现的是x---y的连边  已知根是k</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;"suohuan"&lt;&lt;y&lt;&lt;endl;</span></div><div class="line"><span class="keyword">while</span> (find(x)!=k)</div><div class="line">&#123;</div><div class="line">    <span class="comment">//cout&lt;&lt;"haha"&lt;&lt;x&lt;&lt;" "&lt;&lt;pre[x]&lt;&lt;endl;</span></div><div class="line">pre[x]=y;</div><div class="line"><span class="keyword">int</span> z=match[x];</div><div class="line">id[z]=<span class="number">0</span>;q[ed++]=z;<span class="keyword">if</span> (ed&gt;=N<span class="number">-1</span>) ed=<span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (find(z)==z) f[z]=k;</div><div class="line"><span class="keyword">if</span> (find(x)==x) f[x]=k;</div><div class="line">y=z;x=pre[y];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span> <span class="params">(<span class="keyword">int</span> X)</span><span class="comment">//尽量帮助x寻找增广路</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++) &#123;f[u]=u;id[u]=<span class="number">-1</span>;&#125;</div><div class="line">st=<span class="number">1</span>;ed=<span class="number">2</span>;<span class="comment">//模仿栈的两个指针的玩意来模拟queue，类似于AC自动机之类的</span></div><div class="line">q[st]=X;id[X]=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (st!=ed)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x=q[st];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=last[x];u!=<span class="number">-1</span>;u=s[u].last)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> y=s[u].y;</div><div class="line"><span class="comment">//cout&lt;&lt;"处理中的对子："&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;match[5]&lt;&lt;endl;</span></div><div class="line"><span class="keyword">if</span> (match[y]==<span class="number">0</span>&amp;&amp;y!=X)</div><div class="line"><span class="comment">//当然match[X]=0,但X(这次来寻找配偶的点)并不是一个可行的东西,所以不能算可行解</span></div><div class="line">&#123;</div><div class="line"><span class="comment">//    for(int i=1; i &lt;=6; i++)&#123;</span></div><div class="line"><span class="comment">//                    cout&lt;&lt;pre[i]&lt;&lt;" ";</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"><span class="comment">//    cout&lt;&lt;endl;</span></div><div class="line">pre[y]=x;<span class="comment">//先假设他与x相连</span></div><div class="line"><span class="keyword">int</span> last,t,now=y;</div><div class="line"><span class="keyword">while</span> (now!=<span class="number">0</span>)<span class="comment">//当然，这次来的X的match是为0，要是能更新到0就是结束</span></div><div class="line">&#123;</div><div class="line">t=pre[now];<span class="comment">//now新的配偶</span></div><div class="line">last=match[t];<span class="comment">//理所当然啦</span></div><div class="line">match[t]=now;match[now]=t;</div><div class="line">now=last;</div><div class="line"><span class="comment">//cout&lt;&lt;"now:"&lt;&lt;now&lt;&lt;endl;</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//cout&lt;&lt;"result: "&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;match[5]&lt;&lt;endl;</span></div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (id[y]==<span class="number">-1</span>)<span class="comment">//找到一个没有访问过的点————进行扩展</span></div><div class="line">&#123;</div><div class="line">id[y]=<span class="number">1</span>;</div><div class="line">pre[y]=x;<span class="comment">//先假设他与x相连</span></div><div class="line">id[match[y]]=<span class="number">0</span>;q[ed++]=match[y];</div><div class="line"><span class="keyword">if</span> (ed&gt;=N<span class="number">-1</span>) ed=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (id[y]==<span class="number">0</span>&amp;&amp;find(x)!=find(y))<span class="comment">//出现一个以前未处理过的奇环</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> g=lca(x,y);</div><div class="line">change(x,y,g);change(y,x,g);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">st++;</div><div class="line"><span class="keyword">if</span> (st&gt;=N<span class="number">-1</span>) st=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));Tim=<span class="number">0</span>;</div><div class="line"><span class="built_in">memset</span>(match,<span class="number">0</span>,<span class="keyword">sizeof</span>(match));</div><div class="line">num=<span class="number">0</span>;<span class="built_in">memset</span>(last,<span class="number">-1</span>,<span class="keyword">sizeof</span>(last));</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=m;u++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x,y;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">init(x,y);init(y,x);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=<span class="number">6</span>;u++)</div><div class="line"><span class="keyword">if</span> (match[u]==<span class="number">0</span>)&#123;</div><div class="line">            check(u);</div><div class="line">            <span class="comment">//cout&lt;&lt;"233 "&lt;&lt;match[5]&lt;&lt;endl;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</div><div class="line"><span class="keyword">if</span> (match[u]!=<span class="number">0</span>) ans++;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans/<span class="number">2</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,match[u]);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="自己的一些理解"><a href="#自己的一些理解" class="headerlink" title="自己的一些理解"></a>自己的一些理解</h1><ul><li>不论是奇环还是偶环，环里面的点都能组成很大(不是最大)的匹配。</li><li>若是奇环，最少也能组成\(\frac{n-1}{2}\)组匹配。现在我们要设计一种算法，看看剩下的<font color="#FF3030"><strong>那个点是否也能够利用</strong></font>。若奇环中的<font color="#FF3030"><strong>一个点能够和外面的路</strong></font>构成新的匹配，那么剩下的n-1一个节点就能两两匹配了，十分<font color="#FF3030"><strong>充分的利用了所有的点</strong></font>。</li><li>若是偶环，至少n-1（n为偶数）参与匹配。即使剩余了一个点。剩余的那个点和旁边的点其实也可以匹配，只不过由于匹配的顺序，而被环外的点抢占了。因此，偶环无论怎样，<font color="#FF3030"><strong>它的所有点都是被充分的利用的</strong></font>。无需设计新的算法来求解。</li></ul><h1 id="参考的博客"><a href="#参考的博客" class="headerlink" title="参考的博客"></a>参考的博客</h1><p><a href="http://blog.csdn.net/qq_36797743/article/details/60968291" target="_blank" rel="external">有详细的流程</a><br><a href="http://blog.csdn.net/jackyguo1992/article/details/11271497" target="_blank" rel="external">带花树名字由来</a><br><a href="http://www.cnblogs.com/owenyu/p/6858508.html" target="_blank" rel="external">博客的标签很好</a></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1><p>赶快去刷题，总结自己的模板。<br><a href="http://twinsclover.is-programmer.com/posts/21598.html" target="_blank" rel="external">刷题推荐</a></p>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一般图最大匹配 </tag>
            
            <tag> 带花树算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高斯消元</title>
      <link href="/2017/10/04/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
      <url>/2017/10/04/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/</url>
      <content type="html"><![CDATA[<p>高斯消元的主要方法有：</p><ul><li>化为<font color="#FF3030"><strong>上三角矩阵</strong></font>再<strong>回代</strong>求解；</li><li>用gauss_jordan法化为<font color="#FF3030"><strong>对角矩阵</strong></font>后求解；</li></ul><p>二进制高斯消元只用到了<font color="#FF3030"><strong>符号^</strong></font>(亦或),消元的方法和上面的完全一样。只不过运算符号由原来的加减乘除变成了只有(^)亦或。<br><a id="more"></a></p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h1><p>大家应该都学过线性代数，那么就不讲高斯消元的原理了。下面着重介绍高斯消元算法的步骤:</p><h2 id="化成上三角矩阵的高斯消元"><a href="#化成上三角矩阵的高斯消元" class="headerlink" title="化成上三角矩阵的高斯消元"></a>化成上三角矩阵的高斯消元</h2><ul><li>假设正在处理第i行，那么要找到一行使得\( \left|a_{ri}\right| \)大于\( \left|a_{ii}\right| \)，然后交换这两行，后面的i+1~n行与第i行进行消元。</li><li>变成上三角矩阵后再回代。</li></ul><p>适用的范围：要求原来的系数<font color="#FF3030"><strong>矩阵可逆</strong></font>。<br>消元的顺序:<br><img src="https://t1.picb.cc/uploads/2017/10/04/8K3Sv.png" alt=""></p><p>上代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</div><div class="line"><span class="comment">//要求系数矩阵是可逆的</span></div><div class="line"><span class="comment">//这里的A是增广矩阵，A[~][n]是伴随矩阵，最后的结果也是保存在伴随矩阵中的</span></div><div class="line"><span class="comment">//矩阵的规模为n*(n+1)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Guass_elimination</span><span class="params">(<span class="keyword">double</span> A[][maxn], <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> r = i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(A[j][i])&gt;<span class="built_in">fabs</span>(A[i][i])) r = j;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//将绝对值最大的换到主行的位置</span></div><div class="line">        <span class="keyword">if</span>(r!=i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; j++) swap(A[i][j], A[r][j]);</div><div class="line">        <span class="comment">//第i+1~n行根据第i行进行消元</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>; k&lt;n; k++)&#123;</div><div class="line">            <span class="keyword">double</span> f = A[k][i] / A[i][i];<span class="comment">//为了让那一列除主行外所有的元素为0，要乘的系数</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;=n; j++)&#123;</div><div class="line">                A[k][j] -= f*A[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//回代</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</div><div class="line">            A[i][n] -= A[j][n]*A[i][j];</div><div class="line">        &#125;</div><div class="line">        A[i][n] /= A[i][i];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">/*测试矩阵</span></div><div class="line"><span class="comment">    &#123;&#123;1, 1/2, 0, 1&#125;,</span></div><div class="line"><span class="comment">     &#123;1, -1, 0, 0&#125;,</span></div><div class="line"><span class="comment">     &#123;0, 1/2, -1, 0&#125;</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">    答案是&#123;2, 2, 1&#125;</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">double</span> A[maxn][maxn];</div><div class="line">    A[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>, A[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">-0.5</span>, A[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>, A[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">1</span>;</div><div class="line">    A[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>, A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">-1</span>, A[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span>, A[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">0</span>;</div><div class="line">    A[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">0</span>, A[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0.5</span>, A[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">-1</span>, A[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span>;</div><div class="line">    Guass_elimination(A, <span class="number">3</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>, A[i][<span class="number">3</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="更高精度的消元"><a href="#更高精度的消元" class="headerlink" title="更高精度的消元"></a>更高精度的消元</h3><p>精度的缺失是中间的一步：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> f = A[k][i] / A[i][i];</div></pre></td></tr></table></figure></p><p>保存了一个要乘的系数，从而过早的进行了消元。为了满足高精度的要求，我们在最后一时刻前都保存这A[k][i].从而消元的过程要逆着<br>总之不用中间的变量来保存系数，这样会减少精度的误差<br>消元的顺序:<br><img src="https://t1.picb.cc/uploads/2017/10/04/8KnNN.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=n; j&gt;=i; j--)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>; k&lt;n; k++)</div><div class="line">        A[k][j] -= A[k][i]/A[i][i]*A[i][j];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>下面是高精度的化成上三角高斯消元的板子：<br>应用的条件：原来的系数矩阵<font color="#FF3030">必须可逆</font>！<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Guass_elimination</span><span class="params">(<span class="keyword">double</span> A[][maxn], <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> r = i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(A[j][i])&gt;<span class="built_in">fabs</span>(A[i][i])) r = j;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//将绝对值最大的换到主行的位置</span></div><div class="line">        <span class="keyword">if</span>(r!=i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; j++) swap(A[i][j], A[r][j]);</div><div class="line">        <span class="comment">//第i+1~n行根据第i行进行消元</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=n; j&gt;=i; j--)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>; k&lt;n; k++)</div><div class="line">                A[k][j] -= A[k][i]/A[i][i]*A[i][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//回代</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</div><div class="line">            A[i][n] -= A[j][n]*A[i][j];</div><div class="line">        &#125;</div><div class="line">        A[i][n] /= A[i][i];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="化成对角矩阵的Guass-jordan算法："><a href="#化成对角矩阵的Guass-jordan算法：" class="headerlink" title="化成对角矩阵的Guass_jordan算法："></a>化成对角矩阵的Guass_jordan算法：</h2><h3 id="应用的范围："><a href="#应用的范围：" class="headerlink" title="应用的范围："></a>应用的范围：</h3><ul><li>可以判断是否<strong>有解</strong>，有<strong>无数的解</strong>，还是<strong>无解</strong>。</li><li>省略了上面的回代过程。</li><li>运算量比之前的上三角矩阵要大。</li></ul><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=489&amp;page=show_problem&amp;problem=1769" target="_blank" rel="external">10828 - Back to Kernighan-Ritchie</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>DAG图，一个程序<font color="#FF3030">从编号为1的节点进入</font>，问每个节点执行程序的期望的次数。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设第i个节点的期望的次数为\(x_i\),它的出度为\(d[x_i]\), 设它有前驱节点\(x_{s_1}, x_{s_2}, \cdots, x_{s_n}\).<br>那么<br>$$ \sum_{j=s1}^{sn} \frac{x_j}{d[x_j]} = x_i\ $$</p><p>其中由于一开始程序从编号为1的节点进入，那么计算\(x_1\)时上式的左边还有加上1.</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> Matrix[maxn][maxn];</div><div class="line"></div><div class="line"><span class="comment">// 由于本题的特殊性，消元后不一定是对角阵，甚至不一定是阶梯阵</span></div><div class="line"><span class="comment">// 但若x[i]解惟一且有限，第i行除了A[i][i]和A[i][n]之外的其他元素均为0</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gauss_jordan</span><span class="params">(Matrix A, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, k, r;</div><div class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">    r = i;</div><div class="line">    <span class="keyword">for</span>(j = i+<span class="number">1</span>; j &lt; n; j++)</div><div class="line">      <span class="keyword">if</span> (<span class="built_in">fabs</span>(A[j][i]) &gt; <span class="built_in">fabs</span>(A[r][i])) r = j;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(A[r][i]) &lt; eps) <span class="keyword">continue</span>; <span class="comment">// 放弃这一行，直接处理下一行 (*)</span></div><div class="line">    <span class="keyword">if</span>(r != i) <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt;= n; j++) swap(A[r][j], A[i][j]);</div><div class="line"></div><div class="line">    <span class="comment">// 与除了第i行外的其他行进行消元</span></div><div class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; n; k++) <span class="keyword">if</span>(k != i)</div><div class="line">      <span class="keyword">for</span>(j = n; j &gt;= i; j--) A[k][j] -= A[k][i]/A[i][i] * A[i][j];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Matrix A;</div><div class="line"><span class="keyword">int</span> n, d[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prev[maxn];</div><div class="line"><span class="keyword">int</span> inf[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n) &#123;</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) prev[i].clear();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a, b;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b) == <span class="number">2</span> &amp;&amp; a) &#123;</div><div class="line">      a--; b--; <span class="comment">// 改成从0开始编号</span></div><div class="line">      d[a]++; <span class="comment">// 结点a的出度加1</span></div><div class="line">      prev[b].push_back(a);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 构造方程组</span></div><div class="line">    <span class="built_in">memset</span>(A, <span class="number">0</span>, <span class="keyword">sizeof</span>(A));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">      A[i][i] = <span class="number">1</span>;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; prev[i].size(); j++)</div><div class="line">        A[i][prev[i][j]] -= <span class="number">1.0</span> / d[prev[i][j]];</div><div class="line">      <span class="keyword">if</span>(i == <span class="number">0</span>) A[i][n] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 解方程组，标记无穷变量</span></div><div class="line">    gauss_jordan(A, n);</div><div class="line">    <span class="built_in">memset</span>(inf, <span class="number">0</span>, <span class="keyword">sizeof</span>(inf));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">      <span class="keyword">if</span>(<span class="built_in">fabs</span>(A[i][i])&lt;eps &amp;&amp; <span class="built_in">fabs</span>(A[i][n])&gt;eps) inf[i] = <span class="number">1</span>; <span class="comment">// 直接解出来的无穷变量</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; n; j++)</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(A[i][j])&gt;eps &amp;&amp; inf[j]) inf[i] = <span class="number">1</span>; <span class="comment">// 和无穷变量扯上关系的变量也是无穷的</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> q, u;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++kase);</div><div class="line">    <span class="keyword">while</span>(q--) &#123;</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;u); u--;</div><div class="line">      <span class="keyword">if</span>(inf[u]) <span class="built_in">printf</span>(<span class="string">"infinity\n"</span>);</div><div class="line">      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>, <span class="built_in">fabs</span>(A[u][u])&lt;eps ? <span class="number">0.0</span> : A[u][n]/A[u][u]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="进一步的说明"><a href="#进一步的说明" class="headerlink" title="进一步的说明"></a>进一步的说明</h2><p>若是下面的情况：<br><img src="https://t1.picb.cc/uploads/2017/10/04/8Khtu.png" alt=""><br>可以列出下面的矩阵：<br>$$<br>        \left(<br>        \begin{array}{ccc|c}<br>        1 &amp; 0 &amp; -1 &amp; 1\\<br>        1 &amp; -1 &amp; 0 &amp; 0\\<br>        0 &amp; 1 &amp; -1 &amp; 0\\<br>        \end{array}<br>        \right)<br>        \Rightarrow<br>        \left(<br>        \begin{array}{ccc|c}<br>        1 &amp; 0 &amp; -1 &amp; 1\\<br>        0 &amp; -1 &amp; 1 &amp; -1\\<br>        0 &amp; 0 &amp; 0 &amp; -1\\<br>        \end{array}<br>        \right)<br>$$</p><p>在我们的认知中，出现上面的式子是无解的情况，但是实际的情况它是有<font color="#FF3030"><strong>无数解</strong></font>的。<br>书上留下了一个结论：</p><ul><li>当A[i][i] = A[i][n] = 0时， \(x_i\) = 0；</li><li>当A[i][i] = 0但A[i][n]&gt;0时，\(x_i\)为正无穷(上面的例子A[i][n]不一定保证为正吧)。<font color="#FF3030"><strong>我还不是很清楚其中的原因(待解决)，不过当我们无法判断的时候不妨带入到具体的例子中来解释，例如上面我画的例子。</strong></font></li></ul><h1 id="二进制高斯消元"><a href="#二进制高斯消元" class="headerlink" title="二进制高斯消元"></a>二进制高斯消元</h1><p>二进制高斯消元主要解决的是一类开关问题，最重要的是能够理解其中的含义：<br>规定：</p><ul><li>一个格子只有0、1两种状态。</li><li>将一个格子按下之后，这个格子本身和上下左右的格子都变成相反的状态。</li></ul><p>那么我们讨论一下为什么可以使用亦或(^)来描述这种状态的转变:</p><ul><li>若一个格子原来的状态是0，我们按下它旁边的一个格子，那么(0^1)=1,满足我们想要的表达的状态；若旁边的一个格子又按下(1^1)=0,依旧满足。</li><li>若一个格子的原来状态是1，那么按下它旁边的一个格子，那么(1^1)=0,依次类推。<br>总结：亦或运算有一种很好的<font color="#FF3030"><strong>状态转换</strong></font>的性质，还比如在treap中左孩子右旋，右孩子左旋的应用。（还记得吗QaQ?）<br>关于亦或(^)的很多其他有趣的性质，请自行百度！！</li></ul><p>下面用具体的题目来说明</p><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><a href="http://poj.org/problem?id=1222" target="_blank" rel="external">EXTENDED LIGHTS OUT</a></p><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给了5*6的格子，初始状态给定：0表示灯初始为灭的状态， 1表示灯初始为亮的状态。要求按下一些按钮之后，所有的灯都变成灭(0).</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>本题由于规模比较的小，可以使用枚举法。先枚举行的状态。<br>但是在这个专题里面我们使用二进制高斯消元。<br>首先对原来的格子进行编号：<br><img src="https://t1.picb.cc/uploads/2017/10/04/8KOi1.png" alt=""></p><p>$$\begin{cases}<br>a_{11} \bigotimes a_{12} \bigotimes a_{21} \bigotimes state_1= 0 \\<br>a_{12} \bigotimes a_{11} \bigotimes a_{13} \bigotimes a_{22} \bigotimes state_2 = 0 \\<br>\cdots \\<br>a_{21} \bigotimes a_{22} \bigotimes a_{11} \bigotimes a_{31} \bigotimes state_7 = 0\\<br>a_{21} \bigotimes a_{22} \bigotimes a_{23} \bigotimes a_{12} \bigotimes a_{32} \bigotimes state_8 = 0\\<br>\cdots \\<br>a_{55} \bigotimes a_{56} \bigotimes a_{46} \bigotimes state_{30} = 0<br>\end{cases}<br>$$<br>两边同时对\(state_i\)进行亦或，变一下型：</p><p>$$\begin{cases}<br>a_{11} \bigotimes a_{12} \bigotimes a_{21} = state_1 \\<br>a_{12} \bigotimes a_{11} \bigotimes a_{13} \bigotimes a_{22} = state_2 \\<br>\cdots \\<br>a_{21} \bigotimes a_{22} \bigotimes a_{11} \bigotimes a_{31} = state_7\\<br>a_{21} \bigotimes a_{22} \bigotimes a_{23} \bigotimes a_{12} \bigotimes a_{32} = state_8\\<br>\cdots \\<br>a_{55} \bigotimes a_{56} \bigotimes a_{46} = state_{30}<br>\end{cases}<br>$$<br>说明:\( state_i \)表示第i个格子的初始的状态<br>在一个方程中，若旁边的格子按下对一个\(state_i\)有影响，那么将所有的对i这个格子的影响亦或起来,最后的状态是灭(0).</p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">5</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> t, a[<span class="number">31</span>][<span class="number">31</span>], out[<span class="number">6</span>][<span class="number">6</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">back</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">        out[i / <span class="number">6</span>][i % <span class="number">6</span>] = a[i][<span class="number">30</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">guess</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</div><div class="line">        <span class="keyword">int</span> k=i;</div><div class="line">        <span class="keyword">for</span>(; k&lt;<span class="number">30</span>; k++)&#123;</div><div class="line">            <span class="keyword">if</span>(a[k][i])<span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;=<span class="number">30</span>; j++)&#123;</div><div class="line">            swap(a[i][j], a[k][j]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">30</span>; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(j == i) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(a[j][i])&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> s=i; s&lt;=<span class="number">30</span>; s++)&#123;</div><div class="line">                    a[j][s]^=a[i][s];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    back();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> cas = <span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span> (t--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][<span class="number">30</span>]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> x = i / <span class="number">6</span>, y = i % <span class="number">6</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> xx = x + d[j][<span class="number">0</span>];</div><div class="line">                <span class="keyword">int</span> yy = y + d[j][<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span> (xx &lt; <span class="number">0</span> || xx &gt;= <span class="number">5</span> || yy &lt; <span class="number">0</span> || yy &gt;= <span class="number">6</span>) <span class="keyword">continue</span>;</div><div class="line">                a[i][xx * <span class="number">6</span> + yy] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        guess();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"PUZZLE #%d\n"</span>, ++cas);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, out[i][j]);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, out[i][<span class="number">5</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1><p>如何超高精度的计算值呢？听数一说过好像有一种不断相减不断缩小系数的方法不会产生浮点数，类似于gcd的求解一样。</p>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高斯消元 </tag>
            
            <tag> 二进制高斯消元 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>稳定婚姻问题</title>
      <link href="/2017/10/03/%E7%A8%B3%E5%AE%9A%E5%A9%9A%E5%A7%BB%E9%97%AE%E9%A2%98/"/>
      <url>/2017/10/03/%E7%A8%B3%E5%AE%9A%E5%A9%9A%E5%A7%BB%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>本文介绍的是婚姻匹配的问题<br><a id="more"></a></p><script type="text/javascript" async src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script><h1 id="算法问题及介绍"><a href="#算法问题及介绍" class="headerlink" title="算法问题及介绍"></a>算法问题及介绍</h1><p>首先贴上一份matrix67大神的博客<br><a href="http://www.matrix67.com/blog/archives/2976" target="_blank" rel="external">如何寻找稳定的婚姻搭配</a></p><h1 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h1><p>每个男生需要和每一个女生结婚，每一个男生对每一个女生都有一个爱慕程度的排序，同样的每个女生对每一个男生都有一个爱慕的排序。<br>我们需要找到一个完美匹配，使得匹配的男生和女生有相对较优的匹配结果。不会出现<strong>男生A</strong>和<strong>女生1</strong>已经匹配好了，<strong>男生B</strong>和<strong>女生2</strong>已经匹配好了但是<strong>男生A</strong>心目中<strong>女生2</strong>的优先级更高，并且<strong>女生2</strong>心目中<strong>男生A</strong>的优先级比<strong>男生B</strong>高这种情况。</p><h1 id="算法的流程及其稳定性"><a href="#算法的流程及其稳定性" class="headerlink" title="算法的流程及其稳定性"></a>算法的流程及其稳定性</h1><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><ol><li><p>第一轮，每个男生选择最喜欢的女生，并且向女生表白。这个时候女生有三种情况：①没有追求者，继续保持单身的状态。②有一个追求者，答应结束单身状态。③有多个追求者，选择<font color="#FF3030"><strong>最喜欢的男</strong></font>生并且拒绝其他的男生。</p></li><li><p>第二轮，剩下的单身男生<strong>划去</strong>刚才追求失败的女生的序号，从剩余的序号中选择<font color="#FF3030"><strong>最喜欢的女生</strong></font>。这个时候若女生第一轮后保持单身，像之前的三种方式处理。若在第一轮女生结束了单身的状态，此时会遇到两种情况：①这一轮没有男生追求，保持该状态。②有男生追求，这个时候选择<font color="#FF3030">最喜欢的男生（包括之前答应的男生）</font>。若在此时有更喜欢的男生，抛弃之前答应的男生，第一轮的男生变成单身状态，更喜欢的男生结束单身状态，并且拒绝其他的所有的男生。或者第一轮的男生在追求者依旧是最喜欢的，保持该关系，拒绝其他男生。</p></li><li><p>按照上面的规则不断的进行男生求婚，女生选择最优的男生并且拒绝其他男生的步骤来完成筛选的过程。</p></li></ol><h2 id="算法的正确性说明"><a href="#算法的正确性说明" class="headerlink" title="算法的正确性说明"></a>算法的正确性说明</h2><p>我们讨论是否会出现一对男女，他们彼此间的爱慕程度都比现任的男女朋友高，但是现在并没有在一起。<br>我们直接给出一个例子：<br>男生A(1, 2)             女生(A, B)<br>男生B(1, 2)             女生(B, A)</p><p>那么婚姻匹配的结果只能是A-1， B-2.会不会出现A-2， B-1的情况能？<br>答案是否定的。</p><ul><li>假设一开始B和1是男女朋友，当男生A向女生1发出请求的时候，那么女生1会改变男朋友而选择B。</li><li>假设一开始A和1是男女朋友，当男生B向女生A发出请求的时候，那么女生1会保持原来的状态拒绝B。<br>综上，不会发生不稳定的情况。</li></ul><h2 id="算法的稳定性"><a href="#算法的稳定性" class="headerlink" title="算法的稳定性"></a>算法的稳定性</h2><p>那么算法会不会陷入一个死循环呢？答案是不会的。<br>简单说明：<br>一旦女生处于脱单的状态，那么该女生将会<strong>一直处于脱单的状态</strong>。<br>假设有n个男生，n个女生，那么意向的表的规模是\(n^2\)的，算法一定能将表依次的处理完（具体的处理过程看最开始推荐的博客），由于意向表使得一定所有的女生会被表白。（哪怕所有的男生的爱慕表的最后一位都是同一个女生，这个女生也是可以脱单的）</p><h1 id="1175-Ladies’-Choice"><a href="#1175-Ladies’-Choice" class="headerlink" title="1175 - Ladies’ Choice"></a>1175 - Ladies’ Choice</h1><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3616" target="_blank" rel="external">1175 - Ladies’ Choice</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>很裸的一道稳定婚姻匹配问题，按照上面的步骤来操作就行了。<br>时间复杂度O(\(n^2\))<br>注意第一个输入的是女生的喜欢男生的列表。<br>第二个是男生的喜欢女生的列表。<br><strong>要求输出的是第i个女生匹配的男生的序号</strong>和下面的男女性别是不同的含义，但是结果是一样的。</p><font color="#FF3030"><strong>题目是女生来选男生，下面的代码使男生来选择女生</strong></font><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</div><div class="line"><span class="comment">//pref是男生的爱慕程度表，order是女生的爱慕表，nex数组是男生选择女生的顺序</span></div><div class="line"><span class="keyword">int</span> pref[maxn][maxn], order[maxn][maxn], nex[maxn];</div><div class="line"><span class="keyword">int</span> future_husband[maxn];</div><div class="line"><span class="keyword">int</span> future_wife[maxn];</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">engage</span><span class="params">(<span class="keyword">int</span> man, <span class="keyword">int</span> woman)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> m = future_husband[woman];</div><div class="line">    <span class="comment">//m不为0说明女生之前有男朋友，那么抛弃前男友，和新的男生匹配。</span></div><div class="line">    <span class="keyword">if</span>(m!=<span class="number">0</span>)&#123;</div><div class="line">        future_wife[m] = <span class="number">0</span>;</div><div class="line">        q.push(m);<span class="comment">//背弃的男生加入匹配的队列</span></div><div class="line">    &#125;</div><div class="line">    future_husband[woman] = man;</div><div class="line">    future_wife[man] = woman;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> kase=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">while</span>(!q.empty()) q.pop();</div><div class="line">        <span class="keyword">if</span>(++kase&gt;<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pref[i][j]);<span class="comment">//编号为i的男生第j喜欢的女生</span></div><div class="line">            &#125;</div><div class="line">            future_wife[i] = <span class="number">0</span>;          <span class="comment">//未脱团初始化为0</span></div><div class="line">            nex[i] = <span class="number">1</span>;                  <span class="comment">//向排名第一名女生表白</span></div><div class="line">            q.push(i);                   <span class="comment">//进入脱单的匹配队列</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</div><div class="line">                <span class="keyword">int</span> temp;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</div><div class="line">                order[i][temp] = j;      <span class="comment">//编号为i的女生男生temp在女生心中的序号</span></div><div class="line">            &#125;</div><div class="line">            future_husband[i] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">            <span class="keyword">int</span> man = q.front();</div><div class="line">            q.pop();</div><div class="line">            <span class="keyword">int</span> woman = pref[man][nex[man]];</div><div class="line">            nex[man]++;</div><div class="line">            <span class="keyword">if</span>(!future_husband[woman]) engage(man, woman);<span class="comment">//若女生处于单身状态，直接匹配</span></div><div class="line">            <span class="comment">//现在匹配的男生比之前的男朋友更优，女生舍弃前男友而选择现在的男生</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(order[woman][man]&lt;order[woman][future_husband[woman]])&#123;</div><div class="line">                engage(man, woman);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//未被选中，男生进入下一轮的匹配</span></div><div class="line">            <span class="keyword">else</span> q.push(man);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, future_wife[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>说明：该算法每次选择一个单身的男性进行匹配，根据情况男生被匹配或者被拒绝再次进行匹配。<br>又每一个男生最多考虑每个女生依次，时间复杂度为O(\(n^2\))。并且进一步的说明了该算法的稳定性，一定不会陷入死循环。</p><h1 id="有趣的现象"><a href="#有趣的现象" class="headerlink" title="有趣的现象"></a>有趣的现象</h1><p>我们从上面的思想中看到了一个很有意思的现象：男生处于相对的主动的地方，不断的选择自己最喜欢的女生，虽然可能会被拒绝。<br>女生处于一个相对被动的位置，不断的接受最喜欢男生的请求。<br>结论：<font color="#FF3030"><strong>男生所得到的结果是不断的变坏的，女生选择结果是不断的变好的</strong></font>这两种趋向最后变成了最稳定的匹配，感觉很有意思。</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gale-Shapley Algorithm </tag>
            
            <tag> 求婚-拒绝算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>KM算法模板</title>
      <link href="/2017/10/02/KM%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
      <url>/2017/10/02/KM%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p>KM算法，在此不涉及科学的证明，仅仅是粗略的说明算法的正确性。<br><a id="more"></a></p><script type="text/javascript" async src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=4157" target="_blank" rel="external">Uva1411-Ants</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>第一个参数是代表点的对数。<br>接下来n行表示蚂蚁的坐标<br>接下来n行表示apple tree的坐标<br>要求第i个蚂蚁对应的苹果树的序号，要求任意一种连线不能重合的方案即可</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>不妨将蚂蚁抽象成白点，苹果树抽象成黑点。黑点和白点构成了二分图的关系。两点间边的权值对应着欧几里得距离。<br>那么为什么使用KM算法是正确的呢？<br>假设最佳完美匹配中，存在两条相交的直线\(a_1-b_1\)和\(a_2-b_2\)。那么dist(a1, b1)+dist(a2, b2)一定大于dist(a1, b2)+dist(a2, b1);<br>而后者是不相交的。而KM算法算的是权值和最大的值.<strong>但是我们可以将原理的权值转换为负值来求最大值，再取反从而求得了最小值</strong>。</p><h1 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h1><p>说明：这是我在网上找到的一个复杂度为O(\(n^3\))的算法，代码风格不是很好。<br>去除了原来算法中的slack[]变量。</p><font color="#FF3030"><strong>左右顶标(ex_girl[]和ex_boy[])的和就是最佳完美匹配的权值和</strong></font><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"></div><div class="line"><span class="keyword">double</span> love[MAXN][MAXN];   <span class="comment">// 记录每个妹子和每个男生的好感度</span></div><div class="line"><span class="keyword">double</span> ex_girl[MAXN];      <span class="comment">// 每个妹子的期望值</span></div><div class="line"><span class="keyword">double</span> ex_boy[MAXN];       <span class="comment">// 每个男生的期望值</span></div><div class="line"><span class="keyword">bool</span> vis_girl[MAXN];    <span class="comment">// 记录每一轮匹配匹配过的女生</span></div><div class="line"><span class="keyword">bool</span> vis_boy[MAXN];     <span class="comment">// 记录每一轮匹配匹配过的男生</span></div><div class="line"><span class="keyword">int</span> match[MAXN];        <span class="comment">// 记录每个男生匹配到的妹子 如果没有则为-1</span></div><div class="line"><span class="comment">//double slack[MAXN];        // 记录每个汉子如果能被妹子倾心最少还需要多少期望值</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> N;</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((<span class="keyword">double</span>)(x2-x1)*(x2-x1)+(<span class="keyword">double</span>)(y2-y1)*(y2-y1));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> girl)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    vis_girl[girl] = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> boy = <span class="number">0</span>; boy &lt; N; ++boy) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (vis_boy[boy]) <span class="keyword">continue</span>; <span class="comment">// 每一轮匹配 每个男生只尝试一次</span></div><div class="line"></div><div class="line">        <span class="keyword">double</span> gap = ex_girl[girl] + ex_boy[boy] - love[girl][boy];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(gap) &lt;= eps) &#123;  <span class="comment">// 如果符合要求</span></div><div class="line">            vis_boy[boy] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (match[boy] == <span class="number">-1</span> || dfs( match[boy] )) &#123;    <span class="comment">// 找到一个没有匹配的男生 或者该男生的妹子可以找到其他人</span></div><div class="line">                match[boy] = girl;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span>  <span class="title">KM</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(match, <span class="number">-1</span>, <span class="keyword">sizeof</span>(match));    <span class="comment">// 初始每个男生都没有匹配的女生</span></div><div class="line">    <span class="built_in">memset</span>(ex_boy, <span class="number">0</span>, <span class="keyword">sizeof</span>(ex_boy));   <span class="comment">// 初始每个男生的期望值为0</span></div><div class="line"></div><div class="line">    <span class="comment">// 每个女生的初始期望值是与她相连的男生最大的好感度</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</div><div class="line">        ex_girl[i] = love[i][<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j) &#123;</div><div class="line">            ex_girl[i] = max(ex_girl[i], love[i][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 尝试为每一个女生解决归宿问题</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</div><div class="line">        <span class="comment">//fill(slack, slack + N, INF);    // 因为要取最小值 初始化为无穷大</span></div><div class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">// 为每个女生解决归宿问题的方法是 ：如果找不到就降低期望值，直到找到为止</span></div><div class="line"></div><div class="line">            <span class="comment">// 记录每轮匹配中男生女生是否被尝试匹配过</span></div><div class="line">            <span class="built_in">memset</span>(vis_girl, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis_girl));</div><div class="line">            <span class="built_in">memset</span>(vis_boy, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis_boy));</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (dfs(i)) <span class="keyword">break</span>;  <span class="comment">// 找到归宿 退出</span></div><div class="line"></div><div class="line">            <span class="comment">// 如果不能找到 就降低期望值</span></div><div class="line">            <span class="comment">// 最小可降低的期望值</span></div><div class="line">            <span class="keyword">double</span> d = INF;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)<span class="keyword">if</span>(vis_girl[i])&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(!vis_boy[j])&#123;</div><div class="line">                        d = min(d, ex_girl[i]+ex_boy[j]-love[i][j]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</div><div class="line">                <span class="comment">// 所有访问过的女生降低期望值</span></div><div class="line">                <span class="keyword">if</span> (vis_girl[j]) ex_girl[j] -= d;</div><div class="line">                <span class="comment">// 所有访问过的男生增加期望值</span></div><div class="line">                <span class="keyword">if</span> (vis_boy[j]) ex_boy[j] += d;</div><div class="line">                <span class="comment">// 没有访问过的boy 因为girl们的期望值降低，距离得到女生倾心又进了一步！</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</div><div class="line">        ans+=(ex_boy[i]+ex_girl[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> kase=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> pos[MAXN][<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> pos1[MAXN][<span class="number">2</span>];</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N) == <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(++kase&gt;<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;pos[i][<span class="number">0</span>], &amp;pos[i][<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;pos1[i][<span class="number">0</span>], &amp;pos1[i][<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</div><div class="line">                love[i][j] = <span class="number">-1.0</span>*get_dis(pos1[i][<span class="number">0</span>], pos1[i][<span class="number">1</span>], pos[j][<span class="number">0</span>], pos[j][<span class="number">1</span>]);</div><div class="line">        KM();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, match[i]+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="KM算法"><a href="#KM算法" class="headerlink" title="KM算法"></a>KM算法</h1><h2 id="原理及其正确性"><a href="#原理及其正确性" class="headerlink" title="原理及其正确性"></a>原理及其正确性</h2><p><a href="http://www.cnblogs.com/wenruo/p/5264235.html" target="_blank" rel="external">算法模拟的详细过程</a></p><p>首先我们定义两个概念：</p><ul><li><p><font color="#FF3030"><strong>可行顶标</strong></font>是一个节点函数l,使得对任意的弧(x, y), 有l(x)+l(y)\(\geq\)w(x, y)。<br>进一步的说明：l(x)和l(y)函数的值都是<strong>人为的自由的设定</strong>的， w(x, y)是边的权值,题目中给定。</p></li><li><p><font color="#FF3030"><strong>相等子图</strong></font>是G的<font color="#FF3030"><strong>生成子图</strong></font>，包含所有的点，但是只包含l(x)+l(y) = w(x, y)的所有的边(x, y)。</p></li></ul><font color="#FF3030">结论：如果相等子图有完美匹配， 那么该匹配是原图的最大权匹配</font><p>证明上面的结论：</p><ol><li>设\(M^* \)是相等子图的完美匹配，那么\(M^*\)的边权和<strong>等于点的权值和</strong>(顶标的和);</li><li>任取G的一个完美匹配M，由于M中边满足不等式w(x, y)\(\geq\)l(x)+l(y)，M的边权的和<strong>不能超过所有的顶标之和</strong>。</li><li>综合前面两点，完美匹配不能超过顶标之和（第二条的规定保证），并且能够取到等号(第一条的规定保证)，那么顶标之和就是权值最大了。</li></ol><h2 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// LA4043 Ants</span></div><div class="line"><span class="comment">// Rujia Liu</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e9</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">double</span> W[maxn][maxn];</div><div class="line"><span class="keyword">double</span> Lx[maxn], Ly[maxn];   <span class="comment">// 顶标</span></div><div class="line"><span class="keyword">int</span> left[maxn];          <span class="comment">// left[i]为右边第i个点的匹配点编号</span></div><div class="line"><span class="keyword">bool</span> S[maxn], T[maxn];   <span class="comment">// S[i]和T[i]为左/右第i个点是否已标记</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">eq</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">fabs</span>(a-b) &lt; <span class="number">1e-6</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">  S[i] = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span> (eq(Lx[i]+Ly[j], W[i][j]) &amp;&amp; !T[j])&#123;</div><div class="line">    T[j] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span> (!left[j] || match(left[j]))&#123;</div><div class="line">      left[j] = i;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">double</span> a = INF;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span>(S[i])</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(!T[j])</div><div class="line">      a = min(a, Lx[i]+Ly[j] - W[i][j]);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(S[i]) Lx[i] -= a;</div><div class="line">    <span class="keyword">if</span>(T[i]) Ly[i] += a;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">KM</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">    left[i] = Lx[i] = Ly[i] = <span class="number">0</span>;</div><div class="line">    Lx[i] = W[i][<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">      Lx[i] = max(Lx[i], W[i][j]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">    <span class="keyword">for</span>(;;) &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) S[j] = T[j] = <span class="number">0</span>;</div><div class="line">      <span class="keyword">if</span>(match(i)) <span class="keyword">break</span>; <span class="keyword">else</span> update();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">if</span>(++kase &gt; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> x1[maxn], y1[maxn], x2[maxn], y2[maxn];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x1[i], &amp;y1[i]);<span class="comment">//ants</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x2[i], &amp;y2[i]);<span class="comment">//apple tree</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">// ant colony</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="comment">// apple tree</span></div><div class="line">        W[i][j] = -<span class="built_in">sqrt</span>((<span class="keyword">double</span>)(x1[j]-x2[i])*(x1[j]-x2[i]) + (<span class="keyword">double</span>)(y1[j]-y2[i])*(y1[j]-y2[i]));</div><div class="line"><span class="comment">//    for(int i=0; i&lt;n; i++)</span></div><div class="line"><span class="comment">////    &#123;</span></div><div class="line"><span class="comment">////        for(int j=0; j&lt;n; j++)&#123;</span></div><div class="line"><span class="comment">////            printf("%lf ", W[i][j]);</span></div><div class="line"><span class="comment">////        &#125;</span></div><div class="line"><span class="comment">////        printf("\n");</span></div><div class="line"><span class="comment">////    &#125;</span></div><div class="line">    KM(); <span class="comment">// 最大权匹配</span></div><div class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) ans+=(Lx[i]+Ly[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, left[i]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="适用的场景范围"><a href="#适用的场景范围" class="headerlink" title="适用的场景范围"></a>适用的场景范围</h1><p>题目中的二分图的两个集合中元素的<strong>个数要相同,即要首先要存在完美匹配</strong>。且两点间一定要有刻量的边权关系。(比如好感度，若两者间没有好感，那么边权赋值为0，不能是无法连接的状态。)</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1><p>KM算法还可以用费用来实现，这样的思想还不会。<br>适应的场景范围需要进一步的刷题求证。</p>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KM算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Uva 1479 - Graph and Queries</title>
      <link href="/2017/10/01/Uva-1479-Graph-and-Queries/"/>
      <url>/2017/10/01/Uva-1479-Graph-and-Queries/</url>
      <content type="html"><![CDATA[<p>国庆快乐~~~(<em>^__^</em>) 嘻嘻……<br><img src="https://t1.picb.cc/uploads/2017/10/01/8NTL7.jpg" alt=""><br><a id="more"></a></p><script type="text/javascript" async src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=4225" target="_blank" rel="external">题目链接</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li><p>题目共有三种操作：query表示查询x节点的第k大的值;delete表示删除编号为x的边所连接的两点的关系;change表示改变x节点的权值为value。</p></li><li><p>若正向的模拟，那么删除边的操作比较的难以实现。因为treap不能实现分裂的操作。而splay是能够实现合并与分裂的操作，但是是第k大的，不能删除任意两点间的</p></li><li><p>此时想到的是完全反过来的逆过程：我们最开始得到的图是删除了所有应该删去的边的图。query的操作不改变;delete的操作变成了add_edge的操作；change的操作变成了将值变成<font color="#FF3030"><strong>原来的值</strong></font>的操作。</p></li></ul><h1 id="此题的坑点"><a href="#此题的坑点" class="headerlink" title="此题的坑点"></a>此题的坑点</h1><ul><li>又一次的栽在了读入的操作上，注意数字和字母间的读入操作加个getchar()或者空格（Uva太垃圾了，一直显示的是RE，害的我调了三天。。。）</li><li>数组大小的，防止越界</li><li>在插入操作的时候不要使用结构体里面的cmp函数。因为可能插入<font color="#FF3030"><strong>相同的值</strong></font></li></ul><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">6e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxc = <span class="number">5e5</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    Node* ch[<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> value;<span class="comment">//保存的是节点的值</span></div><div class="line">    <span class="keyword">int</span> rank_value;<span class="comment">//用随机函数生成名次，从而使时间复杂度保持O(logn)</span></div><div class="line">    <span class="keyword">int</span> s;<span class="comment">//增加这个size属性，从而实现从联通的块中寻找第K大的数</span></div><div class="line">    Node(<span class="keyword">int</span> value):value(value)&#123;</div><div class="line">        ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="literal">NULL</span>;</div><div class="line">        rank_value = rand();</div><div class="line">        s = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(x == value) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">return</span> x&lt;value?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span></span>&#123;</div><div class="line">       s = <span class="number">1</span>;</div><div class="line">       <span class="keyword">if</span>(ch[<span class="number">0</span>] != <span class="literal">NULL</span>) s+=ch[<span class="number">0</span>]-&gt;s;</div><div class="line">       <span class="keyword">if</span>(ch[<span class="number">1</span>] != <span class="literal">NULL</span>) s+=ch[<span class="number">1</span>]-&gt;s;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//旋转的操作，使子节点旋转到根部</span></div><div class="line"><span class="comment">//rt代表根节点，d表示旋转的类型,d=0表示左旋,d=1表示右旋</span></div><div class="line"><span class="comment">//若使右孩子旋到根节点，则左旋；</span></div><div class="line"><span class="comment">//若使左孩子旋到根节点，则右旋；</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Node* &amp;rt, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    Node* k = rt-&gt;ch[d^<span class="number">1</span>];</div><div class="line">    rt-&gt;ch[d^<span class="number">1</span>] = k-&gt;ch[d];</div><div class="line">    k-&gt;ch[d] = rt;</div><div class="line">    rt-&gt;maintain();</div><div class="line">    k-&gt;maintain();</div><div class="line">    rt = k;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node* &amp;rt, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(rt == <span class="literal">NULL</span>) rt = <span class="keyword">new</span> Node(value);</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">int</span> d = rt-&gt;value&lt;value?<span class="number">1</span>:<span class="number">0</span>;<span class="comment">//这里不能使用cmp函数，因为插入的值可能相等！！！</span></div><div class="line">        insert(rt-&gt;ch[d], value);</div><div class="line">        <span class="comment">//举一个例子便于理解：</span></div><div class="line">        <span class="comment">//若右孩子的rank大于根节点的rank,由于不满足名次树的性质，</span></div><div class="line">        <span class="comment">//则要将右孩子旋转到根节点，进行左旋。</span></div><div class="line">        <span class="keyword">if</span>(rt-&gt;ch[d]-&gt;rank_value&gt;rt-&gt;rank_value)&#123;</div><div class="line">            rotate(rt, d^<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    rt-&gt;maintain();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node* &amp;rt, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> d = rt-&gt;cmp(value);</div><div class="line">    Node * temp = rt;</div><div class="line">    <span class="comment">//若找到了要删除的节点，都是转换成该节点只有一个孩子</span></div><div class="line">    <span class="comment">//若该节点有两个孩子，则将rank较大的孩子进行旋转，旋转到根部</span></div><div class="line">    <span class="comment">//最后转换成只有一个孩子进行删除。</span></div><div class="line">    <span class="keyword">if</span>(d == <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(rt-&gt;ch[<span class="number">0</span>] == <span class="literal">NULL</span>) rt = rt-&gt;ch[<span class="number">1</span>], <span class="keyword">delete</span> temp;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(rt-&gt;ch[<span class="number">1</span>] == <span class="literal">NULL</span>) rt = rt-&gt;ch[<span class="number">0</span>], <span class="keyword">delete</span> temp;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> d2 = (rt-&gt;ch[<span class="number">0</span>]-&gt;rank_value&lt;rt-&gt;ch[<span class="number">1</span>]-&gt;rank_value)?<span class="number">1</span>:<span class="number">0</span>;</div><div class="line">            rotate(rt, d2);</div><div class="line">            remove(rt-&gt;ch[d2], value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//若没有找到孩子的话，则递归的继续向下寻找。</span></div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        remove(rt-&gt;ch[d], value);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(rt != <span class="literal">NULL</span>) rt-&gt;maintain();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Command</span>&#123;</span></div><div class="line">    <span class="keyword">char</span> type;</div><div class="line">    <span class="keyword">int</span> x, p;</div><div class="line">&#125;command[maxc];</div><div class="line"></div><div class="line">Node* root[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, weight[maxn], from[maxm], to[maxm];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="comment">//用并查集实现连通的团的查询和修改</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> fa[x] == x? x:fa[x] = findset(fa[x]);</div><div class="line">&#125;</div><div class="line"><span class="comment">//找到一个连通块第K大的值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(Node* rt, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(k&lt;=<span class="number">0</span>||rt-&gt;s&lt;k||rt == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> k1;</div><div class="line">    <span class="keyword">if</span>(rt-&gt;ch[<span class="number">1</span>]!=<span class="literal">NULL</span>)&#123;</div><div class="line">        k1 = rt-&gt;ch[<span class="number">1</span>]-&gt;s;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> k1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(k1+<span class="number">1</span> == k) <span class="keyword">return</span> rt-&gt;value;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k&lt;=k1) <span class="keyword">return</span> kth(rt-&gt;ch[<span class="number">1</span>], k);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> kth(rt-&gt;ch[<span class="number">0</span>], k-k1<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//两个块的合并</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeto</span><span class="params">(Node* &amp;sc, Node* &amp;dst)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(sc-&gt;ch[<span class="number">0</span>]!=<span class="literal">NULL</span>) mergeto(sc-&gt;ch[<span class="number">0</span>], dst);</div><div class="line">    <span class="keyword">if</span>(sc-&gt;ch[<span class="number">1</span>]!=<span class="literal">NULL</span>) mergeto(sc-&gt;ch[<span class="number">1</span>], dst);</div><div class="line">    insert(dst, sc-&gt;value);</div><div class="line">    <span class="keyword">delete</span> sc;</div><div class="line">    sc = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//初始化root的集合，使每个节点都是一个单独的块</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_tree</span><span class="params">(Node* &amp;rt)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(rt-&gt;ch[<span class="number">0</span>] != <span class="literal">NULL</span>) init_tree(rt-&gt;ch[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">if</span>(rt-&gt;ch[<span class="number">1</span>] != <span class="literal">NULL</span>) init_tree(rt-&gt;ch[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">delete</span> rt;</div><div class="line">    rt = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> edge_index)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u = from[edge_index];</div><div class="line">    <span class="keyword">int</span> v = to[edge_index];</div><div class="line">    u = findset(u);</div><div class="line">    v = findset(v);</div><div class="line">    <span class="keyword">if</span>(u != v)&#123;</div><div class="line">        <span class="keyword">if</span>(root[u]-&gt;s&lt;root[v]-&gt;s)&#123;</div><div class="line">            fa[u] = v;</div><div class="line">            mergeto(root[u], root[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            fa[v] = u;</div><div class="line">            mergeto(root[v], root[u]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//改变点的权重</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> u = findset(x);</div><div class="line">    remove(root[u], weight[x]);</div><div class="line">    insert(root[u], value);</div><div class="line">    weight[x] = value;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> query_cnt;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> query_tot;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    query_cnt++;</div><div class="line">    query_tot += kth(root[findset(x)], k);</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> removed[maxm];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> kase = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) == <span class="number">2</span>&amp;&amp;n)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;weight[i]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;from[i], &amp;to[i]);</div><div class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(removed, <span class="number">0</span>, <span class="keyword">sizeof</span>(removed));</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">            <span class="keyword">char</span> type;</div><div class="line">            <span class="keyword">int</span> x, p;</div><div class="line">            getchar();</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;type);</div><div class="line">            <span class="keyword">if</span>(type == <span class="string">'E'</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="string">'C'</span>) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;p);</div><div class="line">                <span class="keyword">int</span> temp = p;</div><div class="line">                p = weight[x];</div><div class="line">                weight[x] = temp;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="string">'D'</span>)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                removed[x] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="string">'Q'</span>)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;p);</div><div class="line">            &#125;</div><div class="line">            command[c++] = Command&#123;type, x, p&#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            fa[i] = i;</div><div class="line">            <span class="keyword">if</span>(root[i] != <span class="literal">NULL</span>) init_tree(root[i]);</div><div class="line">            root[i] = <span class="keyword">new</span> Node(weight[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</div><div class="line">            <span class="comment">//cout&lt;&lt;233&lt;&lt;endl;</span></div><div class="line">            <span class="keyword">if</span>(!removed[i]) add_edge(i);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//cout&lt;&lt;root[1]&lt;&lt;endl;</span></div><div class="line">        query_cnt = query_tot = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=c<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">            <span class="comment">//cout&lt;&lt;command[i].x&lt;&lt;" "&lt;&lt;command[i].p&lt;&lt;endl;</span></div><div class="line">            <span class="keyword">if</span>(command[i].type == <span class="string">'C'</span>) change(command[i].x, command[i].p);</div><div class="line">            <span class="keyword">if</span>(command[i].type == <span class="string">'Q'</span>) query(command[i].x, command[i].p);</div><div class="line">            <span class="keyword">if</span>(command[i].type == <span class="string">'D'</span>) add_edge(command[i].x);</div><div class="line">            <span class="comment">//cout&lt;&lt;query_cnt&lt;&lt;" "&lt;&lt;query_tot&lt;&lt;endl;</span></div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %.6lf\n"</span>, ++kase, query_tot*<span class="number">1.0</span>/query_cnt);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="treap"><a href="#treap" class="headerlink" title="treap"></a>treap</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>treap有<font color="#FF3030"><strong>键值</strong></font>(value)和<font color="#FF3030"><strong>优先级</strong></font>(rank_value)的树，又称为名次树。</p><h2 id="成员函数及功能"><a href="#成员函数及功能" class="headerlink" title="成员函数及功能"></a>成员函数及功能</h2><p>属性：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    Node* ch[<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line">    <span class="keyword">int</span> rank_value;</div><div class="line">    <span class="keyword">int</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>void rotate(Node* &amp;rt, int d)<br>功能：将一个子节点翻转到根部</p><p>void insert(Node* &amp;rt, int value)<br>功能：将一个值插入到树中</p><p>void remove(Node* &amp;rt, int value)<br>功能：将特定的值从树中删除</p><p>bool find(Node* &amp;rt, int value)<br>功能：查询一个值是否在树中</p><p>int kth(Node* rt, int k)<br>功能：查询第k大的数字</p><p>int rank(Node* rt, int value)<br>功能：查询value数值是第几小的，与kth()功能差不多</p></blockquote><p>模板代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Rank Tree</span></div><div class="line"><span class="comment">// Rujia Liu</span></div><div class="line"><span class="comment">// 输入格式：</span></div><div class="line"><span class="comment">// m     操作有m个</span></div><div class="line"><span class="comment">// 1 x   插入元素x</span></div><div class="line"><span class="comment">// 2 x   删除元素x。如果成功，输入1，否则输出0</span></div><div class="line"><span class="comment">// 3 k   输出第k小元素。k=1为最小元素</span></div><div class="line"><span class="comment">// 4 x   输出值x的“名次”，即比x小的结点个数加1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">  Node *ch[<span class="number">2</span>]; <span class="comment">// 左右子树</span></div><div class="line">  <span class="keyword">int</span> r; <span class="comment">// 随机优先级</span></div><div class="line">  <span class="keyword">int</span> v; <span class="comment">// 值</span></div><div class="line">  <span class="keyword">int</span> s; <span class="comment">// 结点总数</span></div><div class="line">  Node(<span class="keyword">int</span> v = <span class="number">0</span>):v(v) &#123; ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="literal">NULL</span>; r = rand(); s = <span class="number">1</span>; &#125;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == v) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> x &lt; v ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</div><div class="line">    s = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(ch[<span class="number">0</span>] != <span class="literal">NULL</span>) s += ch[<span class="number">0</span>]-&gt;s;</div><div class="line">    <span class="keyword">if</span>(ch[<span class="number">1</span>] != <span class="literal">NULL</span>) s += ch[<span class="number">1</span>]-&gt;s;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Node* &amp;o, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">  Node* k = o-&gt;ch[d^<span class="number">1</span>]; o-&gt;ch[d^<span class="number">1</span>] = k-&gt;ch[d]; k-&gt;ch[d] = o; </div><div class="line">  o-&gt;maintain(); k-&gt;maintain(); o = k;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node* &amp;o, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span>(o == <span class="literal">NULL</span>) o = <span class="keyword">new</span> Node(x);</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">int</span> d = (x &lt; o-&gt;v ? <span class="number">0</span> : <span class="number">1</span>); <span class="comment">// 不要用cmp函数，因为可能会有相同结点</span></div><div class="line">    insert(o-&gt;ch[d], x);</div><div class="line">    <span class="keyword">if</span>(o-&gt;ch[d]-&gt;r &gt; o-&gt;r) rotate(o, d^<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  o-&gt;maintain();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">find</span><span class="params">(Node* o, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span>(o == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">  <span class="keyword">if</span>(x == o-&gt;v) <span class="keyword">return</span> o;</div><div class="line">  <span class="keyword">return</span> x &lt; o-&gt;v ? find(o-&gt;ch[<span class="number">0</span>], x) : find(o-&gt;ch[<span class="number">1</span>], x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 要确保结点存在</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node* &amp;o, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> d = o-&gt;cmp(x);</div><div class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span>(d == <span class="number">-1</span>) &#123;</div><div class="line">    Node* u = o;</div><div class="line">    <span class="keyword">if</span>(o-&gt;ch[<span class="number">0</span>] != <span class="literal">NULL</span> &amp;&amp; o-&gt;ch[<span class="number">1</span>] != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="keyword">int</span> d2 = (o-&gt;ch[<span class="number">0</span>]-&gt;r &gt; o-&gt;ch[<span class="number">1</span>]-&gt;r ? <span class="number">1</span> : <span class="number">0</span>);</div><div class="line">      rotate(o, d2); remove(o-&gt;ch[d2], x);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">if</span>(o-&gt;ch[<span class="number">0</span>] == <span class="literal">NULL</span>) o = o-&gt;ch[<span class="number">1</span>]; <span class="keyword">else</span> o = o-&gt;ch[<span class="number">0</span>];</div><div class="line">      <span class="keyword">delete</span> u;</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span></div><div class="line">    remove(o-&gt;ch[d], x);</div><div class="line">  <span class="keyword">if</span>(o != <span class="literal">NULL</span>) o-&gt;maintain();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(Node* o, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span>(o == <span class="literal">NULL</span> || k &lt;= <span class="number">0</span> || k &gt; o-&gt;s) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> s = (o-&gt;ch[<span class="number">0</span>] == <span class="literal">NULL</span> ? <span class="number">0</span> : o-&gt;ch[<span class="number">0</span>]-&gt;s);</div><div class="line">  <span class="keyword">if</span>(k == s+<span class="number">1</span>) <span class="keyword">return</span> o-&gt;v;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(k &lt;= s) <span class="keyword">return</span> kth(o-&gt;ch[<span class="number">0</span>], k);</div><div class="line">  <span class="keyword">else</span> <span class="keyword">return</span> kth(o-&gt;ch[<span class="number">1</span>], k-s<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 在以o为根的子树中，值比x小的结点总数加1</span></div><div class="line"><span class="comment">//与kth是相对的</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(Node* o, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span>(o == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">if</span>(x &lt;= o-&gt;v) <span class="keyword">return</span> rank(o-&gt;ch[<span class="number">0</span>], x);</div><div class="line">  <span class="keyword">return</span> rank(o-&gt;ch[<span class="number">1</span>], x) + (o-&gt;ch[<span class="number">0</span>] == <span class="literal">NULL</span> ? <span class="number">0</span> : o-&gt;ch[<span class="number">0</span>]-&gt;s) + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> m, c, v;</div><div class="line">  Node* root = <span class="keyword">new</span> Node(INF);</div><div class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m) == <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">while</span>(m--) &#123;</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;c, &amp;v);</div><div class="line">      <span class="keyword">if</span>(c == <span class="number">1</span>) insert(root, v);</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">2</span>) &#123;</div><div class="line">        Node* o = find(root, v);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, o == <span class="literal">NULL</span> ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(o != <span class="literal">NULL</span>) remove(root, v);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, kth(root, v));</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, rank(root, v));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="编写代码时要注意的"><a href="#编写代码时要注意的" class="headerlink" title="编写代码时要注意的"></a>编写代码时要注意的</h2><p>当实现rotate的时候，心中时刻想着一张图：当将<font color="#FF3030"><strong>右儿子</strong></font>旋转到根部的时候，要进行<font color="#FF3030"><strong>左旋</strong></font>的操作。分成三步走就行了。</p><p>当实现insert的时候，不断的寻找根部，最后插入了，若rank大于根节点的rank,则进行相应的旋转</p><p>当实现delete的时候，若要删除的节点有两个孩子，那么将rank较大的旋转到根部，使之转换成只有一个孩子的情况，然后删除该节点。</p><font color="#FF3030"><strong>总之，心中一定要有一张树的图，进行相应的操作的时候，在心里面进行相应的操作</strong></font><h1 id="启发式合并"><a href="#启发式合并" class="headerlink" title="启发式合并"></a>启发式合并</h1><p>假设有两棵树T1和T2，节点的数量分别是n1和n2,若n1&lt;n2,显然把T1合并到T2比较的高效，即把T1中的节点一一插入到T2中，时间复杂度为O(\(n_1log(n_2)\))<br>至于为什么这个名词，请自行百度。</p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> treap </tag>
            
            <tag> BST </tag>
            
            <tag> 离线算法 </tag>
            
            <tag> 启发式合并 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unicode学习</title>
      <link href="/2017/09/25/Unicode%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/09/25/Unicode%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>Unicode学习笔记<br><a id="more"></a></p><script type="text/javascript" async src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script><h1 id="ASCII的诞生"><a href="#ASCII的诞生" class="headerlink" title="ASCII的诞生"></a>ASCII的诞生</h1><p>由于计算机最基本的单位是bit,只能记录0和1,于是人们想到了将复杂的字符与数字一一映射，从而从数字知道所要表示的内容。ASCII第一次以规范标准的类型发表是在1967年，最后一次更新是在1986年，共定义了128个字符（编号从 0 至 127）。</p><h1 id="Extended-ASCII"><a href="#Extended-ASCII" class="headerlink" title="Extended ASCII"></a>Extended ASCII</h1><p>ASCII的局限在于只能显示26个基本英文字母、阿拉伯数字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）<br>有人开始使用128至255编码重音符号等，这就产生了Extended ASCII。</p><h1 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h1><h2 id="Unicode的产生"><a href="#Unicode的产生" class="headerlink" title="Unicode的产生"></a>Unicode的产生</h2><p>尽管256个字符适合大部分的国家，但是像中国这样的国家，它们的字符的数量远远大于256种，于是，人们必须进一步扩大数字与字符的映射表，才能进一步的满足计算机表示的需求，Unicode应运而生。</p><p>早期的Unicode曾使用2 bytes，也就是16 bits编码字符，这样可以有 65536 个不同的编码，目标是囊括所有人类语言的所有文字。<br>后来发现65536个编码不够用。当今的Unicode范围为：    0 – 1,114,111 (0x10ffff)</p><h2 id="Unicode的基本概念"><a href="#Unicode的基本概念" class="headerlink" title="Unicode的基本概念"></a>Unicode的基本概念</h2><blockquote><p>The Unicode standard describes how characters are represented by <font color="#FF3030">code points</font>.</p></blockquote><p>code points 是什么能？它就是一个数字，这个数字能够独一无二的表示一个字符。它通常使用16进制来表示的</p><blockquote><p>In the standard, a code point is written using the notation U+12CA to mean the character with value 0x12ca (4810 decimal). </p></blockquote><h2 id="Unicode是如何显示出来人类能够读懂的字符"><a href="#Unicode是如何显示出来人类能够读懂的字符" class="headerlink" title="Unicode是如何显示出来人类能够读懂的字符"></a>Unicode是如何显示出来人类能够读懂的字符</h2><p>正如前面的介绍一样，Unicode是一系列的十六进制的数字，但是为什么我们平时看到的是<font color="#FF3030">字型</font>呢？这里面涉及到了另外的一个机制，将数字展示为字型,涉及一个软件的GUI设计,不进行深入的介绍。</p><blockquote><p>Most Python code doesn’t need to worry about glyphs; figuring out the correct glyph to display is generally the job of a GUI toolkit or a terminal’s font renderer</p></blockquote><h2 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h2><p>一个Unicode string代表的是一串十六进制的数字。为了保存下来，我们必须设置一个过程，将这些十六进制的数字转换为二进制的数字，从而保存下下来。这个过程叫<font color="#FF3030"><strong>编码（encoding）</strong></font>。</p><blockquote><p>A Unicode string is a sequence of code points, which are numbers from 0 to 0x10ffff（十进制： 1,114,111 ）<br>This sequence needs to be represented as a set of bytes (meaning, values from 0–255) in memory.<br>The rules for translating a Unicode string into a sequence of bytes are called an encoding.</p></blockquote><p><a href="https://www.branah.com/unicode-converter" target="_blank" rel="external">在线编码的网站</a></p><h3 id="32-bit-integer编码"><a href="#32-bit-integer编码" class="headerlink" title="32-bit integer编码"></a>32-bit integer编码</h3><p>我们将”python”编码为可储存的二进制的形式<br><img src="https://t1.picb.cc/uploads/2017/09/25/5NCHc.png" alt=""></p><p>缺点：</p><ul><li>计算机中存储的数据大部分的Unicode都在0~255之间，这样造成了极大的空间浪费</li><li>和原来的的C语言中的strlen()函数有冲突。</li></ul><h3 id="utf-8编码"><a href="#utf-8编码" class="headerlink" title="utf-8编码"></a>utf-8编码</h3><p>和之前的编码方式相比，utf-8编码的长度是可以变化的。</p><ul><li>若code point&lt;128,那么用1byte的二进数来储存这个字符</li><li>若128&lt;=code point&lt;=2047 (0x7ff)用2bytes</li><li>若code point&gt;2047,将会用3个或者是4个bytes来表示，每一个byte表示的范围都在<font color="#FF3030"><strong>128~255之间</strong></font>(想想为什么)。</li></ul><p>前面的想一想：如果三位或者是四位有一个byte表示在0~127之间，那么它到底是一个字节还是和三个字节表示一个整体呢？因此用这种规定来避免这种冲突，从而很容易判断哪些byte是一个整体</p><h1 id="Python2-7与Unicode"><a href="#Python2-7与Unicode" class="headerlink" title="Python2.7与Unicode"></a>Python2.7与Unicode</h1><p>python2.7内的字符串的类型<br><img src="https://t1.picb.cc/uploads/2017/09/25/5NOkt.png" alt=""></p><ul><li>Python 2.7中，str表示<strong>8位文本</strong>（8-bit string）和二进制数据；unicode表示<strong>Unicode文本</strong></li></ul><p>注意，在Python2中，若有下面的代码，则会报错，原因str类型保存的是八位文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name = str(<span class="string">'田'</span>)</div><div class="line"><span class="keyword">print</span> type(name)</div></pre></td></tr></table></figure><p>但是，下面的代码又是对的，注意区别：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'田'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(s)</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(s)</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure></p><p>一些操作的代码，注意操作的环境在Python2.7中进行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>unichr(<span class="number">97</span>)<span class="comment">#数字的范围在0~65535之间</span></div><div class="line"><span class="string">u'a'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>unichr(<span class="number">30000</span>)</div><div class="line"><span class="string">u'\u7530'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">97</span>)<span class="comment">#数字范围在0~255之间</span></div><div class="line"><span class="string">'a'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'a'</span>)</div><div class="line"><span class="number">97</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">u'田'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ord(s)<span class="comment">#只接受unicode类型的变量，</span></div><div class="line"><span class="number">30000</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'田'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ord(s)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: ord() expected a character, but string of length <span class="number">2</span> found</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(s)</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(s)</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure></p><h2 id="用于解码的-Built-in-Function-unicode"><a href="#用于解码的-Built-in-Function-unicode" class="headerlink" title="用于解码的 Built-in Function:unicode()"></a>用于解码的 Built-in Function:unicode()</h2><p>格式：</p><blockquote><p>unicode(string[, encoding, errors])</p></blockquote><p>encodeing表示的是原来的编码的方式，参数可以有utf-8,GB2312等等，若不填任何的参数，那么默认的encoding = ‘ASCII’. errors = ‘strict’(如有错误就会报错)或’repalce’(无法识别的会替换成+UFFFD，也是我们平时经常见到了一个黑色的菱形中间有一个问号的符号)或’ignore’(跳过这个编码数字)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>unicode(<span class="string">'abc\x80'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">UnicodeDecodeError: <span class="string">'gbk'</span> codec can<span class="string">'t decode byte 0x80 in position 3: incomplete multibyte sequence</span></div><div class="line"><span class="string">#原来我把系统的默认的编码方式改成了gbk,所以报错的时候显示的不是ASCII</span></div><div class="line"><span class="string">&gt;&gt;&gt; unicode('</span>abc\x80<span class="string">', encoding = '</span>latin_1<span class="string">')</span></div><div class="line"><span class="string">u'</span>abc\x80<span class="string">'</span></div></pre></td></tr></table></figure><h2 id="Unicode-string的用于编码的方法：encode"><a href="#Unicode-string的用于编码的方法：encode" class="headerlink" title="Unicode string的用于编码的方法：encode()"></a>Unicode string的用于编码的方法：encode()</h2><p>格式：</p><blockquote><p>str.encode([encoding[,errors]])</p></blockquote><p><img src="https://t1.picb.cc/uploads/2017/09/25/5NBoW.png" alt=""><br>上面的图片很好的解释了之前讲过的utf-8编码的可变长度的特性<br>再次回顾：</p><blockquote><p>和之前的编码方式相比，utf-8编码的长度是可以变化的。<br>若code point &lt; 128,那么用1byte的二进数来储存这个字符<br>若128 &lt;= code point &lt;= 2047 (0x7ff)用2bytes<br>若code point > 2047,将会用3个或者是4个bytes来表示</p></blockquote><h2 id="8-bit-string的用于解码的方法：str-decode"><a href="#8-bit-string的用于解码的方法：str-decode" class="headerlink" title="8-bit string的用于解码的方法：str.decode()"></a>8-bit string的用于解码的方法：str.decode()</h2><p>直接上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = unichr(<span class="number">40960</span>) + <span class="string">u'abcd'</span>+unichr(<span class="number">1972</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line"><span class="string">u'\ua000abcd\u07b4'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(s)</div><div class="line">&lt;type <span class="string">'unicode'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>utf8_version = s.encode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>utf8_version</div><div class="line"><span class="string">'\xea\x80\x80abcd\xde\xb4'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(utf8_version)</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = utf8_version.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2</div><div class="line"><span class="string">u'\ua000abcd\u07b4'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s == s2</div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>说明：utf8_version保存的是8-bit string，这种类型是用来将数据保存到文件中的。然后将其解码，解码的方式是utf-8,最后又转变成了unicode类型。</p><h2 id="是否可以对str对象使用encode-方法？"><a href="#是否可以对str对象使用encode-方法？" class="headerlink" title="是否可以对str对象使用encode()方法？"></a>是否可以对str对象使用encode()方法？</h2><blockquote><p>str.encode() 实际上等价于：<br>str.decode(sys. getdefaultencoding()).encode()<br>而 sys.getdefaultencoding() 一般是ascii<br>不要对str对象使用encode，不要对unicode对象使用decode</p><p>str.decode()和unicode.encode()是正规的用法</p></blockquote><h1 id="深刻理解python2-7里面的str和unicode类型的区别"><a href="#深刻理解python2-7里面的str和unicode类型的区别" class="headerlink" title="深刻理解python2.7里面的str和unicode类型的区别"></a>深刻理解python2.7里面的str和unicode类型的区别</h1><p>引号前是否有前缀 u 只是书写、显示时的表象。透过表象，进一步来看：<br>str表示<strong>8位文本</strong>（8-bit string）和<strong>二进制数据</strong><br>unicode表示<strong>Unicode文本</strong>（Unicode string）</p><p>str对象是一个“<font color="#FF3030">byte</font>序列”（ sequence of bytes ）；而unicode对象是“character序列”（sequence of characters），也可理解为sequence of <font color="#FF3030">code-points</font><br>Character或其在Unicode中的表示形式code point只是概念上的东西，计算机存储、传输信息需要以byte形式进行。这就是需要对unicode对象进行编码的原因</p><font color="#FF3030"><strong>如果你有一段数据保存在文件中，但是你不知道原理的编码方式是什么，那么打开文件就会变成一堆的乱码。因此，一个好的习惯是著名存储数据所用的编码方式，这样别人在打开文件的时候才知道用什么解码的方式来查看数据</strong></font><h1 id="utf-8与gbk2312的区别："><a href="#utf-8与gbk2312的区别：" class="headerlink" title="utf-8与gbk2312的区别："></a>utf-8与gbk2312的区别：</h1><p>utf-8由于是针对世界上所有的文字，所以在处理中文的时候大多数编码成3bytes,而是用gbk2312编码的话，中文编码为2bytes,因此gbk2312更适合中国文字的存储。</p><h1 id="Python-3-5与Unicode"><a href="#Python-3-5与Unicode" class="headerlink" title="Python 3.5与Unicode"></a>Python 3.5与Unicode</h1><ul><li>str类型支持Unicode，或者说Python3.5中的str类型就相当于Python 2.7中的unicode类型</li><li><p>str对象没有decode()方法,因为此时的str类型表示的就是python2的unicode类型。</p><blockquote><p>Python 2.7 包括两种数据类型：<font color="#FF3030">str</font>       和   <font color="#FF3030">unicode</font><br>Python 3.5 相对应的数据类型：<font color="#FF3030">bytes</font>   和   <font color="#FF3030">str</font></p></blockquote></li><li><p>在Python 3.5中， “bytes” 类型存储的是 byte 串。可以通过一个 b 前缀来声明 bytes</p></li></ul><h1 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h1><p><a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" target="_blank" rel="external">unicode前世今生</a><br><a href="http://pycoders-weekly-chinese.readthedocs.io/en/latest/issue5/unipain.html" target="_blank" rel="external">前文的中文翻译</a><br><a href="https://nedbatchelder.com/text/unipain.html" target="_blank" rel="external">unicode</a><br><a href="https://docs.python.org/3/howto/unicode.html" target="_blank" rel="external">python3官网对unicode的说明</a><br><a href="https://docs.python.org/2/howto/unicode.html" target="_blank" rel="external">python2官网对unicode的说明</a></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unicode </tag>
            
            <tag> utf-8 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一些智障的问题</title>
      <link href="/2017/09/21/%E4%B8%80%E4%BA%9B%E6%99%BA%E9%9A%9C%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2017/09/21/%E4%B8%80%E4%BA%9B%E6%99%BA%E9%9A%9C%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>我很智障啊，我也很绝望啊qaq.<br><a id="more"></a><br>正太分布的公式是怎么得到的？<a href="http://songshuhui.net/archives/76501" target="_blank" rel="external">资料的来源</a><br>为什么在相同的相同的频率，四六级考试可以播放不同的录音。<br>为什么32位的操作系统最多只能使用4g的内存？32指的是字节还是位？<br>什么是公钥，什么是私钥。<br>电路是怎么接收到外来的信号的，并且和外界的信号达到共同频率之后，达到收听声音的效果。(电路基础)</p>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>想入的坑</title>
      <link href="/2017/09/21/%E6%83%B3%E5%85%A5%E7%9A%84%E5%9D%91/"/>
      <url>/2017/09/21/%E6%83%B3%E5%85%A5%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>学习永无止境。<br><a id="more"></a><br>博弈论网课的笔记的整理<br>学完了概率论可以深入一下机器学习<br>树莓派<br>如何用excel进行大量的数据处理</p><p>深入学习python(《python核心编程》)</p><ul><li>网络爬虫</li><li>大数据处理</li></ul><p><del>数论中密码那一块的理论，什么是公钥，什么是私钥。</del><br><del>数模的算法收集(已退坑)</del></p><p><del>acm整理一套自己的模板，并且将其置顶</del><br>密码学，比特币的制造过程的原理。不仅仅是直观的去中心化的了解。数字货币。<br>想出国。。。<br>《tcp/ip详解》<br>什么是数值分析，凸优化，复变函数？（学科的大致了解）<br>汇编语言，学会使用OD。<br>函数式编程是什么？Haskell入门<br>latex来编写论文，大作业。<br>熟悉linux的环境以及各种快捷键</p><p>python大坑：</p><ul><li>用requests进行模拟网页登录，并且进行网页的跳转，爬取相应的信息。</li></ul>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown语法学习</title>
      <link href="/2017/09/21/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/09/21/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>本文是markdown这种轻量级文本编辑器的学习笔记<br><a id="more"></a></p><script type="text/javascript" async src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script><h1 id="标题大小的规定"><a href="#标题大小的规定" class="headerlink" title="标题大小的规定"></a>标题大小的规定</h1><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 一级标题</span></div><div class="line"><span class="section">## 二级标题</span></div><div class="line"><span class="section">### 三级标题</span></div><div class="line"><span class="section">#### 四级标题</span></div><div class="line"><span class="section">##### 五级标题</span></div><div class="line"><span class="section">###### 六级标题</span></div></pre></td></tr></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>1</li><li>2</li><li>3</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>1</div><div class="line"><span class="bullet">* </span>2</div><div class="line"><span class="bullet">* </span>3</div></pre></td></tr></table></figure><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>A</li><li>B</li><li>C</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>A</div><div class="line"><span class="bullet">2. </span>B</div><div class="line"><span class="bullet">3. </span>C</div></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="单层的引用"><a href="#单层的引用" class="headerlink" title="单层的引用"></a>单层的引用</h2><blockquote><p>编程救不了国~</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; 编程救不了国~</span></div></pre></td></tr></table></figure><h2 id="多层的引用嵌套"><a href="#多层的引用嵌套" class="headerlink" title="多层的引用嵌套"></a>多层的引用嵌套</h2><blockquote><p>学医救不了中国</p><blockquote><p>编程能救国？</p></blockquote></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; 学医救不了中国</span></div><div class="line">&gt;&gt;编程能救国？</div></pre></td></tr></table></figure><h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><p><img src="https://t1.picb.cc/uploads/2017/09/21/rYf7g.png" alt="假装有图片"><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">假装有图片</span>](<span class="link">https://t1.picb.cc/uploads/2017/09/21/rYf7g.png</span>)</div></pre></td></tr></table></figure></p><h2 id="改变图片的大小"><a href="#改变图片的大小" class="headerlink" title="改变图片的大小"></a>改变图片的大小</h2><p><a href="https://www.picb.cc" target="_blank" rel="external">推荐一个贴图链接</a><br>这个网站支持图片的大小的修改</p><h1 id="文字的粗体、斜体、加粗斜体、删除线标注颜色"><a href="#文字的粗体、斜体、加粗斜体、删除线标注颜色" class="headerlink" title="文字的粗体、斜体、加粗斜体、删除线标注颜色"></a>文字的粗体、斜体、加粗斜体、删除线标注颜色</h1><p><strong>这是粗体</strong><br><em>这是斜体</em><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del></p><font color="#FF3030"><strong>红色粗体字体</strong></font><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**这是粗体**</span></div><div class="line"><span class="emphasis">*这是斜体*</span></div><div class="line"><span class="strong">***这是加粗斜体**</span>*</div><div class="line">~~这是删除线~~</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">#FF3030</span>&gt;</span></span><span class="strong">__红色粗体字体__</span><span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></div></pre></td></tr></table></figure><h1 id="表格的表示"><a href="#表格的表示" class="headerlink" title="表格的表示"></a>表格的表示</h1><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| Tables        | Are           | Cool  |</div><div class="line">| ------------- |:-------------:| -----:| </div><div class="line">| col 3 is      | right-aligned | $1600 |</div><div class="line">| col 2 is      | centered      | $12   | </div><div class="line">| zebra stripes | are neat      | $1    |</div></pre></td></tr></table></figure><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><hr><p>假装有内容</p><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">***</span>*</div><div class="line">假装有内容</div><div class="line"><span class="emphasis">***</span>*</div></pre></td></tr></table></figure><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p><a href="https://www.google.com" target="_blank" rel="external">google</a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">google</span>](<span class="link">https://www.google.com</span>)</div></pre></td></tr></table></figure></p><h2 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h2><p>我经常逛<a href="https://www.zhihu.com" target="_blank" rel="external">知乎</a>，<a href="https://www.bilibili.com" target="_blank" rel="external">Bilibili</a>等网站。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">我经常逛[<span class="string">知乎</span>][<span class="symbol">1</span>]，[<span class="string">Bilibili</span>][<span class="symbol">2</span>]等网站。</div><div class="line">[<span class="symbol">1</span>]:<span class="link">https://www.zhihu.com</span></div><div class="line">[<span class="symbol">2</span>]:<span class="link">https://www.bilibili.com</span></div></pre></td></tr></table></figure><h1 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h1><p>注脚<a href="注脚内容1.">^1</a>的内容将会显示在文章的最后，测试注脚<a href="注脚内容2.">^2</a>。</p><font color="#FF3030"><strong>本地测试没有达到实验的状态，不过鼠标放在上面会有注脚的内容</strong></font><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">注脚[^1]的内容将会显示在文章的最后，测试注脚[^2]。</div><div class="line">[<span class="symbol">^1</span>]: <span class="link">注脚内容1.</span></div><div class="line">[<span class="symbol">^2</span>]: <span class="link">注脚内容2.</span></div></pre></td></tr></table></figure><h1 id="Latex公式编辑"><a href="#Latex公式编辑" class="headerlink" title="Latex公式编辑"></a>Latex公式编辑</h1><h2 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h2><p>质能守恒方程可以用一个很简洁的方程式 \(E = mc^2\) 来表达。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">质能守恒方程可以用一个很简洁的方程式 \\(E = mc^2\\) 来表达。</div></pre></td></tr></table></figure><p>行内式的格式是：<font color="#FF3030">\\(公式的编辑\\)</font></p><h2 id="整行的式子"><a href="#整行的式子" class="headerlink" title="整行的式子"></a>整行的式子</h2><p>$$ \sum_{i=1}^n a_i=0 $$</p><p>$$ f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$$\sum<span class="emphasis">_&#123;i=1&#125;^n a_</span>i=0$$</div><div class="line"></div><div class="line">$$f(x<span class="emphasis">_1,x_</span>x,\ldots,x<span class="emphasis">_n) = x_</span>1^2 + x<span class="emphasis">_2^2 + \cdots + x_</span>n^2 $$</div><div class="line"></div><div class="line">$$\sum^&#123;j-1&#125;<span class="emphasis">_&#123;k=0&#125;&#123;\widehat&#123;\gamma&#125;_</span>&#123;kj&#125; z_k&#125;$$</div></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C#fn:2" target="_blank" rel="external">markdown语法入门</a><br><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">mathjax语法</a><br><a href="http://blog.csdn.net/shmilychan/article/details/51482945" target="_blank" rel="external">makedown公式编辑</a><br><a href="http://blog.csdn.net/u013082989/article/details/70212008" target="_blank" rel="external">添加目录</a></p><h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a><font color="#FF3030">未解决的问题</font></h1><p>makedown语言来<del><strong>熟练</strong></del>的编辑公式</p>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>想买的东西</title>
      <link href="/2017/09/20/%E6%83%B3%E4%B9%B0%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
      <url>/2017/09/20/%E6%83%B3%E4%B9%B0%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
      <content type="html"><![CDATA[<p>购买力有限，列出一些以后想买的东西。<br><a id="more"></a></p><p>HDMI接口<br>移动硬盘<br><del>OSU小键盘</del><br>想换一个轻薄本<br><del>一个适合自己耳朵的耳机，等回南京找家专卖店试听吧。</del><br>租服务器来写网页<br>树莓派<br>想自己组装一台电脑，不过后面好像有这门课。<br>手机稳定器</p>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>欢迎来到我的新博客</title>
      <link href="/2017/09/20/hello-world/"/>
      <url>/2017/09/20/hello-world/</url>
      <content type="html"><![CDATA[<p>里面有我的一些想法。<br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在大一下的时候我就有搭建博客的打算了，虽然学习了很多搭建博客的方法，但是因为重重原因（还不是自己懒吗（逃。。。），搁置了此事，苟且用着csdn。直到我实在忍受不了自己经常性忘记一些学过的知识，并且没有整理的好习惯。<br>其次，语言的<font color="#FF3030"><strong>表达能力</strong></font>也很能体现一个人的思维能力。我希望用尽量通俗的语言来写出我想到的东西吧，内容会更偏向于算法，特此搭建此博客。<br>别无他意，只是希望能够记录自己的成长历程，方便自己日后的回顾与查阅。</p><h3 id="打算"><a href="#打算" class="headerlink" title="打算"></a>打算</h3><p>本博客可能两周或者更长的时间更新一次自己的一些算法学习的笔记吧，也可能会分享自己的一些心理路程（划掉）。之前用过word写过两篇文章，很渴望和他人分享自己的创作成果，毕竟是自己编辑了几个小时的成果，图文并茂。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本站基于<a href="https://hexo.io/" target="_blank" rel="external">hexo</a>和<a href="https://github.com/" target="_blank" rel="external">github</a>搭建而成，还有很多不完善的地方。待后续的学习之后可能会更新（也有可能专注于内容而不添加新的功能。）谢谢大家捧场~~~<br><a href="http://www.lookk.cn/2017/12/09/hexo-yilia主题添加文章访问量统计/" target="_blank" rel="external">添加访问量</a></p><h1 id="常用的网站收集"><a href="#常用的网站收集" class="headerlink" title="常用的网站收集"></a>常用的网站收集</h1><p>因为不想再另外的开一页记录了，索性就把常用的索引网站放在这个目录下吧<br><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">mathjax语法网站</a><br><a href="https://coolshell.cn/articles/5426.html" target="_blank" rel="external">vim的练级策略</a><br><a href="http://www.codecogs.com/latex/eqneditor.php" target="_blank" rel="external">公式在线编辑网站</a><br><a href="https://www.jianshu.com/p/1f8107a8778c" target="_blank" rel="external">添加看板娘模块</a><br><a href="http://www.uyan.cc/getcode" target="_blank" rel="external">有言评论系统</a><br><a href="http://www.cnblogs.com/zhurb/p/7253277.html" target="_blank" rel="external">xdoj一句话题解</a><br><a href="http://arch0n.myds.me:5000/" target="_blank" rel="external">xdu cloudy disc</a><br><a href="https://www.overleaf.com/8729203jgkbdyrpvnqk#/31131868/" target="_blank" rel="external">cv在线展示</a><br><a href="https://reps.mozilla.org/u/bobchao/" target="_blank" rel="external">cv2</a><br><a href="http://www.wolframalpha.com/?source=frontpage-immediate-access" target="_blank" rel="external">wolframalpha</a><br><a href="https://myslide.cn/slides/9118#" target="_blank" rel="external">online ppt</a></p><h1 id="个人记录"><a href="#个人记录" class="headerlink" title="个人记录"></a>个人记录</h1><p><a href="http://www.zizhuxuexi.cn/dasai/201510/30424.html" target="_blank" rel="external">高中作文</a><br><a href="https://osu.ppy.sh/u/10512625" target="_blank" rel="external">osu主页</a><br><a href="http://codeforces.com/profile/bbtl" target="_blank" rel="external">codeforces</a><br><a href="">贴吧水贴</a><br><a href="https://vjudge.net/user/bbtl04" target="_blank" rel="external">vjudge</a><br><a href="https://m.youtube.com/channel/UCf4a9-nIgyTiLAq1u6dd8kw" target="_blank" rel="external">youtube</a></p><h1 id="神牛的个人网页"><a href="#神牛的个人网页" class="headerlink" title="神牛的个人网页"></a>神牛的个人网页</h1><p><a href="https://github.com/yeleng?tab=followers" target="_blank" rel="external">yeleng’s github page</a><br><a href="https://oi.men.ci/tag/算法模板/" target="_blank" rel="external">menci’s blog</a><br><a href="http://hzwer.com/" target="_blank" rel="external">hzwer</a><br><a href="http://www.cnblogs.com/ECJTUACM-873284962/" target="_blank" rel="external">Angle kitty</a><br><a href="https://blog.csdn.net/acdreamers/article/details/39026505" target="_blank" rel="external">acdreamer</a><br><a href="http://pupiles.com/" target="_blank" rel="external">pupile的博客</a><br><a href="https://fancypei.github.io/Vim/" target="_blank" rel="external">Fancypei</a><br><a href="http://www.shuizilong.com/house/about-me/" target="_blank" rel="external">岛娘</a><br><a href="http://wjmzbmr.com/" target="_blank" rel="external">clj</a><br><a href="http://blog.xalanq.com/oi_template/" target="_blank" rel="external">板子不错</a></p><h1 id="记录一些东西"><a href="#记录一些东西" class="headerlink" title="记录一些东西"></a>记录一些东西</h1><p>my sgu id: 070795<br>my bzoj id: 16030130096<br>my ccf id: bbtl<br>10.255.44.33<br><a href="http://10.255.44.33/srun_portal_pc.php?ac_id=1&amp;" target="_blank" rel="external">xd university’s ip</a></p><h1 id="各种各样的oj"><a href="#各种各样的oj" class="headerlink" title="各种各样的oj"></a>各种各样的oj</h1><p><a href="http://acm.xidian.edu.cn/problemset.php" target="_blank" rel="external">xdoj</a><br><a href="https://vjudge.net/group" target="_blank" rel="external">voj</a><br><a href="http://poj.org/problemlist" target="_blank" rel="external">poj</a><br><a href="http://codeforces.com/" target="_blank" rel="external">cf</a><br><a href="http://acm.hdu.edu.cn/listproblem.php?vol=1" target="_blank" rel="external">hduoj</a><br><a href="https://www.nowcoder.com/acm/contest/107#question" target="_blank" rel="external">牛客</a><br><a href="http://ppoj.ac.cn/" target="_blank" rel="external">ppoj</a><br><a href="http://acm.sgu.ru/poll_action.php" target="_blank" rel="external">sgu</a><br><a href="http://www.cspro.org/lead/application/ccf/login.jsp" target="_blank" rel="external">ccf</a><br><a href="https://www.lydsy.com/JudgeOnline/wttl/wttl.php" target="_blank" rel="external">bzoj</a><br><a href="https://www.jisuanke.com/contest/1229" target="_blank" rel="external">计蒜客</a></p><h1 id="图库"><a href="#图库" class="headerlink" title="图库"></a>图库</h1><p><a href="http://www.tietuku.com/" target="_blank" rel="external">库1</a><br><a href="https://pic.xiaojianjian.net/" target="_blank" rel="external">小贱贱</a><br><a href="https://www.picb.cc/" target="_blank" rel="external">会被墙的但很稳定</a></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><a href="https://csacademy.com/app/graph_editor/" target="_blank" rel="external">在线画图</a><br><a href="https://csacademy.com/app/geometry_widget/" target="_blank" rel="external">二维坐标图</a></p><h1 id="game-list"><a href="#game-list" class="headerlink" title="game list"></a>game list</h1><ul><li>Graveyard_Keeper</li><li>Dark soul</li></ul><h1 id="animation-list"><a href="#animation-list" class="headerlink" title="animation list"></a>animation list</h1><ul><li>death notes</li><li>JOJO</li></ul><h1 id="todo-list"><a href="#todo-list" class="headerlink" title="todo list"></a>todo list</h1><ul><li>build a cloud disk<br><a href="https://www.sohu.com/a/165792368_825275" target="_blank" rel="external">教程</a></li><li>build ipv6 environment</li><li>go through  tiny os codes</li><li></li></ul>]]></content>
      
      <categories>
          
          <category> ex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我想法 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
